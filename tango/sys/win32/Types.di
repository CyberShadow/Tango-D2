module tango.sys.win32.Types;

/*
 	Module:		Windows Types
 	Author: 	Trevor Parscal
*/
private
{
    import tango.sys.win32.Config;
}

/+ Aliases, Types, and Constants +/
const int NULL = 0;
alias int SCODE;
alias void VOID;
alias void* POINTER;
alias ushort ATOM;
alias uint WINBOOL;
alias WINBOOL BOOL;
alias uint CALTYPE;
alias uint CALID;
alias char CCHAR;
alias char* PCHAR;
alias uint COLORREF;
alias uint TCOLORREF;
alias int SHORT;
alias int INT;
alias int WINT;
alias int LONG;
alias short WORD;
alias uint DWORD;
alias int* PINTEGER;
alias double LONGLONG;
alias LONGLONG* PLONGLONG;
alias double DWORDLONG;
alias DWORDLONG* PDWORDLONG;
alias double FLOAT;
alias int HANDLE;
alias HANDLE HACCEL;
alias HANDLE HBITMAP;
alias HANDLE HBRUSH;
alias HANDLE HCOLORSPACE;
alias HANDLE HCONV;
alias HANDLE HCONVLIST;
alias HANDLE HCURSOR;
alias HANDLE HDBC;
alias HANDLE HDC;
alias HANDLE HDDEDATA;
alias HANDLE HDESK;
alias HANDLE HDROP;
alias HANDLE HDWP;
alias HANDLE HENHMETAFILE;
alias HANDLE HENV;
alias HANDLE HFILE;
alias HANDLE HFONT;
alias HANDLE HGDIOBJ;
alias HANDLE HGLOBAL;
alias HANDLE HGLRC;
alias HANDLE HHOOK;
alias HANDLE HICON;
alias HANDLE HIMAGELIST;
alias HANDLE HINST;
alias HINST HINSTANCE;
alias HANDLE HKEY;
alias HANDLE HKL;
alias HANDLE HLOCAL;
alias HANDLE HMENU;
alias HANDLE HMETAFILE;
alias HANDLE HMODULE;
alias HANDLE HPALETTE;
alias HANDLE HPEN;
alias HANDLE HRASCONN;
alias int HRESULT;
alias HANDLE HRGN;
alias HANDLE HRSRC;
alias HANDLE HSTMT;
alias HANDLE HSZ;
alias HANDLE HWINSTA;
alias HANDLE HWND;
alias ushort LANGID;
alias DWORD LCID;
alias DWORD LCTYPE;
alias int LPARAM;
alias ushort* LP;
alias WINBOOL* LPBOOL;
alias ubyte* LPBYTE;
alias PCHAR LPCCH;
alias PCHAR LPCH;
alias COLORREF* LPCOLORREF;
alias PCHAR LPCSTR;
alias PCHAR LPCTSTR;
alias wchar* LPCWCH;
alias wchar* LPCWSTR;
alias DWORD* LPDWORD;
alias HANDLE* LPHANDLE;
alias int* LPINT;
alias int* LPLONG;
alias PCHAR LPSTR;
alias PCHAR LPTCH;
alias PCHAR LPTSTR;
alias int LRESULT;
alias POINTER LPVOID;
alias POINTER LPCVOID;
alias wchar* LPWCH;
alias wchar* LPWORD;
alias wchar* LPWSTR;
alias wchar* NWPSTR;
alias WINBOOL* PWINBOOL;
alias ubyte* PBOOLEAN;
alias ubyte* PBYTE;
alias PCHAR PCCH;
alias PCHAR PCH;
alias PCHAR PCSTR;
alias wchar* PCWCH;
alias wchar* PCWSTR;
alias DWORD* PDWORD;
alias double* PFLOAT;
alias HANDLE* PHANDLE;
alias HKEY* PHKEY;
alias int* PINT;
alias int* PLONG;
alias int* PSHORT;
alias PCHAR PSTR;
alias PCHAR PSZ;
alias ubyte* PTBYTE;
alias PCHAR PTCH;
alias PCHAR PTCHAR;
alias PCHAR PTSTR;
alias ubyte* PUCHAR;
alias wchar* PWCH;
alias wchar* PWCHAR;
alias ushort* PWORD;
alias uint* PUINT;
alias uint* PULONG;
alias ushort* PUSHORT;
alias POINTER PVOID;
alias int RETCODE;
alias HANDLE SC_HANDLE;
alias LPVOID SC_LOCK;
alias SC_HANDLE* LPSC_HANDLE;
alias DWORD SERVICE_STATUS_HANDLE;
alias ubyte TBYTE;
alias char TCHAR;
alias ubyte BCHAR;
alias ubyte UCHAR;
alias wchar WCHAR;
alias uint UINT;
alias uint ULONG;
alias ushort USHORT;
alias uint WPARAM;
alias int ACL_INFORMATION_CLASS;
enum { AclRevisionInformation = 1, AclSizeInformation,  };
alias ACL_INFORMATION_CLASS _ACL_INFORMATION_CLASS;
alias int MEDIA_TYPE;
enum { Unknown, F5_1Pt2_512, F3_1Pt44_512, F3_2Pt88_512, F3_20Pt8_512, F3_720_512, F5_360_512, F5_320_512, F5_320_1024, F5_180_512, F5_160_512, RemovableMedia, FixedMedia,  };
alias MEDIA_TYPE _MEDIA_TYPE;
const int RASCS_DONE = (0x2000);
const int RASCS_PAUSED = (0x1000);
alias int RASCONNSTATE;
enum { RASCS_OpenPort = 0, RASCS_PortOpened, RASCS_ConnectDevice, RASCS_DeviceConnected, RASCS_AllDevicesConnected, RASCS_Authenticate, RASCS_AuthNotify, RASCS_AuthRetry, RASCS_AuthCallback, RASCS_AuthChangePassword, RASCS_AuthProject, RASCS_AuthLinkSpeed, RASCS_AuthAck, RASCS_ReAuthenticate, RASCS_Authenticated, RASCS_PrepareForCallback, RASCS_WaitForModemReset, RASCS_WaitForCallback, RASCS_Projected, RASCS_StartAuthentication, RASCS_CallbackComplete, RASCS_LogonNetwork, RASCS_Interactive = RASCS_PAUSED, RASCS_RetryAuthentication, RASCS_CallbackSetByCaller, RASCS_PasswordExpired, RASCS_Connected = RASCS_DONE, RASCS_Disconnected,  };
alias RASCONNSTATE _RASCONNSTATE;
alias int RASPROJECTION;
enum { RASP_Amb = 0x10000, RASP_PppNbf = 0x803F, RASP_PppIpx = 0x802B, RASP_PppIp = 0x8021,  };
alias RASPROJECTION _RASPROJECTION;
alias int SECURITY_IMPERSONATION_LEVEL;
enum { SecurityAnonymous, SecurityIdentification, SecurityImpersonation, SecurityDelegation,  };
alias SECURITY_IMPERSONATION_LEVEL _SECURITY_IMPERSONATION_LEVEL;
alias int SID_NAME_USE;
enum { SidTypeUser = 1, SidTypeGroup, SidTypeDomain, SidTypeAlias, SidTypeWellKnownGroup, SidTypeDeletedAccount, SidTypeInvalid, SidTypeUnknown,  };
alias SID_NAME_USE* PSID_NAME_USE;
alias SID_NAME_USE _SID_NAME_USE;
alias int TOKEN_INFORMATION_CLASS;
enum { TokenUser = 1, TokenGroups, TokenPrivileges, TokenOwner, TokenPrimaryGroup, TokenDefaultDacl, TokenSource, TokenType, TokenImpersonationLevel, TokenStatistics,  };
alias TOKEN_INFORMATION_CLASS _TOKEN_INFORMATION_CLASS;
alias int TOKEN_TYPE;
enum { TokenPrimary = 1, TokenImpersonation,  };
alias TOKEN_TYPE TAGTOKEN_TYPE;

extern(Windows){
alias int (*BFFCALLBACK)(HWND, UINT, LPARAM, LPARAM);
alias UINT (*LPCCHOOKPROC)(HWND, UINT, WPARAM, LPARAM);
alias UINT (*LPCFHOOKPROC)(HWND, UINT, WPARAM, LPARAM);
alias POINTER PTHREAD_START_ROUTINE;
alias PTHREAD_START_ROUTINE LPTHREAD_START_ROUTINE;
alias DWORD (*EDITSTREAMCALLBACK)(DWORD, LPBYTE, LONG, LONG);
alias UINT (*LPFRHOOKPROC)(HWND, UINT, WPARAM, LPARAM);
alias UINT (*LPOFNHOOKPROC)(HWND, UINT, WPARAM, LPARAM);
alias UINT (*LPPRINTHOOKPROC)(HWND, UINT, WPARAM, LPARAM);
alias UINT (*LPSETUPHOOKPROC)(HWND, UINT, WPARAM, LPARAM);
alias LRESULT (*DLGPROC)(HWND, UINT, WPARAM, LPARAM);
alias int (*PFNPROPSHEETCALLBACK)(HWND, UINT, LPARAM);
alias void (*LPSERVICE_MAIN_FUNCTION)(DWORD);
alias int (*PFNTVCOMPARE)(LPARAM, LPARAM, LPARAM);
alias LRESULT (*WNDPROC)(HWND, UINT, WPARAM, LPARAM);
alias POINTER FARPROC;
alias FARPROC PROC;
alias WINBOOL (*ENUMRESTYPEPROC)(HANDLE, LPTSTR, LONG);
alias WINBOOL (*ENUMRESNAMEPROC)(HANDLE, LPCTSTR, LPTSTR, LONG);
alias WINBOOL (*ENUMRESLANGPROC)(HANDLE, LPCTSTR, LPCTSTR, ushort, LONG);
alias FARPROC DESKTOPENUMPROC;
alias WINBOOL (*ENUMWINDOWSPROC)(HWND, LPARAM);
alias WINBOOL (*ENUMWINDOWSTATIONPROC)(LPTSTR, LPARAM);
alias void (*SENDASYNCPROC)(HWND, UINT, DWORD);
alias void (*TIMERPROC)(HWND, UINT, UINT);
alias BOOL(*MONITORENUMPROC)(HMONITOR, HDC, RECT*, LPARAM);
alias FARPROC GRAYSTRINGPROC;
alias WINBOOL (*DRAWSTATEPROC)(HDC, LPARAM, WPARAM, int, int);
alias WINBOOL (*PROPENUMPROCEX)(HWND, LPCTSTR, HANDLE, DWORD);
alias WINBOOL (*PROPENUMPROC)(HWND, LPCTSTR, HANDLE);
alias LRESULT (*HOOKPROC)(int, WPARAM, LPARAM);
alias void (*ENUMOBJECTSPROC)(LPVOID);
alias void (*LINEDDAPROC)(int, int);
alias WINBOOL (*TABORTPROC)(HDC, int);
alias UINT (*LPPAGEPAINTHOOK)(HWND, UINT, WPARAM, LPARAM);
alias UINT (*LPPAGESETUPHOOK)(HWND, UINT, WPARAM, LPARAM);
alias int (*ICMENUMPROC)(LPTSTR, LPARAM);
alias LONG (*EDITWORDBREAKPROCEX)(PCHAR, LONG, ubyte, INT);
alias int (*PFNLVCOMPARE)(LPARAM, LPARAM, LPARAM);
alias WINBOOL (*LOCALE_ENUMPROC)(LPTSTR);
alias WINBOOL (*CODEPAGE_ENUMPROC)(LPTSTR);
alias WINBOOL (*DATEFMT_ENUMPROC)(LPTSTR);
alias WINBOOL (*TIMEFMT_ENUMPROC)(LPTSTR);
alias WINBOOL (*CALINFO_ENUMPROC)(LPTSTR);
alias WINBOOL (*PHANDLER_ROUTINE)(DWORD);
alias WINBOOL (*LPHANDLER_FUNCTION)(DWORD);
alias UINT (*PFNGETPROFILEPATH)(LPCTSTR, LPSTR, UINT);
alias UINT (*PFNRECONCILEPROFILE)(LPCTSTR, LPCTSTR, DWORD);
alias WINBOOL (*PFNPROCESSPOLICIES)(HWND, LPCTSTR, LPCTSTR, LPCTSTR, DWORD);
}

const {
 char* SE_CREATE_TOKEN_NAME = ("SeCreateTokenPrivilege");
 char* SE_ASSIGNPRIMARYTOKEN_NAME = ("SeAssignPrimaryTokenPrivilege");
 char* SE_LOCK_MEMORY_NAME = ("SeLockMemoryPrivilege");
 char* SE_INCREASE_QUOTA_NAME = ("SeIncreaseQuotaPrivilege");
 char* SE_UNSOLICITED_INPUT_NAME = ("SeUnsolicitedInputPrivilege");
 char* SE_MACHINE_ACCOUNT_NAME = ("SeMachineAccountPrivilege");
 char* SE_TCB_NAME = ("SeTcbPrivilege");
 char* SE_SECURITY_NAME = ("SeSecurityPrivilege");
 char* SE_TAKE_OWNERSHIP_NAME = ("SeTakeOwnershipPrivilege");
 char* SE_LOAD_DRIVER_NAME = ("SeLoadDriverPrivilege");
 char* SE_SYSTEM_PROFILE_NAME = ("SeSystemProfilePrivilege");
 char* SE_SYSTEMTIME_NAME = ("SeSystemtimePrivilege");
 char* SE_PROF_SINGLE_PROCESS_NAME = ("SeProfileSingleProcessPrivilege");
 char* SE_INC_BASE_PRIORITY_NAME = ("SeIncreaseBasePriorityPrivilege");
 char* SE_CREATE_PAGEFILE_NAME = ("SeCreatePagefilePrivilege");
 char* SE_CREATE_PERMANENT_NAME = ("SeCreatePermanentPrivilege");
 char* SE_BACKUP_NAME = ("SeBackupPrivilege");
 char* SE_RESTORE_NAME = ("SeRestorePrivilege");
 char* SE_SHUTDOWN_NAME = ("SeShutdownPrivilege");
 char* SE_DEBUG_NAME = ("SeDebugPrivilege");
 char* SE_AUDIT_NAME = ("SeAuditPrivilege");
 char* SE_SYSTEM_ENVIRONMENT_NAME = ("SeSystemEnvironmentPrivilege");
 char* SE_CHANGE_NOTIFY_NAME = ("SeChangeNotifyPrivilege");
 char* SE_REMOTE_SHUTDOWN_NAME = ("SeRemoteShutdownPrivilege");
 char* SERVICES_ACTIVE_DATABASEA = ("ServicesActive");
 char* SERVICES_FAILED_DATABASEA = ("ServicesFailed");
 char* SC_GROUP_IDENTIFIERA = ("+");
 char* SERVICES_ACTIVE_DATABASE = (SERVICES_ACTIVE_DATABASEA);
 char* SERVICES_FAILED_DATABASE = (SERVICES_FAILED_DATABASEA);
 char* SC_GROUP_IDENTIFIER = (SC_GROUP_IDENTIFIERA);
}

extern(Windows){
alias HDDEDATA (*PFNCALLBACK)(UINT, UINT, HCONV, HSZ, HSZ, HDDEDATA, DWORD, DWORD);
}
alias PFNCALLBACK CALLB;
alias WINBOOL SECURITY___FILE___TRACKING_MODE;
alias FARPROC WNDENUMPROC;
alias FARPROC ENHMFENUMPROC;
alias DWORD CCSTYLE;
alias CCSTYLE* PCCSTYLE;
alias CCSTYLE* LPCCSTYLE;
alias DWORD CCSTYLEFLAGA;
alias CCSTYLEFLAGA* PCCSTYLEFLAGA;
alias CCSTYLEFLAGA* LPCCSTYLEFLAGA;
const{
int SM_CXVIRTUALSCREEN = (76);
int SM_CYVIRTUALSCREEN = (77);
int MONITORINFOF_PRIMARY = (1);
int LZERROR_UNKNOWNALG = -((8));
int LZERROR_BADVALUE = -((7));
int LZERROR_GLOBLOCK = -((6));
int LZERROR_GLOBALLOC = -((5));
int LZERROR_WRITE = -((4));
int LZERROR_READ = -((3));
int LZERROR_BADOUTHANDLE = -((2));
int LZERROR_BADINHANDLE = -((1));
int NO_ERROR = (0);
int ERROR_SUCCESS = (0);
int ERROR_INVALID_FUNCTION = (1);
int ERROR_FILE_NOT_FOUND = (2);
int ERROR_PATH_NOT_FOUND = (3);
int ERROR_TOO_MANY_OPEN_FILES = (4);
int ERROR_ACCESS_DENIED = (5);
int ERROR_INVALID_HANDLE = (6);
int ERROR_ARENA_TRASHED = (7);
int ERROR_NOT_ENOUGH_MEMORY = (8);
int ERROR_INVALID_BLOCK = (9);
int ERROR_BAD_ENVIRONMENT = (10);
int ERROR_BAD_FORMAT = (11);
int ERROR_INVALID_ACCESS = (12);
int ERROR_INVALID_DATA = (13);
int ERROR_OUTOFMEMORY = (14);
int ERROR_INVALID_DRIVE = (15);
int ERROR_CURRENT_DIRECTORY = (16);
int ERROR_NOT_SAME_DEVICE = (17);
int ERROR_NO_MORE_FILES = (18);
int ERROR_WRITE_PROTECT = (19);
int ERROR_BAD_UNIT = (20);
int ERROR_NOT_READY = (21);
int ERROR_BAD_COMMAND = (22);
int ERROR_CRC = (23);
int ERROR_BAD_LENGTH = (24);
int ERROR_SEEK = (25);
int ERROR_NOT_DOS_DISK = (26);
int ERROR_SECTOR_NOT_FOUND = (27);
int ERROR_OUT_OF_PAPER = (28);
int ERROR_WRITE_FAULT = (29);
int ERROR_READ_FAULT = (30);
int ERROR_GEN_FAILURE = (31);
int ERROR_SHARING_VIOLATION = (32);
int ERROR_LOCK_VIOLATION = (33);
int ERROR_WRONG_DISK = (34);
int ERROR_SHARING_BUFFER_EXCEEDED = (36);
int ERROR_HANDLE_EOF = (38);
int ERROR_HANDLE_DISK_FULL = (39);
int ERROR_NOT_SUPPORTED = (50);
int ERROR_REM_NOT_LIST = (51);
int ERROR_DUP_NAME = (52);
int ERROR_BAD_NETPATH = (53);
int ERROR_NETWORK_BUSY = (54);
int ERROR_DEV_NOT_EXIST = (55);
int ERROR_TOO_MANY_CMDS = (56);
int ERROR_ADAP_HDW_ERR = (57);
int ERROR_BAD_NET_RESP = (58);
int ERROR_UNEXP_NET_ERR = (59);
int ERROR_BAD_REM_ADAP = (60);
int ERROR_PRINTQ_FULL = (61);
int ERROR_NO_SPOOL_SPACE = (62);
int ERROR_PRINT_CANCELLED = (63);
int ERROR_NETNAME_DELETED = (64);
int ERROR_NETWORK_ACCESS_DENIED = (65);
int ERROR_BAD_DEV_TYPE = (66);
int ERROR_BAD_NET_NAME = (67);
int ERROR_TOO_MANY_NAMES = (68);
int ERROR_TOO_MANY_SESS = (69);
int ERROR_SHARING_PAUSED = (70);
int ERROR_REQ_NOT_ACCEP = (71);
int ERROR_REDIR_PAUSED = (72);
int ERROR_FILE_EXISTS = (80);
int ERROR_CANNOT_MAKE = (82);
int ERROR_FAIL_I24 = (83);
int ERROR_OUT_OF_STRUCTURES = (84);
int ERROR_ALREADY_ASSIGNED = (85);
int ERROR_INVALID_PASSWORD = (86);
int ERROR_INVALID_PARAMETER = (87);
int ERROR_NET_WRITE_FAULT = (88);
int ERROR_NO_PROC_SLOTS = (89);
int ERROR_TOO_MANY_SEMAPHORES = (100);
int ERROR_EXCL_SEM_ALREADY_OWNED = (101);
int ERROR_SEM_IS_SET = (102);
int ERROR_TOO_MANY_SEM_REQUESTS = (103);
int ERROR_INVALID_AT_INTERRUPT_TIME = (104);
int ERROR_SEM_OWNER_DIED = (105);
int ERROR_SEM_USER_LIMIT = (106);
int ERROR_DISK_CHANGE = (107);
int ERROR_DRIVE_LOCKED = (108);
int ERROR_BROKEN_PIPE = (109);
int ERROR_OPEN_FAILED = (110);
int ERROR_BUFFER_OVERFLOW = (111);
int ERROR_DISK_FULL = (112);
int ERROR_NO_MORE_SEARCH_HANDLES = (113);
int ERROR_INVALID_TARGET_HANDLE = (114);
int ERROR_INVALID_CATEGORY = (117);
int ERROR_INVALID_VERIFY_SWITCH = (118);
int ERROR_BAD_DRIVER_LEVEL = (119);
int ERROR_CALL_NOT_IMPLEMENTED = (120);
int ERROR_SEM_TIMEOUT = (121);
int ERROR_INSUFFICIENT_BUFFER = (122);
int ERROR_INVALID_NAME = (123);
int ERROR_INVALID_LEVEL = (124);
int ERROR_NO_VOLUME_LABEL = (125);
int ERROR_MOD_NOT_FOUND = (126);
int ERROR_PROC_NOT_FOUND = (127);
int ERROR_WAIT_NO_CHILDREN = (128);
int ERROR_CHILD_NOT_COMPLETE = (129);
int ERROR_DIRECT_ACCESS_HANDLE = (130);
int ERROR_NEGATIVE_SEEK = (131);
int ERROR_SEEK_ON_DEVICE = (132);
int ERROR_IS_JOIN_TARGET = (133);
int ERROR_IS_JOINED = (134);
int ERROR_IS_SUBSTED = (135);
int ERROR_NOT_JOINED = (136);
int ERROR_NOT_SUBSTED = (137);
int ERROR_JOIN_TO_JOIN = (138);
int ERROR_SUBST_TO_SUBST = (139);
int ERROR_JOIN_TO_SUBST = (140);
int ERROR_SUBST_TO_JOIN = (141);
int ERROR_BUSY_DRIVE = (142);
int ERROR_SAME_DRIVE = (143);
int ERROR_DIR_NOT_ROOT = (144);
int ERROR_DIR_NOT_EMPTY = (145);
int ERROR_IS_SUBST_PATH = (146);
int ERROR_IS_JOIN_PATH = (147);
int ERROR_PATH_BUSY = (148);
int ERROR_IS_SUBST_TARGET = (149);
int ERROR_SYSTEM_TRACE = (150);
int ERROR_INVALID_EVENT_COUNT = (151);
int ERROR_TOO_MANY_MUXWAITERS = (152);
int ERROR_INVALID_LIST_FORMAT = (153);
int ERROR_LABEL_TOO_LONG = (154);
int ERROR_TOO_MANY_TCBS = (155);
int ERROR_SIGNAL_REFUSED = (156);
int ERROR_DISCARDED = (157);
int ERROR_NOT_LOCKED = (158);
int ERROR_BAD_THREADID_ADDR = (159);
int ERROR_BAD_ARGUMENTS = (160);
int ERROR_BAD_PATHNAME = (161);
int ERROR_SIGNAL_PENDING = (162);
int ERROR_MAX_THRDS_REACHED = (164);
int ERROR_LOCK_FAILED = (167);
int ERROR_BUSY = (170);
int ERROR_CANCEL_VIOLATION = (173);
int ERROR_ATOMIC_LOCKS_NOT_SUPPORTED = (174);
int ERROR_INVALID_SEGMENT_NUMBER = (180);
int ERROR_INVALID_ORDINAL = (182);
int ERROR_ALREADY_EXISTS = (183);
int ERROR_INVALID_FLAG_NUMBER = (186);
int ERROR_SEM_NOT_FOUND = (187);
int ERROR_INVALID_STARTING_CODESEG = (188);
int ERROR_INVALID_STACKSEG = (189);
int ERROR_INVALID_MODULETYPE = (190);
int ERROR_INVALID_EXE_SIGNATURE = (191);
int ERROR_EXE_MARKED_INVALID = (192);
int ERROR_BAD_EXE_FORMAT = (193);
int ERROR_ITERATED_DATA_EXCEEDS_64k = (194);
int ERROR_INVALID_MINALLOCSIZE = (195);
int ERROR_DYNLINK_FROM_INVALID_RING = (196);
int ERROR_IOPL_NOT_ENABLED = (197);
int ERROR_INVALID_SEGDPL = (198);
int ERROR_AUTODATASEG_EXCEEDS_64k = (199);
int ERROR_RING2SEG_MUST_BE_MOVABLE = (200);
int ERROR_RELOC_CHAIN_XEEDS_SEGLIM = (201);
int ERROR_INFLOOP_IN_RELOC_CHAIN = (202);
int ERROR_ENVVAR_NOT_FOUND = (203);
int ERROR_NO_SIGNAL_SENT = (205);
int ERROR_FILENAME_EXCED_RANGE = (206);
int ERROR_RING2_STACK_IN_USE = (207);
int ERROR_META_EXPANSION_TOO_LONG = (208);
int ERROR_INVALID_SIGNAL_NUMBER = (209);
int ERROR_THREAD_1_INACTIVE = (210);
int ERROR_LOCKED = (212);
int ERROR_TOO_MANY_MODULES = (214);
int ERROR_NESTING_NOT_ALLOWED = (215);
int ERROR_BAD_PIPE = (230);
int ERROR_PIPE_BUSY = (231);
int ERROR_NO_DATA = (232);
int ERROR_PIPE_NOT_CONNECTED = (233);
int ERROR_MORE_DATA = (234);
int ERROR_VC_DISCONNECTED = (240);
int ERROR_INVALID_EA_NAME = (254);
int ERROR_EA_LIST_INCONSISTENT = (255);
int ERROR_NO_MORE_ITEMS = (259);
int ERROR_CANNOT_COPY = (266);
int ERROR_DIRECTORY = (267);
int ERROR_EAS_DIDNT_FIT = (275);
int ERROR_EA_FILE_CORRUPT = (276);
int ERROR_EA_TABLE_FULL = (277);
int ERROR_INVALID_EA_HANDLE = (278);
int ERROR_EAS_NOT_SUPPORTED = (282);
int ERROR_NOT_OWNER = (288);
int ERROR_TOO_MANY_POSTS = (298);
int ERROR_PARTIAL_COPY = (299);
int ERROR_MR_MID_NOT_FOUND = (317);
int ERROR_INVALID_ADDRESS = (487);
int ERROR_ARITHMETIC_OVERFLOW = (534);
int ERROR_PIPE_CONNECTED = (535);
int ERROR_PIPE_LISTENING = (536);
int ERROR_EA_ACCESS_DENIED = (994);
int ERROR_OPERATION_ABORTED = (995);
int ERROR_IO_INCOMPLETE = (996);
int ERROR_IO_PENDING = (997);
int ERROR_NOACCESS = (998);
int ERROR_SWAPERROR = (999);
int ERROR_STACK_OVERFLOW = (1001);
int ERROR_INVALID_MESSAGE = (1002);
int ERROR_CAN_NOT_COMPLETE = (1003);
int ERROR_INVALID_FLAGS = (1004);
int ERROR_UNRECOGNIZED_VOLUME = (1005);
int ERROR_FILE_INVALID = (1006);
int ERROR_FULLSCREEN_MODE = (1007);
int ERROR_NO_TOKEN = (1008);
int ERROR_BADDB = (1009);
int ERROR_BADKEY = (1010);
int ERROR_CANTOPEN = (1011);
int ERROR_CANTREAD = (1012);
int ERROR_CANTWRITE = (1013);
int ERROR_REGISTRY_RECOVERED = (1014);
int ERROR_REGISTRY_CORRUPT = (1015);
int ERROR_REGISTRY_IO_FAILED = (1016);
int ERROR_NOT_REGISTRY_FILE = (1017);
int ERROR_KEY_DELETED = (1018);
int ERROR_NO_LOG_SPACE = (1019);
int ERROR_KEY_HAS_CHILDREN = (1020);
int ERROR_CHILD_MUST_BE_VOLATILE = (1021);
int ERROR_NOTIFY_ENUM_DIR = (1022);
int ERROR_DEPENDENT_SERVICES_RUNNING = (1051);
int ERROR_INVALID_SERVICE_CONTROL = (1052);
int ERROR_SERVICE_REQUEST_TIMEOUT = (1053);
int ERROR_SERVICE_NO_THREAD = (1054);
int ERROR_SERVICE_DATABASE_LOCKED = (1055);
int ERROR_SERVICE_ALREADY_RUNNING = (1056);
int ERROR_INVALID_SERVICE_ACCOUNT = (1057);
int ERROR_SERVICE_DISABLED = (1058);
int ERROR_CIRCULAR_DEPENDENCY = (1059);
int ERROR_SERVICE_DOES_NOT_EXIST = (1060);
int ERROR_SERVICE_CANNOT_ACCEPT_CTRL = (1061);
int ERROR_SERVICE_NOT_ACTIVE = (1062);
int ERROR_FAILED_SERVICE_CONTROLLER_CONNECT = (1063);
int ERROR_EXCEPTION_IN_SERVICE = (1064);
int ERROR_DATABASE_DOES_NOT_EXIST = (1065);
int ERROR_SERVICE_SPECIFIC_ERROR = (1066);
int ERROR_PROCESS_ABORTED = (1067);
int ERROR_SERVICE_DEPENDENCY_FAIL = (1068);
int ERROR_SERVICE_LOGON_FAILED = (1069);
int ERROR_SERVICE_START_HANG = (1070);
int ERROR_INVALID_SERVICE_LOCK = (1071);
int ERROR_SERVICE_MARKED_FOR_DELETE = (1072);
int ERROR_SERVICE_EXISTS = (1073);
int ERROR_ALREADY_RUNNING_LKG = (1074);
int ERROR_SERVICE_DEPENDENCY_DELETED = (1075);
int ERROR_BOOT_ALREADY_ACCEPTED = (1076);
int ERROR_SERVICE_NEVER_STARTED = (1077);
int ERROR_DUPLICATE_SERVICE_NAME = (1078);
int ERROR_END_OF_MEDIA = (1100);
int ERROR_FILEMARK_DETECTED = (1101);
int ERROR_BEGINNING_OF_MEDIA = (1102);
int ERROR_SETMARK_DETECTED = (1103);
int ERROR_NO_DATA_DETECTED = (1104);
int ERROR_PARTITION_FAILURE = (1105);
int ERROR_INVALID_BLOCK_LENGTH = (1106);
int ERROR_DEVICE_NOT_PARTITIONED = (1107);
int ERROR_UNABLE_TO_LOCK_MEDIA = (1108);
int ERROR_UNABLE_TO_UNLOAD_MEDIA = (1109);
int ERROR_MEDIA_CHANGED = (1110);
int ERROR_BUS_RESET = (1111);
int ERROR_NO_MEDIA_IN_DRIVE = (1112);
int ERROR_NO_UNICODE_TRANSLATION = (1113);
int ERROR_DLL_INIT_FAILED = (1114);
int ERROR_SHUTDOWN_IN_PROGRESS = (1115);
int ERROR_NO_SHUTDOWN_IN_PROGRESS = (1116);
int ERROR_IO_DEVICE = (1117);
int ERROR_SERIAL_NO_DEVICE = (1118);
int ERROR_IRQ_BUSY = (1119);
int ERROR_MORE_WRITES = (1120);
int ERROR_COUNTER_TIMEOUT = (1121);
int ERROR_FLOPPY_ID_MARK_NOT_FOUND = (1122);
int ERROR_FLOPPY_WRONG_CYLINDER = (1123);
int ERROR_FLOPPY_UNKNOWN_ERROR = (1124);
int ERROR_FLOPPY_BAD_REGISTERS = (1125);
int ERROR_DISK_RECALIBRATE_FAILED = (1126);
int ERROR_DISK_OPERATION_FAILED = (1127);
int ERROR_DISK_RESET_FAILED = (1128);
int ERROR_EOM_OVERFLOW = (1129);
int ERROR_NOT_ENOUGH_SERVER_MEMORY = (1130);
int ERROR_POSSIBLE_DEADLOCK = (1131);
int ERROR_MAPPED_ALIGNMENT = (1132);
int ERROR_SET_POWER_STATE_VETOED = (1140);
int ERROR_SET_POWER_STATE_FAILED = (1141);
int ERROR_OLD_WIN_VERSION = (1150);
int ERROR_APP_WRONG_OS = (1151);
int ERROR_SINGLE_INSTANCE_APP = (1152);
int ERROR_RMODE_APP = (1153);
int ERROR_INVALID_DLL = (1154);
int ERROR_NO_ASSOCIATION = (1155);
int ERROR_DDE_FAIL = (1156);
int ERROR_DLL_NOT_FOUND = (1157);
int ERROR_BAD_USERNAME = (2202);
int ERROR_NOT_CONNECTED = (2250);
int ERROR_OPEN_FILES = (2401);
int ERROR_ACTIVE_CONNECTIONS = (2402);
int ERROR_DEVICE_IN_USE = (2404);
int ERROR_BAD_DEVICE = (1200);
int ERROR_CONNECTION_UNAVAIL = (1201);
int ERROR_DEVICE_ALREADY_REMEMBERED = (1202);
int ERROR_NO_NET_OR_BAD_PATH = (1203);
int ERROR_BAD_PROVIDER = (1204);
int ERROR_CANNOT_OPEN_PROFILE = (1205);
int ERROR_BAD_PROFILE = (1206);
int ERROR_NOT_CONTAINER = (1207);
int ERROR_EXTENDED_ERROR = (1208);
int ERROR_INVALID_GROUPNAME = (1209);
int ERROR_INVALID_COMPUTERNAME = (1210);
int ERROR_INVALID_EVENTNAME = (1211);
int ERROR_INVALID_DOMAINNAME = (1212);
int ERROR_INVALID_SERVICENAME = (1213);
int ERROR_INVALID_NETNAME = (1214);
int ERROR_INVALID_SHARENAME = (1215);
int ERROR_INVALID_PASSWORDNAME = (1216);
int ERROR_INVALID_MESSAGENAME = (1217);
int ERROR_INVALID_MESSAGEDEST = (1218);
int ERROR_SESSION_CREDENTIAL_CONFLICT = (1219);
int ERROR_REMOTE_SESSION_LIMIT_EXCEEDED = (1220);
int ERROR_DUP_DOMAINNAME = (1221);
int ERROR_NO_NETWORK = (1222);
int ERROR_CANCELLED = (1223);
int ERROR_USER_MAPPED_FILE = (1224);
int ERROR_CONNECTION_REFUSED = (1225);
int ERROR_GRACEFUL_DISCONNECT = (1226);
int ERROR_ADDRESS_ALREADY_ASSOCIATED = (1227);
int ERROR_ADDRESS_NOT_ASSOCIATED = (1228);
int ERROR_CONNECTION_INVALID = (1229);
int ERROR_CONNECTION_ACTIVE = (1230);
int ERROR_NETWORK_UNREACHABLE = (1231);
int ERROR_HOST_UNREACHABLE = (1232);
int ERROR_PROTOCOL_UNREACHABLE = (1233);
int ERROR_PORT_UNREACHABLE = (1234);
int ERROR_REQUEST_ABORTED = (1235);
int ERROR_CONNECTION_ABORTED = (1236);
int ERROR_RETRY = (1237);
int ERROR_CONNECTION_COUNT_LIMIT = (1238);
int ERROR_LOGIN_TIME_RESTRICTION = (1239);
int ERROR_LOGIN_WKSTA_RESTRICTION = (1240);
int ERROR_INCORRECT_ADDRESS = (1241);
int ERROR_ALREADY_REGISTERED = (1242);
int ERROR_SERVICE_NOT_FOUND = (1243);
int ERROR_NOT_AUTHENTICATED = (1244);
int ERROR_NOT_LOGGED_ON = (1245);
int ERROR_CONTINUE = (1246);
int ERROR_ALREADY_INITIALIZED = (1247);
int ERROR_NO_MORE_DEVICES = (1248);
int ERROR_NOT_ALL_ASSIGNED = (1300);
int ERROR_SOME_NOT_MAPPED = (1301);
int ERROR_NO_QUOTAS_FOR_ACCOUNT = (1302);
int ERROR_LOCAL_USER_SESSION_KEY = (1303);
int ERROR_NULL_LM_PASSWORD = (1304);
int ERROR_UNKNOWN_REVISION = (1305);
int ERROR_REVISION_MISMATCH = (1306);
int ERROR_INVALID_OWNER = (1307);
int ERROR_INVALID_PRIMARY_GROUP = (1308);
int ERROR_NO_IMPERSONATION_TOKEN = (1309);
int ERROR_CANT_DISABLE_MANDATORY = (1310);
int ERROR_NO_LOGON_SERVERS = (1311);
int ERROR_NO_SUCH_LOGON_SESSION = (1312);
int ERROR_NO_SUCH_PRIVILEGE = (1313);
int ERROR_PRIVILEGE_NOT_HELD = (1314);
int ERROR_INVALID_ACCOUNT_NAME = (1315);
int ERROR_USER_EXISTS = (1316);
int ERROR_NO_SUCH_USER = (1317);
int ERROR_GROUP_EXISTS = (1318);
int ERROR_NO_SUCH_GROUP = (1319);
int ERROR_MEMBER_IN_GROUP = (1320);
int ERROR_MEMBER_NOT_IN_GROUP = (1321);
int ERROR_LAST_ADMIN = (1322);
int ERROR_WRONG_PASSWORD = (1323);
int ERROR_ILL_FORMED_PASSWORD = (1324);
int ERROR_PASSWORD_RESTRICTION = (1325);
int ERROR_LOGON_FAILURE = (1326);
int ERROR_ACCOUNT_RESTRICTION = (1327);
int ERROR_INVALID_LOGON_HOURS = (1328);
int ERROR_INVALID_WORKSTATION = (1329);
int ERROR_PASSWORD_EXPIRED = (1330);
int ERROR_ACCOUNT_DISABLED = (1331);
int ERROR_NONE_MAPPED = (1332);
int ERROR_TOO_MANY_LUIDS_REQUESTED = (1333);
int ERROR_LUIDS_EXHAUSTED = (1334);
int ERROR_INVALID_SUB_AUTHORITY = (1335);
int ERROR_INVALID_ACL = (1336);
int ERROR_INVALID_SID = (1337);
int ERROR_INVALID_SECURITY_DESCR = (1338);
int ERROR_BAD_INHERITANCE_ACL = (1340);
int ERROR_SERVER_DISABLED = (1341);
int ERROR_SERVER_NOT_DISABLED = (1342);
int ERROR_INVALID_ID_AUTHORITY = (1343);
int ERROR_ALLOTTED_SPACE_EXCEEDED = (1344);
int ERROR_INVALID_GROUP_ATTRIBUTES = (1345);
int ERROR_BAD_IMPERSONATION_LEVEL = (1346);
int ERROR_CANT_OPEN_ANONYMOUS = (1347);
int ERROR_BAD_VALIDATION_CLASS = (1348);
int ERROR_BAD_TOKEN_TYPE = (1349);
int ERROR_NO_SECURITY_ON_OBJECT = (1350);
int ERROR_CANT_ACCESS_DOMAIN_INFO = (1351);
int ERROR_INVALID_SERVER_STATE = (1352);
int ERROR_INVALID_DOMAIN_STATE = (1353);
int ERROR_INVALID_DOMAIN_ROLE = (1354);
int ERROR_NO_SUCH_DOMAIN = (1355);
int ERROR_DOMAIN_EXISTS = (1356);
int ERROR_DOMAIN_LIMIT_EXCEEDED = (1357);
int ERROR_INTERNAL_DB_CORRUPTION = (1358);
int ERROR_INTERNAL_ERROR = (1359);
int ERROR_GENERIC_NOT_MAPPED = (1360);
int ERROR_BAD_DESCRIPTOR_FORMAT = (1361);
int ERROR_NOT_LOGON_PROCESS = (1362);
int ERROR_LOGON_SESSION_EXISTS = (1363);
int ERROR_NO_SUCH_PACKAGE = (1364);
int ERROR_BAD_LOGON_SESSION_STATE = (1365);
int ERROR_LOGON_SESSION_COLLISION = (1366);
int ERROR_INVALID_LOGON_TYPE = (1367);
int ERROR_CANNOT_IMPERSONATE = (1368);
int ERROR_RXACT_INVALID_STATE = (1369);
int ERROR_RXACT_COMMIT_FAILURE = (1370);
int ERROR_SPECIAL_ACCOUNT = (1371);
int ERROR_SPECIAL_GROUP = (1372);
int ERROR_SPECIAL_USER = (1373);
int ERROR_MEMBERS_PRIMARY_GROUP = (1374);
int ERROR_TOKEN_ALREADY_IN_USE = (1375);
int ERROR_NO_SUCH_ALIAS = (1376);
int ERROR_MEMBER_NOT_IN_ALIAS = (1377);
int ERROR_MEMBER_IN_ALIAS = (1378);
int ERROR_ALIAS_EXISTS = (1379);
int ERROR_LOGON_NOT_GRANTED = (1380);
int ERROR_TOO_MANY_SECRETS = (1381);
int ERROR_SECRET_TOO_LONG = (1382);
int ERROR_INTERNAL_DB_ERROR = (1383);
int ERROR_TOO_MANY___FILE___IDS = (1384);
int ERROR_LOGON_TYPE_NOT_GRANTED = (1385);
int ERROR_NT_CROSS_ENCRYPTION_REQUIRED = (1386);
int ERROR_NO_SUCH_MEMBER = (1387);
int ERROR_INVALID_MEMBER = (1388);
int ERROR_TOO_MANY_SIDS = (1389);
int ERROR_LM_CROSS_ENCRYPTION_REQUIRED = (1390);
int ERROR_NO_INHERITANCE = (1391);
int ERROR_FILE_CORRUPT = (1392);
int ERROR_DISK_CORRUPT = (1393);
int ERROR_NO_USER_SESSION_KEY = (1394);
int ERROR_LICENSE_QUOTA_EXCEEDED = (1395);
int ERROR_INVALID_WINDOW_HANDLE = (1400);
int ERROR_INVALID_MENU_HANDLE = (1401);
int ERROR_INVALID_CURSOR_HANDLE = (1402);
int ERROR_INVALID_ACCEL_HANDLE = (1403);
int ERROR_INVALID_HOOK_HANDLE = (1404);
int ERROR_INVALID_DWP_HANDLE = (1405);
int ERROR_TLW_WITH_WSCHILD = (1406);
int ERROR_CANNOT_FIND_WND_CLASS = (1407);
int ERROR_WINDOW_OF_OTHER_THREAD = (1408);
int ERROR_HOTKEY_ALREADY_REGISTERED = (1409);
int ERROR_CLASS_ALREADY_EXISTS = (1410);
int ERROR_CLASS_DOES_NOT_EXIST = (1411);
int ERROR_CLASS_HAS_WINDOWS = (1412);
int ERROR_INVALID_INDEX = (1413);
int ERROR_INVALID_ICON_HANDLE = (1414);
int ERROR_PRIVATE_DIALOG_INDEX = (1415);
int ERROR_LISTBOX_ID_NOT_FOUND = (1416);
int ERROR_NO_WILDCARD_CHARACTERS = (1417);
int ERROR_CLIPBOARD_NOT_OPEN = (1418);
int ERROR_HOTKEY_NOT_REGISTERED = (1419);
int ERROR_WINDOW_NOT_DIALOG = (1420);
int ERROR_CONTROL_ID_NOT_FOUND = (1421);
int ERROR_INVALID_COMBOBOX_MESSAGE = (1422);
int ERROR_WINDOW_NOT_COMBOBOX = (1423);
int ERROR_INVALID_EDIT_HEIGHT = (1424);
int ERROR_DC_NOT_FOUND = (1425);
int ERROR_INVALID_HOOK_FILTER = (1426);
int ERROR_INVALID_FILTER_PROC = (1427);
int ERROR_HOOK_NEEDS_HMOD = (1428);
int ERROR_GLOBAL_ONLY_HOOK = (1429);
int ERROR_JOURNAL_HOOK_SET = (1430);
int ERROR_HOOK_NOT_INSTALLED = (1431);
int ERROR_INVALID_LB_MESSAGE = (1432);
int ERROR_SETCOUNT_ON_BAD_LB = (1433);
int ERROR_LB_WITHOUT_TABSTOPS = (1434);
int ERROR_DESTROY_OBJECT_OF_OTHER_THREAD = (1435);
int ERROR_CHILD_WINDOW_MENU = (1436);
int ERROR_NO_SYSTEM_MENU = (1437);
int ERROR_INVALID_MSGBOX_STYLE = (1438);
int ERROR_INVALID_SPI_VALUE = (1439);
int ERROR_SCREEN_ALREADY_LOCKED = (1440);
int ERROR_HWNDS_HAVE_DIFF_PARENT = (1441);
int ERROR_NOT_CHILD_WINDOW = (1442);
int ERROR_INVALID_GW_COMMAND = (1443);
int ERROR_INVALID_THREAD_ID = (1444);
int ERROR_NON_MDICHILD_WINDOW = (1445);
int ERROR_POPUP_ALREADY_ACTIVE = (1446);
int ERROR_NO_SCROLLBARS = (1447);
int ERROR_INVALID_SCROLLBAR_RANGE = (1448);
int ERROR_INVALID_SHOWWIN_COMMAND = (1449);
int ERROR_NO_SYSTEM_RESOURCES = (1450);
int ERROR_NONPAGED_SYSTEM_RESOURCES = (1451);
int ERROR_PAGED_SYSTEM_RESOURCES = (1452);
int ERROR_WORKING_SET_QUOTA = (1453);
int ERROR_PAGEFILE_QUOTA = (1454);
int ERROR_COMMITMENT_LIMIT = (1455);
int ERROR_MENU_ITEM_NOT_FOUND = (1456);
int ERROR_EVENTLOG_FILE_CORRUPT = (1500);
int ERROR_EVENTLOG_CANT_START = (1501);
int ERROR_LOG_FILE_FULL = (1502);
int ERROR_EVENTLOG_FILE_CHANGED = (1503);
int RPC_S_INVALID_STRING_BINDING = (1700);
int RPC_S_WRONG_KIND_OF_BINDING = (1701);
int RPC_S_INVALID_BINDING = (1702);
int RPC_S_PROTSEQ_NOT_SUPPORTED = (1703);
int RPC_S_INVALID_RPC_PROTSEQ = (1704);
int RPC_S_INVALID_STRING_UUID = (1705);
int RPC_S_INVALID_ENDPOINT_FORMAT = (1706);
int RPC_S_INVALID_NET_ADDR = (1707);
int RPC_S_NO_ENDPOINT_FOUND = (1708);
int RPC_S_INVALID_TIMEOUT = (1709);
int RPC_S_OBJECT_NOT_FOUND = (1710);
int RPC_S_ALREADY_REGISTERED = (1711);
int RPC_S_TYPE_ALREADY_REGISTERED = (1712);
int RPC_S_ALREADY_LISTENING = (1713);
int RPC_S_NO_PROTSEQS_REGISTERED = (1714);
int RPC_S_NOT_LISTENING = (1715);
int RPC_S_UNKNOWN_MGR_TYPE = (1716);
int RPC_S_UNKNOWN_IF = (1717);
int RPC_S_NO_BINDINGS = (1718);
int RPC_S_NO_PROTSEQS = (1719);
int RPC_S_CANT_CREATE_ENDPOINT = (1720);
int RPC_S_OUT_OF_RESOURCES = (1721);
int RPC_S_SERVER_UNAVAILABLE = (1722);
int RPC_S_SERVER_TOO_BUSY = (1723);
int RPC_S_INVALID_NETWORK_OPTIONS = (1724);
int RPC_S_NO_CALL_ACTIVE = (1725);
int RPC_S_CALL_FAILED = (1726);
int RPC_S_CALL_FAILED_DNE = (1727);
int RPC_S_PROTOCOL_ERROR = (1728);
int RPC_S_UNSUPPORTED_TRANS_SYN = (1730);
int RPC_S_UNSUPPORTED_TYPE = (1732);
int RPC_S_INVALID_TAG = (1733);
int RPC_S_INVALID_BOUND = (1734);
int RPC_S_NO_ENTRY_NAME = (1735);
int RPC_S_INVALID_NAME_SYNTAX = (1736);
int RPC_S_UNSUPPORTED_NAME_SYNTAX = (1737);
int RPC_S_UUID_NO_ADDRESS = (1739);
int RPC_S_DUPLICATE_ENDPOINT = (1740);
int RPC_S_UNKNOWN_AUTHN_TYPE = (1741);
int RPC_S_MAX_CALLS_TOO_SMALL = (1742);
int RPC_S_STRING_TOO_LONG = (1743);
int RPC_S_PROTSEQ_NOT_FOUND = (1744);
int RPC_S_PROCNUM_OUT_OF_RANGE = (1745);
int RPC_S_BINDING_HAS_NO_AUTH = (1746);
int RPC_S_UNKNOWN_AUTHN_SERVICE = (1747);
int RPC_S_UNKNOWN_AUTHN_LEVEL = (1748);
int RPC_S_INVALID_AUTH_IDENTITY = (1749);
int RPC_S_UNKNOWN_AUTHZ_SERVICE = (1750);
int EPT_S_INVALID_ENTRY = (1751);
int EPT_S_CANT_PERFORM_OP = (1752);
int EPT_S_NOT_REGISTERED = (1753);
int RPC_S_NOTHING_TO_EXPORT = (1754);
int RPC_S_INCOMPLETE_NAME = (1755);
int RPC_S_INVALID_VERS_OPTION = (1756);
int RPC_S_NO_MORE_MEMBERS = (1757);
int RPC_S_NOT_ALL_OBJS_UNEXPORTED = (1758);
int RPC_S_INTERFACE_NOT_FOUND = (1759);
int RPC_S_ENTRY_ALREADY_EXISTS = (1760);
int RPC_S_ENTRY_NOT_FOUND = (1761);
int RPC_S_NAME_SERVICE_UNAVAILABLE = (1762);
int RPC_S_INVALID_NAF_ID = (1763);
int RPC_S_CANNOT_SUPPORT = (1764);
int RPC_S_NO___FILE___AVAILABLE = (1765);
int RPC_S_INTERNAL_ERROR = (1766);
int RPC_S_ZERO_DIVIDE = (1767);
int RPC_S_ADDRESS_ERROR = (1768);
int RPC_S_FP_DIV_ZERO = (1769);
int RPC_S_FP_UNDERFLOW = (1770);
int RPC_S_FP_OVERFLOW = (1771);
int RPC_X_NO_MORE_ENTRIES = (1772);
int RPC_X_SS_CHAR_TRANS_OPEN_FAIL = (1773);
int RPC_X_SS_CHAR_TRANS_SHORT_FILE = (1774);
int RPC_X_SS_IN_NULL___FILE__ = (1775);
int RPC_X_SS___FILE___DAMAGED = (1777);
int RPC_X_SS_HANDLES_MISMATCH = (1778);
int RPC_X_SS_CANNOT_GET_CALL_HANDLE = (1779);
int RPC_X_NULL_REF_POINTER = (1780);
int RPC_X_ENUM_VALUE_OUT_OF_RANGE = (1781);
int RPC_X_BYTE_COUNT_TOO_SMALL = (1782);
int RPC_X_BAD_STUB_DATA = (1783);
int ERROR_INVALID_USER_BUFFER = (1784);
int ERROR_UNRECOGNIZED_MEDIA = (1785);
int ERROR_NO_TRUST_LSA_SECRET = (1786);
int ERROR_NO_TRUST_SAM_ACCOUNT = (1787);
int ERROR_TRUSTED_DOMAIN_FAILURE = (1788);
int ERROR_TRUSTED_RELATIONSHIP_FAILURE = (1789);
int ERROR_TRUST_FAILURE = (1790);
int RPC_S_CALL_IN_PROGRESS = (1791);
int ERROR_NETLOGON_NOT_STARTED = (1792);
int ERROR_ACCOUNT_EXPIRED = (1793);
int ERROR_REDIRECTOR_HAS_OPEN_HANDLES = (1794);
int ERROR_PRINTER_DRIVER_ALREADY_INSTALLED = (1795);
int ERROR_UNKNOWN_PORT = (1796);
int ERROR_UNKNOWN_PRINTER_DRIVER = (1797);
int ERROR_UNKNOWN_PRINTPROCESSOR = (1798);
int ERROR_INVALID_SEPARATOR_FILE = (1799);
int ERROR_INVALID_PRIORITY = (1800);
int ERROR_INVALID_PRINTER_NAME = (1801);
int ERROR_PRINTER_ALREADY_EXISTS = (1802);
int ERROR_INVALID_PRINTER_COMMAND = (1803);
int ERROR_INVALID_DATATYPE = (1804);
int ERROR_INVALID_ENVIRONMENT = (1805);
int RPC_S_NO_MORE_BINDINGS = (1806);
int ERROR_NOLOGON_INTERDOMAIN_TRUST_ACCOUNT = (1807);
int ERROR_NOLOGON_WORKSTATION_TRUST_ACCOUNT = (1808);
int ERROR_NOLOGON_SERVER_TRUST_ACCOUNT = (1809);
int ERROR_DOMAIN_TRUST_INCONSISTENT = (1810);
int ERROR_SERVER_HAS_OPEN_HANDLES = (1811);
int ERROR_RESOURCE_DATA_NOT_FOUND = (1812);
int ERROR_RESOURCE_TYPE_NOT_FOUND = (1813);
int ERROR_RESOURCE_NAME_NOT_FOUND = (1814);
int ERROR_RESOURCE_LANG_NOT_FOUND = (1815);
int ERROR_NOT_ENOUGH_QUOTA = (1816);
int RPC_S_NO_INTERFACES = (1817);
int RPC_S_CALL_CANCELLED = (1818);
int RPC_S_BINDING_INCOMPLETE = (1819);
int RPC_S_COMM_FAILURE = (1820);
int RPC_S_UNSUPPORTED_AUTHN_LEVEL = (1821);
int RPC_S_NO_PRINC_NAME = (1822);
int RPC_S_NOT_RPC_ERROR = (1823);
int RPC_S_UUID_LOCAL_ONLY = (1824);
int RPC_S_SEC_PKG_ERROR = (1825);
int RPC_S_NOT_CANCELLED = (1826);
int RPC_X_INVALID_ES_ACTION = (1827);
int RPC_X_WRONG_ES_VERSION = (1828);
int RPC_X_WRONG_STUB_VERSION = (1829);
int RPC_S_GROUP_MEMBER_NOT_FOUND = (1898);
int EPT_S_CANT_CREATE = (1899);
int RPC_S_INVALID_OBJECT = (1900);
int ERROR_INVALID_TIME = (1901);
int ERROR_INVALID_FORM_NAME = (1902);
int ERROR_INVALID_FORM_SIZE = (1903);
int ERROR_ALREADY_WAITING = (1904);
int ERROR_PRINTER_DELETED = (1905);
int ERROR_INVALID_PRINTER_STATE = (1906);
int ERROR_PASSWORD_MUST_CHANGE = (1907);
int ERROR_DOMAIN_CONTROLLER_NOT_FOUND = (1908);
int ERROR_ACCOUNT_LOCKED_OUT = (1909);
int ERROR_NO_BROWSER_SERVERS_FOUND = (6118);
int ERROR_INVALID_PIXEL_FORMAT = (2000);
int ERROR_BAD_DRIVER = (2001);
int ERROR_INVALID_WINDOW_STYLE = (2002);
int ERROR_METAFILE_NOT_SUPPORTED = (2003);
int ERROR_TRANSFORM_NOT_SUPPORTED = (2004);
int ERROR_CLIPPING_NOT_SUPPORTED = (2005);
int ERROR_UNKNOWN_PRINT_MONITOR = (3000);
int ERROR_PRINTER_DRIVER_IN_USE = (3001);
int ERROR_SPOOL_FILE_NOT_FOUND = (3002);
int ERROR_SPL_NO_STARTDOC = (3003);
int ERROR_SPL_NO_ADDJOB = (3004);
int ERROR_PRINT_PROCESSOR_ALREADY_INSTALLED = (3005);
int ERROR_PRINT_MONITOR_ALREADY_INSTALLED = (3006);
int ERROR_WINS_INTERNAL = (4000);
int ERROR_CAN_NOT_DEL_LOCAL_WINS = (4001);
int ERROR_STATIC_INIT = (4002);
int ERROR_INC_BACKUP = (4003);
int ERROR_FULL_BACKUP = (4004);
int ERROR_REC_NON_EXISTENT = (4005);
int ERROR_RPL_NOT_ALLOWED = (4006);
int MAX_PATH = (260);
int LF_FACESIZE = (32);
int LF_FULLFACESIZE = (64);
int ELF_VENDOR_SIZE = (4);
int SECURITY_STATIC_TRACKING = (0);
int SECURITY_DYNAMIC_TRACKING = (1);
int MAX_DEFAULTCHAR = (2);
int MAX_LEADBYTES = (12);
int EXCEPTION_MAXIMUM_PARAMETERS = (15);
int CCHDEVICENAME = (32);
int CCHFORMNAME = (32);
int MENU_TEXT_LEN = (40);
int MAX_LANA = (254);
int NCBNAMSZ = (16);
int NETBIOS_NAME_LEN = (16);
int OFS_MAXPATHNAME = (128);
int MAX_TAB_STOPS = (32);
int ANYSIZE_ARRAY = (1);
int RAS_MaxCallbackNumber = (128);
int RAS_MaxDeviceName = (128);
int RAS_MaxDeviceType = (16);
int RAS_MaxEntryName = (256);
int RAS_MaxIpAddress = (15);
int RAS_MaxIpxAddress = (21);
int RAS_MaxPhoneNumber = (128);
int UNLEN = (256);
int PWLEN = (256);
int CNLEN = (15);
int DNLEN = (15);
int MAXDWORD = (0xFFFFFFFF);
int MAXWORD = (0xFFFF);
int MAXBYTE = (0xFF);
int MINCHAR = (0x80);
int MAXCHAR = (0x7F);
int MINSHORT = (0x8000);
int MAXSHORT = (0x7FFF);
int MINLONG = (0x80000000);
int MAXLONG = (0x7FFFFFFF);
int FILE_BEGIN = (0);
int FILE_CURRENT = (1);
int FILE_END = (2);
int OF_READ = (0);
int OF_READWRITE = (2);
int OF_WRITE = (1);
int OF_SHARE_COMPAT = (0);
int OF_SHARE_DENY_NONE = (64);
int OF_SHARE_DENY_READ = (48);
int OF_SHARE_DENY_WRITE = (32);
int OF_SHARE_EXCLUSIVE = (16);
int OF_CANCEL = (2048);
int OF_CREATE = (4096);
int OF_DELETE = (512);
int OF_EXIST = (16384);
int OF_PARSE = (256);
int OF_PROMPT = (8192);
int OF_REOPEN = (32768);
int OF_VERIFY = (1024);
int HKL_NEXT = (1);
int HKL_PREV = (0);
int KLF_REORDER = (8);
int KLF_UNLOADPREVIOUS = (4);
int KLF_ACTIVATE = (1);
int KLF_NOTELLSHELL = (128);
int KLF_REPLACELANG = (16);
int KLF_SUBSTITUTE_OK = (2);
int MF_BITMAP = (0x4);
int MF_DISABLED = (0x2);
int MF_ENABLED = (0);
int MF_GRAYED = (0x1);
int MF_HELP = (0x4000);
int MF_MENUBARBREAK = (0x20);
int MF_MENUBREAK = (0x40);
int MF_MOUSESELECT = (0x8000);
int MF_OWNERDRAW = (0x100);
int MF_POPUP = (0x10);
int MF_SEPARATOR = (0x800);
int MF_STRING = (0);
int MF_SYSMENU = (0x2000);
int MF_USECHECKBITMAPS = (0x200);
int BLACKNESS = (0x00000042);
int NOTSRCERASE = (0x001100A6);
int NOTSRCCOPY = (0x00330008);
int SRCERASE = (0x00440328);
int DSTINVERT = (0x00550009);
int PATINVERT = (0x005A0049);
int SRCINVERT = (0x00660046);
int SRCAND = (0x008800C6);
int MERGEPAINT = (0x00BB0226);
int MERGECOPY = (0x00C000CA);
int SRCCOPY = (0x00CC0020);
int SRCPAINT = (0x00EE0086);
int PATCOPY = (0x00F00021);
int PATPAINT = (0x00FB0A09);
int WHITENESS = (0x00FF0062);
int R2_BLACK = (1);
int R2_COPYPEN = (13);
int R2_MASKNOTPEN = (3);
int R2_MASKPEN = (9);
int R2_MASKPENNOT = (5);
int R2_MERGENOTPEN = (12);
int R2_MERGEPEN = (15);
int R2_MERGEPENNOT = (14);
int R2_NOP = (11);
int R2_NOT = (6);
int R2_NOTCOPYPEN = (4);
int R2_NOTMASKPEN = (8);
int R2_NOTMERGEPEN = (2);
int R2_NOTXORPEN = (10);
int R2_WHITE = (16);
int R2_XORPEN = (7);
int BSF_FLUSHDISK = (4);
int BSF_FORCEIFHUNG = (32);
int BSF_IGNORECURRENTTASK = (2);
int BSF_NOHANG = (8);
int BSF_POSTMESSAGE = (16);
int BSF_QUERY = (1);
int BSM_ALLCOMPONENTS = (0);
int BSM_APPLICATIONS = (8);
int BSM_INSTALLABLEDRIVERS = (4);
int BSM_NETDRIVER = (2);
int BSM_VXDS = (1);
int BROADCAST_QUERY_DENY = (1112363332);
int NMPWAIT_NOWAIT = (1);
int NMPWAIT_WAIT_FOREVER = -((1));
int NMPWAIT_USE_DEFAULT_WAIT = (0);
int MDITILE_SKIPDISABLED = (2);
int MDITILE_HORIZONTAL = (1);
int MDITILE_VERTICAL = (0);
int HCBT_ACTIVATE = (5);
int HCBT_CLICKSKIPPED = (6);
int HCBT_CREATEWND = (3);
int HCBT_DESTROYWND = (4);
int HCBT_KEYSKIPPED = (7);
int HCBT_MINMAX = (1);
int HCBT_MOVESIZE = (0);
int HCBT_QS = (2);
int HCBT_SETFOCUS = (9);
int HCBT_SYSCOMMAND = (8);
int DM_BITSPERPEL = (0x40000);
int DM_PELSWIDTH = (0x80000);
int DM_PELSHEIGHT = (0x100000);
int DM_DISPLAYFLAGS = (0x200000);
int DM_DISPLAYFREQUENCY = (0x400000);
int CDS_UPDATEREGISTRY = (1);
int CDS_TEST = (2);
int DISP_CHANGE_SUCCESSFUL = (0);
int DISP_CHANGE_RESTART = (1);
int DISP_CHANGE_BADFLAGS = -((4));
int DISP_CHANGE_FAILED = -((1));
int DISP_CHANGE_BADMODE = -((2));
int DISP_CHANGE_NOTUPDATED = -((3));
int SERVICE_NO_CHANGE = -((1));
int SERVICE_WIN32_OWN_PROCESS = (16);
int SERVICE_WIN32_SHARE_PROCESS = (32);
int SERVICE_KERNEL_DRIVER = (1);
int SERVICE_FILE_SYSTEM_DRIVER = (2);
int SERVICE_INTERACTIVE_PROCESS = (256);
int SERVICE_BOOT_START = (0);
int SERVICE_SYSTEM_START = (1);
int SERVICE_AUTO_START = (2);
int SERVICE_DEMAND_START = (3);
int SERVICE_DISABLED = (4);
int SERVICE_STOPPED = (1);
int SERVICE_START_PENDING = (2);
int SERVICE_STOP_PENDING = (3);
int SERVICE_RUNNING = (4);
int SERVICE_CONTINUE_PENDING = (5);
int SERVICE_PAUSE_PENDING = (6);
int SERVICE_PAUSED = (7);
int SERVICE_ACCEPT_STOP = (1);
int SERVICE_ACCEPT_PAUSE_CONTINUE = (2);
int SERVICE_ACCEPT_SHUTDOWN = (4);
int BST_CHECKED = (1);
int BST_INDETERMINATE = (2);
int BST_UNCHECKED = (0);
int BST_FOCUS = (8);
int BST_PUSHED = (4);
int MF_BYCOMMAND = (0);
int MF_BYPOSITION = (0x400);
int MF_CHECKED = (0x8);
int MF_UNCHECKED = (0);
int MF_HILITE = (0x80);
int MF_UNHILITE = (0);
int CWP_ALL = (0);
int CWP_SKIPINVISIBLE = (1);
int CWP_SKIPDISABLED = (2);
int CWP_SKIPTRANSPARENT = (4);
int CE_BREAK = (16);
int CE_DNS = (2048);
int CE_FRAME = (8);
int CE_IOE = (1024);
int CE_MODE = (32768);
int CE_OOP = (4096);
int CE_OVERRUN = (2);
int CE_PTO = (512);
int CE_RXOVER = (1);
int CE_RXPARITY = (4);
int CE_TXFULL = (256);
int RGN_AND = (1);
int RGN_COPY = (5);
int RGN_DIFF = (4);
int RGN_OR = (2);
int RGN_XOR = (3);
int NULLREGION = (1);
int SIMPLEREGION = (2);
int COMPLEXREGION = (3);
int ERROR = (0);
int CDERR_DIALOGFAILURE = (0xffff);
int CDERR_FINDRESFAILURE = (6);
int CDERR_INITIALIZATION = (2);
int CDERR_LOADRESFAILURE = (7);
int CDERR_LOADSTRFAILURE = (5);
int CDERR_LOCKRESFAILURE = (8);
int CDERR_MEMALLOCFAILURE = (9);
int CDERR_MEMLOCKFAILURE = (10);
int CDERR_NOHINSTANCE = (4);
int CDERR_NOHOOK = (11);
int CDERR_NOTEMPLATE = (3);
int CDERR_REGISTERMSGFAIL = (12);
int CDERR_STRUCTSIZE = (1);
int PDERR_CREATEICFAILURE = (0x1000)+(10);
int PDERR_DEFAULTDIFFERENT = (0x1000)+(12);
int PDERR_DNDMMISMATCH = (0x1000)+(9);
int PDERR_GETDEVMODEFAIL = (0x1000)+(5);
int PDERR_INITFAILURE = (0x1000)+(6);
int PDERR_LOADDRVFAILURE = (0x1000)+(4);
int PDERR_NODEFAULTPRN = (0x1000)+(8);
int PDERR_NODEVICES = (0x1000)+(7);
int PDERR_PARSEFAILURE = (0x1000)+(2);
int PDERR_PRINTERNOTFOUND = (0x1000)+(11);
int PDERR_RETDEFFAILURE = (0x1000)+(3);
int PDERR_SETUPFAILURE = (0x1000)+(1);
int CFERR_MAXLESSTHANMIN = (0x2000)+(2);
int CFERR_NOFONTS = (0x2000)+(1);
int FNERR_BUFFERTOOSMALL = (0x3000)+(3);
int FNERR_INVALIDFILENAME = (0x3000)+(2);
int FNERR_SUBCLASSFAILURE = (0x3000)+(1);
int FRERR_BUFFERLENGTHZERO = (0x4000)+(1);
int LOCALE_SYSTEM_DEFAULT = (0x800);
int LOCALE_USER_DEFAULT = (0x400);
int NORM_IGNORECASE = (1);
int NORM_IGNOREKANATYPE = (65536);
int NORM_IGNORENONSPACE = (2);
int NORM_IGNORESYMBOLS = (4);
int NORM_IGNOREWIDTH = (131072);
int SORT_STRINGSORT = (4096);
int LCMAP_BYTEREV = (2048);
int LCMAP_FULLWIDTH = (8388608);
int LCMAP_HALFWIDTH = (4194304);
int LCMAP_HIRAGANA = (1048576);
int LCMAP_KATAKANA = (2097152);
int LCMAP_LOWERCASE = (256);
int LCMAP_SORTKEY = (1024);
int LCMAP_UPPERCASE = (512);
int DBG_CONTINUE = (0x10002);
int DBG_CONTROL_BREAK = (0x40010008);
int DBG_CONTROL_C = (0x40010005);
int DBG_EXCEPTION_NOT_HANDLED = (0x80010001);
int DBG_TERMINATE_THREAD = (0x40010003);
int DBG_TERMINATE_PROCESS = (0x40010004);
int SERVICE_CONTROL_STOP = (1);
int SERVICE_CONTROL_PAUSE = (2);
int SERVICE_CONTROL_CONTINUE = (3);
int SERVICE_CONTROL_INTERROGATE = (4);
int SERVICE_CONTROL_SHUTDOWN = (5);
int IMAGE_BITMAP = (0);
int IMAGE_CURSOR = (2);
int IMAGE_ENHMETAFILE = (1);
int IMAGE_ICON = (1);
int LR_COPYDELETEORG = (8);
int LR_COPYRETURNORG = (4);
int LR_MONOCHROME = (1);
int LR_CREATEDIBSECTION = (8192);
int LR_DEFAULTSIZE = (64);
int DF_ALLOWOTHERACCOUNTHOOK = (0x1);
int DESKTOP_CREATEMENU = (0x4);
int DESKTOP_CREATEWINDOW = (0x2);
int DESKTOP_ENUMERATE = (0x40);
int DESKTOP_HOOKCONTROL = (0x8);
int DESKTOP_JOURNALPLAYBACK = (0x20);
int DESKTOP_JOURNALRECORD = (0x10);
int DESKTOP_READOBJECTS = (0x1);
int DESKTOP_SWITCHDESKTOP = (0x100);
int DESKTOP_WRITEOBJECTS = (0x80);
int WSF_VISIBLE = (0x1);
int CBM_INIT = (0x4);
int DIB_PAL_COLORS = (1);
int DIB_RGB_COLORS = (0);
int GENERIC_READ = (0x80000000);
int GENERIC_WRITE = (0x40000000);
int FILE_READ_DATA = (0x0001);
int FILE_LIST_DIRECTORY = (0x0001);
int FILE_WRITE_DATA = (0x0002);
int FILE_ADD_FILE = (0x0002);
int FILE_APPEND_DATA = (0x0004);
int FILE_ADD_SUBDIRECTORY = (0x0004);
int FILE_CREATE_PIPE_INSTANCE = (0x0004);
int FILE_READ_EA = (0x0008);
int FILE_READ_PROPERTIES = (FILE_READ_EA);
int FILE_WRITE_EA = (0x0010);
int FILE_WRITE_PROPERTIES = (FILE_WRITE_EA);
int FILE_EXECUTE = (0x0020);
int FILE_TRAVERSE = (0x0020);
int FILE_DELETE_CHILD = (0x0040);
int FILE_READ_ATTRIBUTES = (0x0080);
int FILE_WRITE_ATTRIBUTES = (0x0100);
int FILE_SHARE_DELETE = (4);
int FILE_SHARE_READ = (1);
int FILE_SHARE_WRITE = (2);
int CONSOLE_TEXTMODE_BUFFER = (1);
int CREATE_NEW = (1);
int CREATE_ALWAYS = (2);
int OPEN_EXISTING = (3);
int OPEN_ALWAYS = (4);
int TRUNCATE_EXISTING = (5);
int FILE_ATTRIBUTE_ARCHIVE = (32);
int FILE_ATTRIBUTE_COMPRESSED = (2048);
int FILE_ATTRIBUTE_NORMAL = (128);
int FILE_ATTRIBUTE_DIRECTORY = (16);
int FILE_ATTRIBUTE_HIDDEN = (2);
int FILE_ATTRIBUTE_READONLY = (1);
int FILE_ATTRIBUTE_SYSTEM = (4);
int FILE_ATTRIBUTE_TEMPORARY = (256);
long FILE_FLAG_WRITE_THROUGH = (2147483648);
int FILE_FLAG_OVERLAPPED = (1073741824);
int FILE_FLAG_NO_BUFFERING = (536870912);
int FILE_FLAG_RANDOM_ACCESS = (268435456);
int FILE_FLAG_SEQUENTIAL_SCAN = (134217728);
int FILE_FLAG_DELETE_ON_CLOSE = (67108864);
int FILE_FLAG_BACKUP_SEMANTICS = (33554432);
int FILE_FLAG_POSIX_SEMANTICS = (16777216);
int SECURITY_ANONYMOUS = (0);
int SECURITY_IDENTIFICATION = (65536);
int SECURITY_IMPERSONATION = (131072);
int SECURITY_DELEGATION = (196608);
int SECURITY___FILE___TRACKING = (262144);
int SECURITY_EFFECTIVE_ONLY = (524288);
int SECURITY_SQOS_PRESENT = (1048576);
int SEC_COMMIT = (134217728);
int SEC_IMAGE = (16777216);
int SEC_NOCACHE = (268435456);
int SEC_RESERVE = (67108864);
int PAGE_READONLY = (2);
int PAGE_READWRITE = (4);
int PAGE_WRITECOPY = (8);
int PAGE_EXECUTE = (16);
int PAGE_EXECUTE_READ = (32);
int PAGE_EXECUTE_READWRITE = (64);
int PAGE_EXECUTE_WRITECOPY = (128);
int PAGE_GUARD = (256);
int PAGE_NOACCESS = (1);
int PAGE_NOCACHE = (512);
int MEM_COMMIT = (4096);
int MEM_FREE = (65536);
int MEM_RESERVE = (8192);
int MEM_IMAGE = (16777216);
int MEM_MAPPED = (262144);
int MEM_PRIVATE = (131072);
int MEM_DECOMMIT = (16384);
int MEM_RELEASE = (32768);
int MEM_TOP_DOWN = (1048576);
int EXCEPTION_GUARD_PAGE = (0x80000001);
int SECTION_EXTEND_SIZE = (0x10);
int SECTION_MAP_READ = (0x4);
int SECTION_MAP_WRITE = (0x2);
int SECTION_QUERY = (0x1);
int SECTION_ALL_ACCESS = (0xf001f);
int FW_DONTCARE = (0);
int FW_THIN = (100);
int FW_EXTRALIGHT = (200);
int FW_LIGHT = (300);
int FW_NORMAL = (400);
int FW_REGULAR = (FW_NORMAL);
int FW_MEDIUM = (500);
int FW_SEMIBOLD = (600);
int FW_BOLD = (700);
int FW_EXTRABOLD = (800);
int FW_HEAVY = (900);
int ANSI_CHARSET = (0);
int DEFAULT_CHARSET = (1);
int SYMBOL_CHARSET = (2);
int SHIFTJIS_CHARSET = (128);
int HANGEUL_CHARSET = (129);
int GB2312_CHARSET = (134);
int CHINESEBIG5_CHARSET = (136);
int GREEK_CHARSET = (161);
int TURKISH_CHARSET = (162);
int HEBREW_CHARSET = (177);
int ARABIC_CHARSET = (178);
int BALTIC_CHARSET = (186);
int RUSSIAN_CHARSET = (204);
int THAI_CHARSET = (222);
int EASTEUROPE_CHARSET = (238);
int OEM_CHARSET = (255);
int OUT_DEFAULT_PRECIS = (0);
int OUT_STRING_PRECIS = (1);
int OUT_CHARACTER_PRECIS = (2);
int OUT_STROKE_PRECIS = (3);
int OUT_TT_PRECIS = (4);
int OUT_DEVICE_PRECIS = (5);
int OUT_RASTER_PRECIS = (6);
int OUT_TT_ONLY_PRECIS = (7);
int OUT_OUTLINE_PRECIS = (8);
int CLIP_DEFAULT_PRECIS = (0);
int CLIP_CHARACTER_PRECIS = (1);
int CLIP_STROKE_PRECIS = (2);
int CLIP_MASK = (15);
int CLIP_LH_ANGLES = (16);
int CLIP_TT_ALWAYS = (32);
int CLIP_EMBEDDED = (128);
int DEFAULT_QUALITY = (0);
int DRAFT_QUALITY = (1);
int PROOF_QUALITY = (2);
int DEFAULT_PITCH = (0);
int FIXED_PITCH = (1);
int VARIABLE_PITCH = (2);
int FF_DECORATIVE = (80);
int FF_DONTCARE = (0);
int FF_MODERN = (48);
int FF_ROMAN = (16);
int FF_SCRIPT = (64);
int FF_SWISS = (32);
int HS_BDIAGONAL = (3);
int HS_CROSS = (4);
int HS_DIAGCROSS = (5);
int HS_FDIAGONAL = (2);
int HS_HORIZONTAL = (0);
int HS_VERTICAL = (1);
int LR_DEFAULTCOLOR = (0);
int LR_LOADREALSIZE = (128);
int MAILSLOT_WAIT_FOREVER = (0xffffffff);
int MAILSLOT_NO_MESSAGE = (0xffffffff);
int CMB_MASKED = (2);
int PIPE_ACCESS_DUPLEX = (3);
int PIPE_ACCESS_INBOUND = (1);
int PIPE_ACCESS_OUTBOUND = (2);
int WRITE_DAC = (0x40000);
int WRITE_OWNER = (0x80000);
int ACCESS_SYSTEM_SECURITY = (0x1000000);
int PIPE_TYPE_BYTE = (0);
int PIPE_TYPE_MESSAGE = (4);
int PIPE_READMODE_BYTE = (0);
int PIPE_READMODE_MESSAGE = (2);
int PIPE_WAIT = (0);
int PIPE_NOWAIT = (1);
int PS_GEOMETRIC = (65536);
int PS_COSMETIC = (0);
int PS_ALTERNATE = (8);
int PS_SOLID = (0);
int PS_DASH = (1);
int PS_DOT = (2);
int PS_DASHDOT = (3);
int PS_DASHDOTDOT = (4);
int PS_NULL = (5);
int PS_USERSTYLE = (7);
int PS_INSIDEFRAME = (6);
int PS_ENDCAP_ROUND = (0);
int PS_ENDCAP_SQUARE = (256);
int PS_ENDCAP_FLAT = (512);
int PS_JOIN_BEVEL = (4096);
int PS_JOIN_MITER = (8192);
int PS_JOIN_ROUND = (0);
int PS_STYLE_MASK = (15);
int PS_ENDCAP_MASK = (3840);
int PS_TYPE_MASK = (983040);
int ALTERNATE = (1);
int WINDING = (2);
int CREATE_DEFAULT_ERROR_MODE = (67108864);
int CREATE_NEW_CONSOLE = (16);
int CREATE_NEW_PROCESS_GROUP = (512);
int CREATE_SEPARATE_WOW_VDM = (2048);
int CREATE_SUSPENDED = (4);
int CREATE_UNICODE_ENVIRONMENT = (1024);
int DEBUG_PROCESS = (1);
int DEBUG_ONLY_THIS_PROCESS = (2);
int DETACHED_PROCESS = (8);
int HIGH_PRIORITY_CLASS = (128);
int IDLE_PRIORITY_CLASS = (64);
int NORMAL_PRIORITY_CLASS = (32);
int REALTIME_PRIORITY_CLASS = (256);
int SERVICE_ALL_ACCESS = (0xf01ff);
int SERVICE_CHANGE_CONFIG = (2);
int SERVICE_ENUMERATE_DEPENDENTS = (8);
int SERVICE_INTERROGATE = (128);
int SERVICE_PAUSE_CONTINUE = (64);
int SERVICE_QUERY_CONFIG = (1);
int SERVICE_QUERY_STATUS = (4);
int SERVICE_START = (16);
int SERVICE_STOP = (32);
int SERVICE_USER_DEFINED_CONTROL = (256);
int SERVICE_DELETE = (0x10000);
int SERVICE_READ_CONTROL = (0x20000);
int SERVICE_GENERIC_EXECUTE = (0x20000000);
int SERVICE_ERROR_IGNORE = (0);
int SERVICE_ERROR_NORMAL = (1);
int SERVICE_ERROR_SEVERE = (2);
int SERVICE_ERROR_CRITICAL = (3);
int TAPE_FIXED_PARTITIONS = (0);
int TAPE_INITIATOR_PARTITIONS = (0x2);
int TAPE_SELECT_PARTITIONS = (0x1);
int TAPE_FILEMARKS = (0x1);
int TAPE_LONG_FILEMARKS = (0x3);
int TAPE_SETMARKS = (0);
int TAPE_SHORT_FILEMARKS = (0x2);
int CW_USEDEFAULT = (0x80000000);
int WS_BORDER = (0x800000);
int WS_CAPTION = (0xc00000);
int WS_CHILD = (0x40000000);
int WS_CHILDWINDOW = (0x40000000);
int WS_CLIPCHILDREN = (0x2000000);
int WS_CLIPSIBLINGS = (0x4000000);
int WS_DISABLED = (0x8000000);
int WS_DLGFRAME = (0x400000);
int WS_GROUP = (0x20000);
int WS_HSCROLL = (0x100000);
int WS_ICONIC = (0x20000000);
int WS_MAXIMIZE = (0x1000000);
int WS_MAXIMIZEBOX = (0x10000);
int WS_MINIMIZE = (0x20000000);
int WS_MINIMIZEBOX = (0x20000);
int WS_OVERLAPPED = (0);
int WS_OVERLAPPEDWINDOW = (0xcf0000);
int WS_POPUP = (0x80000000);
int WS_POPUPWINDOW = (0x80880000);
int WS_SIZEBOX = (0x40000);
int WS_SYSMENU = (0x80000);
int WS_TABSTOP = (0x10000);
int WS_THICKFRAME = (0x40000);
int WS_TILED = (0);
int WS_TILEDWINDOW = (0xcf0000);
int WS_VISIBLE = (0x10000000);
int WS_VSCROLL = (0x200000);
int MDIS_ALLCHILDSTYLES = (0x1);
int BS_3STATE = (0x5);
int BS_AUTO3STATE = (0x6);
int BS_AUTOCHECKBOX = (0x3);
int BS_AUTORADIOBUTTON = (0x9);
int BS_BITMAP = (0x80);
int BS_BOTTOM = (0x800);
int BS_CENTER = (0x300);
int BS_CHECKBOX = (0x2);
int BS_DEFPUSHBUTTON = (0x1);
int BS_GROUPBOX = (0x7);
int BS_ICON = (0x40);
int BS_LEFT = (0x100);
int BS_LEFTTEXT = (0x20);
int BS_MULTILINE = (0x2000);
int BS_NOTIFY = (0x4000);
int BS_OWNERDRAW = (0xb);
int BS_PUSHBUTTON = (0);
int BS_PUSHLIKE = (0x1000);
int BS_RADIOBUTTON = (0x4);
int BS_RIGHT = (0x200);
int BS_RIGHTBUTTON = (0x20);
int BS_TEXT = (0);
int BS_TOP = (0x400);
int BS_USERBUTTON = (0x8);
int BS_VCENTER = (0xc00);
int CBS_AUTOHSCROLL = (0x40);
int CBS_DISABLENOSCROLL = (0x800);
int CBS_DROPDOWN = (0x2);
int CBS_DROPDOWNLIST = (0x3);
int CBS_HASSTRINGS = (0x200);
int CBS_LOWERCASE = (0x4000);
int CBS_NOINTEGRALHEIGHT = (0x400);
int CBS_OEMCONVERT = (0x80);
int CBS_OWNERDRAWFIXED = (0x10);
int CBS_OWNERDRAWVARIABLE = (0x20);
int CBS_SIMPLE = (0x1);
int CBS_SORT = (0x100);
int CBS_UPPERCASE = (0x2000);
int ES_AUTOHSCROLL = (0x80);
int ES_AUTOVSCROLL = (0x40);
int ES_CENTER = (0x1);
int ES_LEFT = (0);
int ES_LOWERCASE = (0x10);
int ES_MULTILINE = (0x4);
int ES_NOHIDESEL = (0x100);
int ES_NUMBER = (0x2000);
int ES_OEMCONVERT = (0x400);
int ES_PASSWORD = (0x20);
int ES_READONLY = (0x800);
int ES_RIGHT = (0x2);
int ES_UPPERCASE = (0x8);
int ES_WANTRETURN = (0x1000);
int LBS_DISABLENOSCROLL = (0x1000);
int LBS_EXTENDEDSEL = (0x800);
int LBS_HASSTRINGS = (0x40);
int LBS_MULTICOLUMN = (0x200);
int LBS_MULTIPLESEL = (0x8);
int LBS_NODATA = (0x2000);
int LBS_NOINTEGRALHEIGHT = (0x100);
int LBS_NOREDRAW = (0x4);
int LBS_NOSEL = (0x4000);
int LBS_NOTIFY = (0x1);
int LBS_OWNERDRAWFIXED = (0x10);
int LBS_OWNERDRAWVARIABLE = (0x20);
int LBS_SORT = (0x2);
int LBS_STANDARD = (0xa00003);
int LBS_USETABSTOPS = (0x80);
int LBS_WANTKEYBOARDINPUT = (0x400);
int SBS_BOTTOMALIGN = (0x4);
int SBS_HORZ = (0);
int SBS_LEFTALIGN = (0x2);
int SBS_RIGHTALIGN = (0x4);
int SBS_SIZEBOX = (0x8);
int SBS_SIZEBOXBOTTOMRIGHTALIGN = (0x4);
int SBS_SIZEBOXTOPLEFTALIGN = (0x2);
int SBS_SIZEGRIP = (0x10);
int SBS_TOPALIGN = (0x2);
int SBS_VERT = (0x1);
int SS_BITMAP = (0xe);
int SS_BLACKFRAME = (0x7);
int SS_BLACKRECT = (0x4);
int SS_CENTER = (0x1);
int SS_CENTERIMAGE = (0x200);
int SS_ENHMETAFILE = (0xf);
int SS_ETCHEDFRAME = (0x12);
int SS_ETCHEDHORZ = (0x10);
int SS_ETCHEDVERT = (0x11);
int SS_GRAYFRAME = (0x8);
int SS_GRAYRECT = (0x5);
int SS_ICON = (0x3);
int SS_LEFT = (0);
int SS_LEFTNOWORDWRAP = (0xc);
int SS_NOPREFIX = (0x80);
int SS_NOTIFY = (0x100);
int SS_OWNERDRAW = (0xd);
int SS_REALSIZEIMAGE = (0x800);
int SS_RIGHT = (0x2);
int SS_RIGHTJUST = (0x400);
int SS_SIMPLE = (0xb);
int SS_SUNKEN = (0x1000);
int SS_USERITEM = (0xa);
int SS_WHITEFRAME = (0x9);
int SS_WHITERECT = (0x6);
int DS_3DLOOK = (0x4);
int DS_ABSALIGN = (0x1);
int DS_CENTER = (0x800);
int DS_CENTERMOUSE = (0x1000);
int DS___FILE__HELP = (0x2000);
int DS_CONTROL = (0x400);
int DS_FIXEDSYS = (0x8);
int DS_LOCALEDIT = (0x20);
int DS_MODALFRAME = (0x80);
int DS_NOFAILCREATE = (0x10);
int DS_NOIDLEMSG = (0x100);
int DS_SETFONT = (0x40);
int DS_SETFOREGROUND = (0x200);
int DS_SYSMODAL = (0x2);
int WS_EX_ACCEPTFILES = (0x10);
int WS_EX_APPWINDOW = (0x40000);
int WS_EX_CLIENTEDGE = (0x200);
int WS_EX___FILE__HELP = (0x400);
int WS_EX_CONTROLPARENT = (0x10000);
int WS_EX_DLGMODALFRAME = (0x1);
int WS_EX_LEFT = (0);
int WS_EX_LEFTSCROLLBAR = (0x4000);
int WS_EX_LTRREADING = (0);
int WS_EX_MDICHILD = (0x40);
int WS_EX_NOPARENTNOTIFY = (0x4);
int WS_EX_OVERLAPPEDWINDOW = (0x300);
int WS_EX_PALETTEWINDOW = (0x188);
int WS_EX_RIGHT = (0x1000);
int WS_EX_RIGHTSCROLLBAR = (0);
int WS_EX_RTLREADING = (0x2000);
int WS_EX_STATICEDGE = (0x20000);
int WS_EX_TOOLWINDOW = (0x80);
int WS_EX_TOPMOST = (0x8);
int WS_EX_TRANSPARENT = (0x20);
int WS_EX_WINDOWEDGE = (0x100);
int WINSTA_ACCESSCLIPBOARD = (0x4);
int WINSTA_ACCESSGLOBALATOMS = (0x20);
int WINSTA_CREATEDESKTOP = (0x8);
int WINSTA_ENUMDESKTOPS = (0x1);
int WINSTA_ENUMERATE = (0x100);
int WINSTA_EXITWINDOWS = (0x40);
int WINSTA_READATTRIBUTES = (0x2);
int WINSTA_READSCREEN = (0x200);
int WINSTA_WRITEATTRIBUTES = (0x10);
int WH_CALLWNDPROC = (4);
int WH_CALLWNDPROCRET = (12);
int WH_CBT = (5);
int WH_DEBUG = (9);
int WH_GETMESSAGE = (3);
int WH_JOURNALPLAYBACK = (1);
int WH_JOURNALRECORD = (0);
int WH_KEYBOARD = (2);
int WH_MOUSE = (7);
int WH_MSGFILTER = -((1));
int WH_SHELL = (10);
int WH_SYSMSGFILTER = (6);
int WH_FOREGROUNDIDLE = (11);
int DDD_RAW_TARGET_PATH = (1);
int DDD_REMOVE_DEFINITION = (2);
int DDD_EXACT_MATCH_ON_REMOVE = (4);
int DC_BINNAMES = (12);
int DC_BINS = (6);
int DC_COPIES = (18);
int DC_DRIVER = (11);
int DC_DATATYPE_PRODUCED = (21);
int DC_DUPLEX = (7);
int DC_EMF_COMPLIANT = (20);
int DC_ENUMRESOLUTIONS = (13);
int DC_EXTRA = (9);
int DC_FIELDS = (1);
int DC_FILEDEPENDENCIES = (14);
int DC_MAXEXTENT = (5);
int DC_MINEXTENT = (4);
int DC_ORIENTATION = (17);
int DC_PAPERNAMES = (16);
int DC_PAPERS = (2);
int DC_PAPERSIZE = (3);
int DC_SIZE = (8);
int DC_TRUETYPE = (15);
int DCTT_BITMAP = (0x1);
int DCTT_DOWNLOAD = (0x2);
int DCTT_SUBDEV = (0x4);
int DC_VERSION = (10);
int DC_BINADJUST = (19);
int DDL_ARCHIVE = (32);
int DDL_DIRECTORY = (16);
int DDL_DRIVES = (16384);
int DDL_EXCLUSIVE = (32768);
int DDL_HIDDEN = (2);
int DDL_READONLY = (1);
int DDL_READWRITE = (0);
int DDL_SYSTEM = (4);
int DDL_POSTMSGS = (8192);
int DLL_PROCESS_ATTACH = (1);
int DLL_THREAD_ATTACH = (2);
int DLL_PROCESS_DETACH = (0);
int DLL_THREAD_DETACH = (3);
int DM_IN_BUFFER = (8);
int DM_MODIFY = (8);
int DM_IN_PROMPT = (4);
int DM_PROMPT = (4);
int DM_OUT_BUFFER = (2);
int DM_COPY = (2);
int DM_UPDATE = (1);
int IDANI_OPEN = (1);
int IDANI_CLOSE = (2);
int DC_ACTIVE = (1);
int DC_SMALLCAP = (2);
int BDR_RAISEDINNER = (4);
int BDR_SUNKENINNER = (8);
int BDR_RAISEDOUTER = (1);
int BDR_SUNKENOUTER = (1);
int EDGE_BUMP = (9);
int EDGE_ETCHED = (6);
int EDGE_RAISED = (5);
int EDGE_SUNKEN = (10);
int BF_ADJUST = (8192);
int BF_BOTTOM = (8);
int BF_BOTTOMLEFT = (9);
int BF_BOTTOMRIGHT = (12);
int BF_DIAGONAL = (16);
int BF_DIAGONAL_ENDBOTTOMLEFT = (25);
int BF_DIAGONAL_ENDBOTTOMRIGHT = (28);
int BF_DIAGONAL_ENDTOPLEFT = (19);
int BF_DIAGONAL_ENDTOPRIGHT = (22);
int BF_FLAT = (16384);
int BF_LEFT = (1);
int BF_MIDDLE = (2048);
int BF_MONO = (32768);
int BF_RECT = (15);
int BF_RIGHT = (4);
int BF_SOFT = (4096);
int BF_TOP = (2);
int BF_TOPLEFT = (3);
int BF_TOPRIGHT = (6);
int DFC_BUTTON = (4);
int DFC_CAPTION = (1);
int DFC_MENU = (2);
int DFC_SCROLL = (3);
int DFCS_BUTTON3STATE = (8);
int DFCS_BUTTONCHECK = (0);
int DFCS_BUTTONPUSH = (16);
int DFCS_BUTTONRADIO = (4);
int DFCS_BUTTONRADIOIMAGE = (1);
int DFCS_BUTTONRADIOMASK = (2);
int DFCS_CAPTIONCLOSE = (0);
int DFCS_CAPTIONHELP = (4);
int DFCS_CAPTIONMAX = (2);
int DFCS_CAPTIONMIN = (1);
int DFCS_CAPTIONRESTORE = (3);
int DFCS_MENUARROW = (0);
int DFCS_MENUBULLET = (2);
int DFCS_MENUCHECK = (1);
int DFCS_SCROLLCOMBOBOX = (5);
int DFCS_SCROLLDOWN = (1);
int DFCS_SCROLLLEFT = (2);
int DFCS_SCROLLRIGHT = (3);
int DFCS_SCROLLSIZEGRIP = (8);
int DFCS_SCROLLUP = (0);
int DFCS_ADJUSTRECT = (8192);
int DFCS_CHECKED = (1024);
int DFCS_FLAT = (16384);
int DFCS_INACTIVE = (256);
int DFCS_MONO = (32768);
int DFCS_PUSHED = (512);
int DI_COMPAT = (4);
int DI_DEFAULTSIZE = (8);
int DI_IMAGE = (2);
int DI_MASK = (1);
int DI_NORMAL = (3);
int DST_BITMAP = (4);
int DST_COMPLEX = (0);
int DST_ICON = (3);
int DST_PREFIXTEXT = (2);
int DST_TEXT = (1);
int DSS_NORMAL = (0);
int DSS_UNION = (16);
int DSS_DISABLED = (32);
int DSS_MONO = (128);
int SBT_NOBORDERS = (256);
int SBT_OWNERDRAW = (4096);
int SBT_POPOUT = (512);
int SBT_RTLREADING = (1024);
int DT_BOTTOM = (8);
int DT_CALCRECT = (1024);
int DT_CENTER = (1);
int DT_EDITCONTROL = (8192);
int DT_END_ELLIPSIS = (32768);
int DT_PATH_ELLIPSIS = (16384);
int DT_EXPANDTABS = (64);
int DT_EXTERNALLEADING = (512);
int DT_LEFT = (0);
int DT_MODIFYSTRING = (65536);
int DT_NOCLIP = (256);
int DT_NOPREFIX = (2048);
int DT_RIGHT = (2);
int DT_RTLREADING = (131072);
int DT_SINGLELINE = (32);
int DT_TABSTOP = (128);
int DT_TOP = (0);
int DT_VCENTER = (4);
int DT_WORDBREAK = (16);
int DT_INTERNAL = (4096);
int DUPLICATE_CLOSE_SOURCE = (1);
int DUPLICATE_SAME_ACCESS = (2);
int FILE_MAP_ALL_ACCESS = (0xf001f);
int FILE_MAP_READ = (4);
int FILE_MAP_WRITE = (2);
int FILE_MAP_COPY = (1);
int MUTEX_ALL_ACCESS = (0x1f0001);
int MUTEX_MODIFY_STATE = (1);
int SYNCHRONIZE = (0x100000);
int SEMAPHORE_ALL_ACCESS = (0x1f0003);
int SEMAPHORE_MODIFY_STATE = (2);
int EVENT_ALL_ACCESS = (0x1f0003);
int EVENT_MODIFY_STATE = (2);
int KEY_ALL_ACCESS = (0xf003f);
int KEY_CREATE_LINK = (32);
int KEY_CREATE_SUB_KEY = (4);
int KEY_ENUMERATE_SUB_KEYS = (8);
int KEY_EXECUTE = (0x20019);
int KEY_NOTIFY = (16);
int KEY_QUERY_VALUE = (1);
int KEY_READ = (0x20019);
int KEY_SET_VALUE = (2);
int KEY_WRITE = (0x20006);
int PROCESS_ALL_ACCESS = (0x1f0fff);
int PROCESS_CREATE_PROCESS = (128);
int PROCESS_CREATE_THREAD = (2);
int PROCESS_DUP_HANDLE = (64);
int PROCESS_QUERY_INFORMATION = (1024);
int PROCESS_SET_INFORMATION = (512);
int PROCESS_TERMINATE = (1);
int PROCESS_VM_OPERATION = (8);
int PROCESS_VM_READ = (16);
int PROCESS_VM_WRITE = (32);
int THREAD_ALL_ACCESS = (0x1f03ff);
int THREAD_DIRECT_IMPERSONATION = (512);
int THREAD_GET___FILE__ = (8);
int THREAD_IMPERSONATE = (256);
int THREAD_QUERY_INFORMATION = (64);
int THREAD_SET___FILE__ = (16);
int THREAD_SET_INFORMATION = (32);
int THREAD_SET_THREAD_TOKEN = (128);
int THREAD_SUSPEND_RESUME = (2);
int THREAD_TERMINATE = (1);
int WB_ISDELIMITER = (2);
int WB_LEFT = (0);
int WB_RIGHT = (1);
int SB_BOTH = (3);
int SB_CTL = (2);
int SB_HORZ = (0);
int SB_VERT = (1);
int ESB_DISABLE_BOTH = (3);
int ESB_DISABLE_DOWN = (2);
int ESB_DISABLE_LEFT = (1);
int ESB_DISABLE_LTUP = (1);
int ESB_DISABLE_RIGHT = (2);
int ESB_DISABLE_RTDN = (2);
int ESB_DISABLE_UP = (1);
int ESB_ENABLE_BOTH = (0);
int SB_LINEUP = (0);
int SB_LINEDOWN = (1);
int SB_LINELEFT = (0);
int SB_LINERIGHT = (1);
int SB_PAGEUP = (2);
int SB_PAGEDOWN = (3);
int SB_PAGELEFT = (2);
int SB_PAGERIGHT = (3);
int SB_THUMBPOSITION = (4);
int SB_THUMBTRACK = (5);
int SB_ENDSCROLL = (8);
int SB_LEFT = (6);
int SB_RIGHT = (7);
int SB_BOTTOM = (7);
int SB_TOP = (6);
int ENUM_ALL_CALENDARS = -((1));
int DATE_SHORTDATE = (1);
int DATE_LONGDATE = (2);
int SERVICE_ACTIVE = (1);
int SERVICE_INACTIVE = (2);
int DEVICE_FONTTYPE = (2);
int RASTER_FONTTYPE = (1);
int TRUETYPE_FONTTYPE = (4);
int OBJ_BRUSH = (2);
int OBJ_PEN = (1);
int OBJ_PAL = (5);
int OBJ_FONT = (6);
int OBJ_BITMAP = (7);
int OBJ_EXTPEN = (11);
int OBJ_REGION = (8);
int OBJ_DC = (3);
int OBJ_MEMDC = (10);
int OBJ_METAFILE = (9);
int OBJ_METADC = (4);
int OBJ_ENHMETAFILE = (13);
int OBJ_ENHMETADC = (12);
int SERVICE_WIN32 = (48);
int SERVICE_DRIVER = (11);
int CP_INSTALLED = (1);
int CP_SUPPORTED = (2);
int LCID_INSTALLED = (1);
int LCID_SUPPORTED = (2);
int TAPE_ERASE_LONG = (0x1);
int TAPE_ERASE_SHORT = (0);
int SP_ERROR = -((1));
int SP_OUTOFDISK = -((4));
int SP_OUTOFMEMORY = -((5));
int SP_USERABORT = -((3));
int PHYSICALWIDTH = (110);
int PHYSICALHEIGHT = (111);
int PHYSICALOFFSETX = (112);
int PHYSICALOFFSETY = (113);
int SCALINGFACTORX = (114);
int SCALINGFACTORY = (115);
int QUERYESCSUPPORT = (8);
int cABORTDOC = (2);
int cENDDOC = (11);
int GETPHYSPAGESIZE = (12);
int GETPRINTINGOFFSET = (13);
int GETSCALINGFACTOR = (14);
int NEWFRAME = (1);
int NEXTBAND = (3);
int PASSTHROUGH = (19);
int cSETABORTPROC = (9);
int cSTARTDOC = (10);
int CLRDTR = (6);
int CLRRTS = (4);
int SETDTR = (5);
int SETRTS = (3);
int SETXOFF = (1);
int SETXON = (2);
int SETBREAK = (8);
int CLRBREAK = (9);
int EWX_FORCE = (4);
int EWX_LOGOFF = (0);
int EWX_POWEROFF = (8);
int EWX_REBOOT = (2);
int EWX_SHUTDOWN = (1);
int FLOODFILLBORDER = (0);
int FLOODFILLSURFACE = (1);
int ETO_CLIPPED = (4);
int ETO_GLYPH_INDEX = (16);
int ETO_OPAQUE = (2);
int ETO_RTLREADING = (128);
int FOREGROUND_BLUE = (1);
int FOREGROUND_GREEN = (2);
int FOREGROUND_RED = (4);
int FOREGROUND_INTENSITY = (8);
int BACKGROUND_BLUE = (16);
int BACKGROUND_GREEN = (32);
int BACKGROUND_RED = (64);
int BACKGROUND_INTENSITY = (128);
int FILE_NOTIFY_CHANGE_FILE_NAME = (1);
int FILE_NOTIFY_CHANGE_DIR_NAME = (2);
int FILE_NOTIFY_CHANGE_ATTRIBUTES = (4);
int FILE_NOTIFY_CHANGE_SIZE = (8);
int FILE_NOTIFY_CHANGE_LAST_WRITE = (16);
int FILE_NOTIFY_CHANGE_SECURITY = (256);
int MAP_FOLDCZONE = (16);
int MAP_FOLDDIGITS = (128);
int MAP_PRECOMPOSED = (32);
int MAP_COMPOSITE = (64);
int HC_ACTION = (0);
int FORMAT_MESSAGE_ALLOCATE_BUFFER = (256);
int FORMAT_MESSAGE_IGNORE_INSERTS = (512);
int FORMAT_MESSAGE_FROM_STRING = (1024);
int FORMAT_MESSAGE_FROM_HMODULE = (2048);
int FORMAT_MESSAGE_FROM_SYSTEM = (4096);
int FORMAT_MESSAGE_ARGUMENT_ARRAY = (8192);
int FORMAT_MESSAGE_MAX_WIDTH_MASK = (255);
int GDICOMMENT_WINDOWS_METAFILE = -((2147483647));
int GDICOMMENT_BEGINGROUP = (2);
int GDICOMMENT_ENDGROUP = (3);
int GDICOMMENT_MULTIFORMATS = (1073741828);
int GDICOMMENT_IDENTIFIER = (1128875079);
int CTRL_C_EVENT = (0);
int CTRL_BREAK_EVENT = (1);
int CTRL_CLOSE_EVENT = (2);
int CTRL_LOGOFF_EVENT = (5);
int CTRL_SHUTDOWN_EVENT = (6);
int AD_COUNTERCLOCKWISE = (1);
int AD_CLOCKWISE = (2);
int SCS_32BIT_BINARY = (0);
int SCS_DOS_BINARY = (1);
int SCS_OS216_BINARY = (5);
int SCS_PIF_BINARY = (3);
int SCS_POSIX_BINARY = (4);
int SCS_WOW_BINARY = (2);
int DCB_DISABLE = (8);
int DCB_ENABLE = (4);
int DCB_RESET = (1);
int DCB_SET = (3);
int DCB_ACCUMULATE = (2);
int GCP_DBCS = (1);
int GCP_ERROR = (0x8000);
int GCP_CLASSIN = (0x80000);
int GCP_DIACRITIC = (256);
int GCP_DISPLAYZWG = (0x400000);
int GCP_GLYPHSHAPE = (16);
int GCP_JUSTIFY = (0x10000);
int GCP_JUSTIFYIN = (0x200000);
int GCP_KASHIDA = (1024);
int GCP_LIGATE = (32);
int GCP_MAXEXTENT = (0x100000);
int GCP_NEUTRALOVERRIDE = (0x2000000);
int GCP_NUMERICOVERRIDE = (0x1000000);
int GCP_NUMERICSLATIN = (0x4000000);
int GCP_NUMERICSLOCAL = (0x8000000);
int GCP_REORDER = (2);
int GCP_SYMSWAPOFF = (0x800000);
int GCP_USEKERNING = (8);
int FLI_GLYPHS = (0x40000);
int FLI_MASK = (0x103b);
int GCW_ATOM = -((32));
int GCL_CBCLSEXTRA = -((20));
int GCL_CBWNDEXTRA = -((18));
int GCL_HBRBACKGROUND = -((10));
int GCL_HCURSOR = -((12));
int GCL_HICON = -((14));
int GCL_HICONSM = -((34));
int GCL_HMODULE = -((16));
int GCL_MENUNAME = -((8));
int GCL_STYLE = -((26));
int GCL_WNDPROC = -((24));
int CF_BITMAP = (2);
int CF_DIB = (8);
int CF_PALETTE = (9);
int CF_ENHMETAFILE = (14);
int CF_METAFILEPICT = (3);
int CF_OEMTEXT = (7);
int CF_TEXT = (1);
int CF_UNICODETEXT = (13);
int CF_DIF = (5);
int CF_DSPBITMAP = (130);
int CF_DSPENHMETAFILE = (142);
int CF_DSPMETAFILEPICT = (131);
int CF_DSPTEXT = (129);
int CF_GDIOBJFIRST = (768);
int CF_GDIOBJLAST = (1023);
int CF_HDROP = (15);
int CF_LOCALE = (16);
int CF_OWNERDISPLAY = (128);
int CF_PENDATA = (10);
int CF_PRIVATEFIRST = (512);
int CF_PRIVATELAST = (767);
int CF_RIFF = (11);
int CF_SYLK = (4);
int CF_WAVE = (12);
int CF_TIFF = (6);
int EV_BREAK = (64);
int EV_CTS = (8);
int EV_DSR = (16);
int EV_ERR = (128);
int EV_EVENT1 = (2048);
int EV_EVENT2 = (4096);
int EV_PERR = (512);
int EV_RING = (256);
int EV_RLSD = (32);
int EV_RX80FULL = (1024);
int EV_RXCHAR = (1);
int EV_RXFLAG = (2);
int EV_TXEMPTY = (4);
int MS_CTS_ON = (0x10);
int MS_DSR_ON = (0x20);
int MS_RING_ON = (0x40);
int MS_RLSD_ON = (0x80);
int MAX_COMPUTERNAME_LENGTH = (15);
int ENABLE_LINE_INPUT = (2);
int ENABLE_ECHO_INPUT = (4);
int ENABLE_PROCESSED_INPUT = (1);
int ENABLE_WINDOW_INPUT = (8);
int ENABLE_MOUSE_INPUT = (16);
int ENABLE_PROCESSED_OUTPUT = (1);
int ENABLE_WRAP_AT_EOL_OUTPUT = (2);
int CP_ACP = (0);
int CP_MACCP = (2);
int CP_OEMCP = (1);
int DATE_USE_ALT_CALENDAR = (4);
int DCX_WINDOW = (0x1);
int DCX_CACHE = (0x2);
int DCX_PARENTCLIP = (0x20);
int DCX_CLIPSIBLINGS = (0x10);
int DCX_CLIPCHILDREN = (0x8);
int DCX_NORESETATTRS = (0x4);
int DCX_LOCKWINDOWUPDATE = (0x400);
int DCX_EXCLUDERGN = (0x40);
int DCX_INTERSECTRGN = (0x80);
int DCX_VALIDATE = (0x200000);
int DRIVERVERSION = (0);
int TECHNOLOGY = (2);
int DT_PLOTTER = (0);
int DT_RASDISPLAY = (1);
int DT_RASPRINTER = (2);
int DT_RASCAMERA = (3);
int DT_CHARSTREAM = (4);
int DT_METAFILE = (5);
int DT_DISPFILE = (6);
int HORZSIZE = (4);
int VERTSIZE = (6);
int HORZRES = (8);
int VERTRES = (10);
int LOGPIXELSX = (88);
int LOGPIXELSY = (90);
int BITSPIXEL = (12);
int PLANES = (14);
int NUMBRUSHES = (16);
int NUMPENS = (18);
int NUMFONTS = (22);
int NUMCOLORS = (24);
int ASPECTX = (40);
int ASPECTY = (42);
int ASPECTXY = (44);
int PDEVICESIZE = (26);
int CLIPCAPS = (36);
int SIZEPALETTE = (104);
int NUMRESERVED = (106);
int COLORRES = (108);
int VREFRESH = (116);
int DESKTOPHORZRES = (118);
int DESKTOPVERTRES = (117);
int BLTALIGNMENT = (119);
int RASTERCAPS = (38);
int RC_BANDING = (2);
int RC_BITBLT = (1);
int RC_BITMAP64 = (8);
int RC_DI_BITMAP = (128);
int RC_DIBTODEV = (512);
int RC_FLOODFILL = (4096);
int RC_GDI20_OUTPUT = (16);
int RC_PALETTE = (256);
int RC_SCALING = (4);
int RC_STRETCHBLT = (2048);
int RC_STRETCHDIB = (8192);
int CURVECAPS = (28);
int CC_NONE = (0);
int CC_CIRCLES = (1);
int CC_PIE = (2);
int CC_CHORD = (4);
int CC_ELLIPSES = (8);
int CC_WIDE = (16);
int CC_STYLED = (32);
int CC_WIDESTYLED = (64);
int CC_INTERIORS = (128);
int CC_ROUNDRECT = (256);
int LINECAPS = (30);
int LC_NONE = (0);
int LC_POLYLINE = (2);
int LC_MARKER = (4);
int LC_POLYMARKER = (8);
int LC_WIDE = (16);
int LC_STYLED = (32);
int LC_WIDESTYLED = (64);
int LC_INTERIORS = (128);
int POLYGONALCAPS = (32);
int PC_NONE = (0);
int PC_POLYGON = (1);
int PC_RECTANGLE = (2);
int PC_WINDPOLYGON = (4);
int PC_SCANLINE = (8);
int PC_WIDE = (16);
int PC_STYLED = (32);
int PC_WIDESTYLED = (64);
int PC_INTERIORS = (128);
int TEXTCAPS = (34);
int TC_OP_CHARACTER = (1);
int TC_OP_STROKE = (2);
int TC_CP_STROKE = (4);
int TC_CR_90 = (8);
int TC_CR_ANY = (16);
int TC_SF_X_YINDEP = (32);
int TC_SA_DOUBLE = (64);
int TC_SA_INTEGER = (128);
int TC_SA_CONTIN = (256);
int TC_EA_DOUBLE = (512);
int TC_IA_ABLE = (1024);
int TC_UA_ABLE = (2048);
int TC_SO_ABLE = (4096);
int TC_RA_ABLE = (8192);
int TC_VA_ABLE = (16384);
int TC_RESERVED = (32768);
int TC_SCROLLBLT = (65536);
int PC_PATHS = (512);
int DRIVE_REMOVABLE = (2);
int DRIVE_FIXED = (3);
int DRIVE_REMOTE = (4);
int DRIVE_CDROM = (5);
int DRIVE_RAMDISK = (6);
int DRIVE_UNKNOWN = (0);
int DRIVE_NO_ROOT_DIR = (1);
int EXCEPTION_ACCESS_VIOLATION = (0xc0000005);
int EXCEPTION_BREAKPOINT = (0x80000003);
int EXCEPTION_DATATYPE_MISALIGNMENT = (0x80000002);
int EXCEPTION_SINGLE_STEP = (0x80000004);
int EXCEPTION_ARRAY_BOUNDS_EXCEEDED = (0xc000008c);
int EXCEPTION_FLT_DENORMAL_OPERAND = (0xc000008d);
int EXCEPTION_FLT_DIVIDE_BY_ZERO = (0xc000008e);
int EXCEPTION_FLT_INEXACT_RESULT = (0xc000008f);
int EXCEPTION_FLT_INVALID_OPERATION = (0xc0000090);
int EXCEPTION_FLT_OVERFLOW = (0xc0000091);
int EXCEPTION_FLT_STACK_CHECK = (0xc0000092);
int EXCEPTION_FLT_UNDERFLOW = (0xc0000093);
int EXCEPTION_INT_DIVIDE_BY_ZERO = (0xc0000094);
int EXCEPTION_INT_OVERFLOW = (0xc0000095);
int EXCEPTION_INVALID_HANDLE = (0xc0000008);
int EXCEPTION_PRIV_INSTRUCTION = (0xc0000096);
int EXCEPTION_NONCONTINUABLE_EXCEPTION = (0xc0000025);
int EXCEPTION_NONCONTINUABLE = (0x1);
int EXCEPTION_STACK_OVERFLOW = (0xc00000fd);
int EXCEPTION_INVALID_DISPOSITION = (0xc0000026);
int FILE_TYPE_UNKNOWN = (0);
int FILE_TYPE_DISK = (1);
int FILE_TYPE_CHAR = (2);
int FILE_TYPE_PIPE = (3);
int GGO_BITMAP = (1);
int GGO_NATIVE = (2);
int GGO_METRICS = (0);
int GGO_GRAY2_BITMAP = (4);
int GGO_GRAY4_BITMAP = (5);
int GGO_GRAY8_BITMAP = (6);
int GDI_ERROR = (0xffffffff);
int GM_COMPATIBLE = (1);
int GM_ADVANCED = (2);
int HANDLE_FLAG_INHERIT = (1);
int HANDLE_FLAG_PROTECT_FROM_CLOSE = (2);
char* RT_ACCELERATOR = cast(char*) ((9));
char* RT_BITMAP = cast(char*) ((2));
char* RT_DIALOG = cast(char*) ((5));
char* RT_FONT = cast(char*) ((8));
char* RT_FONTDIR = cast(char*) ((7));
char* RT_MENU = cast(char*) ((4));
char* RT_RCDATA = cast(char*) ((10));
char* RT_STRING = cast(char*) ((6));
char* RT_MESSAGETABLE = cast(char*) ((11));
char* RT_CURSOR = cast(char*) ((1));
char* RT_GROUP_CURSOR = cast(char*) ((12));
char* RT_ICON = cast(char*) ((3));
char* RT_GROUP_ICON = cast(char*) ((13));
char* RT_VERSION = cast(char*) ((16));
char* IDC_ARROW = cast(char*) ((32512));
char* IDC_IBEAM = cast(char*) ((32513));
char* IDC_WAIT = cast(char*) ((32514));
char* IDC_CROSS = cast(char*) ((32515));
char* IDC_UPARROW = cast(char*) ((32516));
char* IDC_SIZENWSE = cast(char*) ((32642));
char* IDC_SIZENESW = cast(char*) ((32643));
char* IDC_SIZEWE = cast(char*) ((32644));
char* IDC_SIZENS = cast(char*) ((32645));
char* IDC_SIZEALL = cast(char*) ((32646));
char* IDC_NO = cast(char*) ((32648));
char* IDC_APPSTARTING = cast(char*) ((32650));
char* IDC_HELP = cast(char*) ((32651));
char* IDI_APPLICATION = cast(char*) ((32512));
char* IDI_HAND = cast(char*) ((32513));
char* IDI_QUESTION = cast(char*) ((32514));
char* IDI_EXCLAMATION = cast(char*) ((32515));
char* IDI_ASTERISK = cast(char*) ((32516));
char* IDI_WINLOGO = cast(char*) ((32517));
char* IDC_SIZE = cast(char*) ((32640));
char* IDC_ICON = cast(char*) ((32641));
int MM_ANISOTROPIC = (8);
int MM_HIENGLISH = (5);
int MM_HIMETRIC = (3);
int MM_ISOTROPIC = (7);
int MM_LOENGLISH = (4);
int MM_LOMETRIC = (2);
int MM_TEXT = (1);
int MM_TWIPS = (6);
int GMDI_GOINTOPOPUPS = (0x2);
int GMDI_USEDISABLED = (0x1);
int PM_NOREMOVE = (0);
int PM_REMOVE = (1);
int PM_NOYIELD = (2);
int PIPE_CLIENT_END = (0);
int PIPE_SERVER_END = (1);
int GW_HWNDNEXT = (2);
int GW_HWNDPREV = (3);
int GW_CHILD = (5);
int GW_HWNDFIRST = (0);
int GW_HWNDLAST = (1);
int GW_OWNER = (4);
int PT_MOVETO = (6);
int PT_LINETO = (2);
int PT_BEZIERTO = (4);
int PT_CLOSEFIGURE = (1);
int SHUTDOWN_NORETRY = (1);
int QS_ALLEVENTS = (191);
int QS_ALLINPUT = (255);
int QS_HOTKEY = (128);
int QS_INPUT = (7);
int QS_KEY = (1);
int QS_MOUSE = (6);
int QS_MOUSEBUTTON = (4);
int QS_MOUSEMOVE = (2);
int QS_PAINT = (32);
int QS_POSTMESSAGE = (8);
int QS_SENDMESSAGE = (64);
int QS_TIMER = (16);
int SIF_ALL = (23);
int SIF_PAGE = (2);
int SIF_POS = (4);
int SIF_RANGE = (1);
int SIF_DISABLENOSCROLL = (8);
int STD_INPUT_HANDLE = -(10);
int STD_OUTPUT_HANDLE = -(11);
int STD_ERROR_HANDLE = -(12);
int INVALID_HANDLE_VALUE = -(1);
int BLACK_BRUSH = (4);
int DKGRAY_BRUSH = (3);
int GRAY_BRUSH = (2);
int HOLLOW_BRUSH = (5);
int LTGRAY_BRUSH = (1);
int NULL_BRUSH = (5);
int WHITE_BRUSH = (0);
int BLACK_PEN = (7);
int NULL_PEN = (8);
int WHITE_PEN = (6);
int ANSI_FIXED_FONT = (11);
int ANSI_VAR_FONT = (12);
int DEVICE_DEFAULT_FONT = (14);
int DEFAULT_GUI_FONT = (17);
int OEM_FIXED_FONT = (10);
int SYSTEM_FONT = (13);
int SYSTEM_FIXED_FONT = (16);
int DEFAULT_PALETTE = (15);
int CT_CTYPE1 = (1);
int CT_CTYPE2 = (2);
int CT_CTYPE3 = (4);
int C1_UPPER = (1);
int C1_LOWER = (2);
int C1_DIGIT = (4);
int C1_SPACE = (8);
int C1_PUNCT = (16);
int C1_CNTRL = (32);
int C1_BLANK = (64);
int C1_XDIGIT = (128);
int C1_ALPHA = (256);
int C2_LEFTTORIGHT = (1);
int C2_RIGHTTOLEFT = (2);
int C2_EUROPENUMBER = (3);
int C2_EUROPESEPARATOR = (4);
int C2_EUROPETERMINATOR = (5);
int C2_ARABICNUMBER = (6);
int C2_COMMONSEPARATOR = (7);
int C2_BLOCKSEPARATOR = (8);
int C2_SEGMENTSEPARATOR = (9);
int C2_WHITESPACE = (10);
int C2_OTHERNEUTRAL = (11);
int C2_NOTAPPLICABLE = (0);
int C3_NONSPACING = (1);
int C3_DIACRITIC = (2);
int C3_VOWELMARK = (4);
int C3_SYMBOL = (8);
int C3_KATAKANA = (16);
int C3_HIRAGANA = (32);
int C3_HALFWIDTH = (64);
int C3_FULLWIDTH = (128);
int C3_IDEOGRAPH = (256);
int C3_KASHIDA = (512);
int C3_ALPHA = (32768);
int C3_NOTAPPLICABLE = (0);
int COLOR_3DDKSHADOW = (21);
int COLOR_3DFACE = (15);
int COLOR_3DHILIGHT = (20);
int COLOR_3DLIGHT = (22);
int COLOR_BTNHILIGHT = (20);
int COLOR_3DSHADOW = (16);
int COLOR_ACTIVEBORDER = (10);
int COLOR_ACTIVECAPTION = (2);
int COLOR_APPWORKSPACE = (12);
int COLOR_BACKGROUND = (1);
int COLOR_DESKTOP = (1);
int COLOR_BTNFACE = (15);
int COLOR_BTNHIGHLIGHT = (20);
int COLOR_BTNSHADOW = (16);
int COLOR_BTNTEXT = (18);
int COLOR_CAPTIONTEXT = (9);
int COLOR_GRAYTEXT = (17);
int COLOR_HIGHLIGHT = (13);
int COLOR_HIGHLIGHTTEXT = (14);
int COLOR_INACTIVEBORDER = (11);
int COLOR_INACTIVECAPTION = (3);
int COLOR_INACTIVECAPTIONTEXT = (19);
int COLOR_INFOBK = (24);
int COLOR_INFOTEXT = (23);
int COLOR_MENU = (4);
int COLOR_MENUTEXT = (7);
int COLOR_SCROLLBAR = (0);
int COLOR_WINDOW = (5);
int COLOR_WINDOWFRAME = (6);
int COLOR_WINDOWTEXT = (8);
int SM_CYMIN = (29);
int SM_CXMIN = (28);
int SM_ARRANGE = (56);
int SM_CLEANBOOT = (67);
int SM_CMETRICS = (76);
int SM_CMOUSEBUTTONS = (43);
int SM_CXBORDER = (5);
int SM_CYBORDER = (6);
int SM_CXCURSOR = (13);
int SM_CYCURSOR = (14);
int SM_CXDLGFRAME = (7);
int SM_CYDLGFRAME = (8);
int SM_CXDOUBLECLK = (36);
int SM_CYDOUBLECLK = (37);
int SM_CXDRAG = (68);
int SM_CYDRAG = (69);
int SM_CXEDGE = (45);
int SM_CYEDGE = (46);
int SM_CXFIXEDFRAME = (7);
int SM_CYFIXEDFRAME = (8);
int SM_CXFRAME = (32);
int SM_CYFRAME = (33);
int SM_CXFULLSCREEN = (16);
int SM_CYFULLSCREEN = (17);
int SM_CXHSCROLL = (21);
int SM_CYHSCROLL = (3);
int SM_CXHTHUMB = (10);
int SM_CXICON = (11);
int SM_CYICON = (12);
int SM_CXICONSPACING = (38);
int SM_CYICONSPACING = (39);
int SM_CXMAXIMIZED = (61);
int SM_CYMAXIMIZED = (62);
int SM_CXMAXTRACK = (59);
int SM_CYMAXTRACK = (60);
int SM_CXMENUCHECK = (71);
int SM_CYMENUCHECK = (72);
int SM_CXMENUSIZE = (54);
int SM_CYMENUSIZE = (55);
int SM_CXMINIMIZED = (57);
int SM_CYMINIMIZED = (58);
int SM_CXMINSPACING = (47);
int SM_CYMINSPACING = (48);
int SM_CXMINTRACK = (34);
int SM_CYMINTRACK = (35);
int SM_CXSCREEN = (0);
int SM_CYSCREEN = (1);
int SM_CXSIZE = (30);
int SM_CYSIZE = (31);
int SM_CXSIZEFRAME = (32);
int SM_CYSIZEFRAME = (33);
int SM_CXSMICON = (49);
int SM_CYSMICON = (50);
int SM_CXSMSIZE = (52);
int SM_CYSMSIZE = (53);
int SM_CXVSCROLL = (2);
int SM_CYVSCROLL = (20);
int SM_CYVTHUMB = (9);
int SM_CYCAPTION = (4);
int SM_CYKANJIWINDOW = (18);
int SM_CYMENU = (15);
int SM_CYSMCAPTION = (51);
int SM_DBCSENABLED = (42);
int SM_DEBUG = (22);
int SM_MENUDROPALIGNMENT = (40);
int SM_MIDEASTENABLED = (74);
int SM_MOUSEPRESENT = (19);
int SM_MOUSEWHEELPRESENT = (75);
int SM_NETWORK = (63);
int SM_PENWINDOWS = (41);
int SM_SECURE = (44);
int SM_SHOWSOUNDS = (70);
int SM_SLOWMACHINE = (73);
int SM_SWAPBUTTON = (23);
int ARW_BOTTOMLEFT = (0);
int ARW_BOTTOMRIGHT = (0x1);
int ARW_HIDE = (0x8);
int ARW_TOPLEFT = (0x2);
int ARW_TOPRIGHT = (0x3);
int ARW_DOWN = (0x4);
int ARW_LEFT = (0);
int ARW_RIGHT = (0);
int ARW_UP = (0x4);
int SYSPAL_NOSTATIC = (2);
int SYSPAL_STATIC = (1);
int SYSPAL_ERROR = (0);
int GET_TAPE_MEDIA_INFORMATION = (0);
int GET_TAPE_DRIVE_INFORMATION = (1);
int SET_TAPE_MEDIA_INFORMATION = (0);
int SET_TAPE_DRIVE_INFORMATION = (1);
int TAPE_ABSOLUTE_POSITION = (0);
int TAPE_LOGICAL_POSITION = (0x1);
int TA_BASELINE = (24);
int TA_BOTTOM = (8);
int TA_TOP = (0);
int TA_CENTER = (6);
int TA_LEFT = (0);
int TA_RIGHT = (2);
int TA_RTLREADING = (256);
int TA_NOUPDATECP = (0);
int TA_UPDATECP = (1);
int VTA_BASELINE = (24);
int VTA_CENTER = (6);
int THREAD_PRIORITY_ABOVE_NORMAL = (1);
int THREAD_PRIORITY_BELOW_NORMAL = -((1));
int THREAD_PRIORITY_HIGHEST = (2);
int THREAD_PRIORITY_IDLE = -((15));
int THREAD_PRIORITY_LOWEST = -((2));
int THREAD_PRIORITY_NORMAL = (0);
int THREAD_PRIORITY_TIME_CRITICAL = (15);
int THREAD_PRIORITY_ERROR_RETURN = (2147483647);
int TLS_MINIMUM_AVAILABLE = (64);
int TIME_NOMINUTESORSECONDS = (1);
int TIME_NOSECONDS = (2);
int TIME_NOTIMEMARKER = (4);
int TIME_FORCE24HOURFORMAT = (8);
int TIME_ZONE_ID_INVALID = -(1);
int TIME_ZONE_ID_UNKNOWN = (0);
int TIME_ZONE_ID_STANDARD = (1);
int TIME_ZONE_ID_DAYLIGHT = (2);
int UOI_FLAGS = (1);
int UOI_NAME = (2);
int UOI_TYPE = (3);
int FS_CASE_IS_PRESERVED = (2);
int FS_CASE_SENSITIVE = (1);
int FS_UNICODE_STORED_ON_DISK = (4);
int FS_PERSISTENT_ACLS = (8);
int FS_FILE_COMPRESSION = (16);
int FS_VOL_IS_COMPRESSED = (32768);
int GWL_EXSTYLE = -((20));
int GWL_STYLE = -((16));
int GWL_WNDPROC = -((4));
int GWL_HINSTANCE = -((6));
int GWL_HWNDPARENT = -((8));
int GWL_ID = -((12));
int GWL_USERDATA = -((21));
int DWL_DLGPROC = (4);
int DWL_MSGRESULT = (0);
int DWL_USER = (8);
int GMEM_FIXED = (0);
int GMEM_MOVEABLE = (2);
int GPTR = (64);
int GHND = (66);
int GMEM_DDESHARE = (8192);
int GMEM_DISCARDABLE = (256);
int GMEM_LOWER = (4096);
int GMEM_NOCOMPACT = (16);
int GMEM_NODISCARD = (32);
int GMEM_NOT_BANKED = (4096);
int GMEM_NOTIFY = (16384);
int GMEM_SHARE = (8192);
int GMEM_ZEROINIT = (64);
int GMEM_DISCARDED = (16384);
int GMEM_INVALID_HANDLE = (32768);
int GMEM_LOCKCOUNT = (255);
int HEAP_GENERATE_EXCEPTIONS = (4);
int HEAP_NO_SERIALIZE = (1);
int HEAP_ZERO_MEMORY = (8);
int STATUS_NO_MEMORY = (0xc0000017);
int STATUS_ACCESS_VIOLATION = (0xc0000005);
int HEAP_REALLOC_IN_PLACE_ONLY = (16);
int ILC_COLOR = (0);
int ILC_COLOR4 = (4);
int ILC_COLOR8 = (8);
int ILC_COLOR16 = (16);
int ILC_COLOR24 = (24);
int ILC_COLOR32 = (32);
int ILC_COLORDDB = (254);
int ILC_MASK = (1);
int ILC_PALETTE = (2048);
int ILD_BLEND25 = (2);
int ILD_BLEND50 = (4);
int ILD_SELECTED = (4);
int ILD_BLEND = (4);
int ILD_FOCUS = (2);
int ILD_MASK = (16);
int ILD_NORMAL = (0);
int ILD_TRANSPARENT = (1);
int CLR_NONE = (0xffffffff);
int CLR_DEFAULT = (0xff000000);
int CLR_INVALID = (0xFFFFFFFF);
int LR_LOADFROMFILE = (16);
int LR_LOADMAP3DCOLORS = (4096);
int LR_LOADTRANSPARENT = (32);
int IME_CONFIG_GENERAL = (1);
int IME_CONFIG_REGISTERWORD = (2);
int IME_CONFIG_SELECTDICTIONARY = (3);
int GCL_CONVERSION = (1);
int GCL_REVERSECONVERSION = (2);
int GCL_REVERSE_LENGTH = (3);
int GGL_LEVEL = (1);
int GGL_INDEX = (2);
int GGL_STRING = (3);
int GGL_PRIVATE = (4);
int GL_LEVEL_ERROR = (2);
int GL_LEVEL_FATAL = (1);
int GL_LEVEL_INFORMATION = (4);
int GL_LEVEL_NOGUIDELINE = (0);
int GL_LEVEL_WARNING = (3);
int GL_ID_CANNOTSAVE = (17);
int GL_ID_NOCONVERT = (32);
int GL_ID_NODICTIONARY = (16);
int GL_ID_NOMODULE = (1);
int GL_ID_READINGCONFLICT = (35);
int GL_ID_TOOMANYSTROKE = (34);
int GL_ID_TYPINGERROR = (33);
int GL_ID_UNKNOWN = (0);
int GL_ID_INPUTREADING = (36);
int GL_ID_INPUTRADICAL = (37);
int GL_ID_INPUTCODE = (38);
int GL_ID_CHOOSECANDIDATE = (40);
int GL_ID_REVERSECONVERSION = (41);
int IGP_PROPERTY = (4);
int IGP_CONVERSION = (8);
int IGP_SENTENCE = (12);
int IGP_UI = (16);
int IGP_SETCOMPSTR = (20);
int IGP_SELECT = (24);
int IME_PROP_AT_CARET = (65536);
int IME_PROP_SPECIAL_UI = (131072);
int IME_PROP_CANDLIST_START_FROM_1 = (262144);
int IME_PROP_UNICODE = (524288);
int UI_CAP_2700 = (1);
int UI_CAP_ROT90 = (2);
int UI_CAP_ROTANY = (4);
int SCS_CAP_COMPSTR = (1);
int SCS_CAP_MAKEREAD = (2);
int SELECT_CAP_CONVERSION = (1);
int SELECT_CAP_SENTENCE = (2);
int NI_CHANGECANDIDATELIST = (19);
int NI_CLOSECANDIDATE = (17);
int NI_COMPOSITIONSTR = (21);
int NI_OPENCANDIDATE = (16);
int NI_SELECTCANDIDATESTR = (18);
int NI_SETCANDIDATE_PAGESIZE = (23);
int NI_SETCANDIDATE_PAGESTART = (22);
int CPS_CANCEL = (4);
int CPS_COMPLETE = (1);
int CPS_CONVERT = (2);
int CPS_REVERT = (3);
int SCS_SETSTR = (9);
int SCS_CHANGEATTR = (18);
int SCS_CHANGECLAUSE = (36);
int IME_REGWORD_STYLE_EUDC = (1);
int IME_REGWORD_STYLE_USER_FIRST = (0x80000000);
int IME_REGWORD_STYLE_USER_LAST = -((1));
int SECURITY_DESCRIPTOR_REVISION = (1);
int IS_TEXT_UNICODE_ASCII16 = (1);
int IS_TEXT_UNICODE_REVERSE_ASCII16 = (16);
int IS_TEXT_UNICODE_STATISTICS = (2);
int IS_TEXT_UNICODE_REVERSE_STATISTICS = (32);
int IS_TEXT_UNICODE_CONTROLS = (4);
int IS_TEXT_UNICODE_REVERSE_CONTROLS = (64);
int IS_TEXT_UNICODE_SIGNATURE = (8);
int IS_TEXT_UNICODE_REVERSE_SIGNATURE = (128);
int IS_TEXT_UNICODE_ILLEGAL_CHARS = (256);
int IS_TEXT_UNICODE_ODD_LENGTH = (512);
int IS_TEXT_UNICODE_NULL_BYTES = (4096);
int IS_TEXT_UNICODE_UNICODE_MASK = (15);
int IS_TEXT_UNICODE_REVERSE_MASK = (240);
int IS_TEXT_UNICODE_NOT_UNICODE_MASK = (3840);
int IS_TEXT_UNICODE_NOT_ASCII_MASK = (61440);
int HC_GETNEXT = (1);
int HC_SKIP = (2);
int HC_SYSMODALOFF = (5);
int HC_SYSMODALON = (4);
int HC_NOREMOVE = (3);
int KEYEVENTF_EXTENDEDKEY = (1);
int KEYEVENTF_KEYUP = (2);
int OBM_BTNCORNERS = (32758);
int OBM_BTSIZE = (32761);
int OBM_CHECK = (32760);
int OBM_CHECKBOXES = (32759);
int OBM_CLOSE = (32754);
int OBM_COMBO = (32738);
int OBM_DNARROW = (32752);
int OBM_DNARROWD = (32742);
int OBM_DNARROWI = (32736);
int OBM_LFARROW = (32750);
int OBM_LFARROWI = (32734);
int OBM_LFARROWD = (32740);
int OBM_MNARROW = (32739);
int OBM_OLD_CLOSE = (32767);
int OBM_OLD_DNARROW = (32764);
int OBM_OLD_LFARROW = (32762);
int OBM_OLD_REDUCE = (32757);
int OBM_OLD_RESTORE = (32755);
int OBM_OLD_RGARROW = (32763);
int OBM_OLD_UPARROW = (32765);
int OBM_OLD_ZOOM = (32756);
int OBM_REDUCE = (32749);
int OBM_REDUCED = (32746);
int OBM_RESTORE = (32747);
int OBM_RESTORED = (32744);
int OBM_RGARROW = (32751);
int OBM_RGARROWD = (32741);
int OBM_RGARROWI = (32735);
int OBM_SIZE = (32766);
int OBM_UPARROW = (32753);
int OBM_UPARROWD = (32743);
int OBM_UPARROWI = (32737);
int OBM_ZOOM = (32748);
int OBM_ZOOMD = (32745);
int DONT_RESOLVE_DLL_REFERENCES = (1);
int LOAD_LIBRARY_AS_DATAFILE = (2);
int LOAD_WITH_ALTERED_SEARCH_PATH = (8);
int LPTR = (64);
int LHND = (66);
int NONZEROLHND = (2);
int NONZEROLPTR = (0);
int LMEM_NONZEROLHND = (2);
int LMEM_NONZEROLPTR = (0);
int LMEM_FIXED = (0);
int LMEM_MOVEABLE = (2);
int LMEM_NOCOMPACT = (16);
int LMEM_NODISCARD = (32);
int LMEM_ZEROINIT = (64);
int LMEM_MODIFY = (128);
int LMEM_LOCKCOUNT = (255);
int LMEM_DISCARDABLE = (3840);
int LMEM_DISCARDED = (16384);
int LMEM_INVALID_HANDLE = (32768);
int LOCKFILE_FAIL_IMMEDIATELY = (1);
int LOCKFILE_EXCLUSIVE_LOCK = (2);
int MB_USERICON = (0x80);
int MB_ICONASTERISK = (0x40);
int MB_ICONEXCLAMATION = (0x30);
int MB_ICONWARNING = (0x30);
int MB_ICONERROR = (0x10);
int MB_ICONHAND = (0x10);
int MB_ICONQUESTION = (0x20);
int MB_OK = (0);
int MB_ABORTRETRYIGNORE = (0x2);
int MB_APPLMODAL = (0);
int MB_DEFAULT_DESKTOP_ONLY = (0x20000);
int MB_HELP = (0x4000);
int MB_RIGHT = (0x80000);
int MB_RTLREADING = (0x100000);
int MB_TOPMOST = (0x40000);
int MB_DEFBUTTON1 = (0);
int MB_DEFBUTTON2 = (0x100);
int MB_DEFBUTTON3 = (0x200);
int MB_DEFBUTTON4 = (0x300);
int MB_ICONINFORMATION = (0x40);
int MB_ICONSTOP = (0x10);
int MB_OKCANCEL = (0x1);
int MB_RETRYCANCEL = (0x5);
int MB_SERVICE_NOTIFICATION = (0x40000);
int MB_SETFOREGROUND = (0x10000);
int MB_SYSTEMMODAL = (0x1000);
int MB_TASKMODAL = (0x2000);
int MB_YESNO = (0x4);
int MB_YESNOCANCEL = (0x3);
int IDABORT = (3);
int IDCANCEL = (2);
int IDCLOSE = (8);
int IDHELP = (9);
int IDIGNORE = (5);
int IDNO = (7);
int IDOK = (1);
int IDRETRY = (4);
int IDYES = (6);
int MSGF_DIALOGBOX = (0);
int MSGF_MENU = (2);
int MSGF_NEXTWINDOW = (6);
int MSGF_SCROLLBAR = (5);
int MSGF_MAINLOOP = (8);
int MSGF_USER = (4096);
int MWT_IDENTITY = (1);
int MWT_LEFTMULTIPLY = (2);
int MWT_RIGHTMULTIPLY = (3);
int MOUSEEVENTF_ABSOLUTE = (32768);
int MOUSEEVENTF_MOVE = (1);
int MOUSEEVENTF_LEFTDOWN = (2);
int MOUSEEVENTF_LEFTUP = (4);
int MOUSEEVENTF_RIGHTDOWN = (8);
int MOUSEEVENTF_RIGHTUP = (16);
int MOUSEEVENTF_MIDDLEDOWN = (32);
int MOUSEEVENTF_MIDDLEUP = (64);
int MOVEFILE_REPLACE_EXISTING = (1);
int MOVEFILE_COPY_ALLOWED = (2);
int MOVEFILE_DELAY_UNTIL_REBOOT = (4);
int WAIT_OBJECT_0 = (0);
int WAIT_ABANDONED_0 = (0x80);
int WAIT_TIMEOUT = (0x102);
int WAIT_IO_COMPLETION = (0xc0);
int WAIT_ABANDONED = (0x80);
int WAIT_FAILED = (0xffffffff);
int MAXIMUM_WAIT_OBJECTS = (0x40);
int MAXIMUM_SUSPEND_COUNT = (0x7f);
int MB_PRECOMPOSED = (1);
int MB_COMPOSITE = (2);
int MB_ERR_INVALID_CHARS = (8);
int MB_USEGLYPHCHARS = (4);
int TOKEN_ADJUST_DEFAULT = (128);
int TOKEN_ADJUST_GROUPS = (64);
int TOKEN_ADJUST_PRIVILEGES = (32);
int TOKEN_ALL_ACCESS = (0xf00ff);
int TOKEN_ASSIGN_PRIMARY = (1);
int TOKEN_DUPLICATE = (2);
int TOKEN_EXECUTE = (0x20000);
int TOKEN_IMPERSONATE = (4);
int TOKEN_QUERY = (8);
int TOKEN_QUERY_SOURCE = (16);
int TOKEN_READ = (0x20008);
int TOKEN_WRITE = (0x200e0);
int SC_MANAGER_ALL_ACCESS = (0xf003f);
int SC_MANAGER_CONNECT = (1);
int SC_MANAGER_CREATE_SERVICE = (2);
int SC_MANAGER_ENUMERATE_SERVICE = (4);
int SC_MANAGER_LOCK = (8);
int SC_MANAGER_QUERY_LOCK_STATUS = (16);
int SC_MANAGER_MODIFY_BOOT_CONFIG = (32);
int HWND_BROADCAST = (0xFFFF);
int TAPE_FORMAT = (0x5);
int TAPE_LOAD = (0);
int TAPE_LOCK = (0x3);
int TAPE_TENSION = (0x2);
int TAPE_UNLOAD = (0x1);
int TAPE_UNLOCK = (0x4);
int IS_PSREBOOTSYSTEM = (3);
int IS_PSRESTARTWINDOWS = (2);
int PSPCB_CREATE = (2);
int PSPCB_RELEASE = (1);
int PURGE_TXABORT = (1);
int PURGE_RXABORT = (2);
int PURGE_TXCLEAR = (4);
int PURGE_RXCLEAR = (8);
int OWNER_SECURITY_INFORMATION = (0x1);
int GROUP_SECURITY_INFORMATION = (0x2);
int DACL_SECURITY_INFORMATION = (0x4);
int SACL_SECURITY_INFORMATION = (0x8);
int EVENTLOG_FORWARDS_READ = (4);
int EVENTLOG_BACKWARDS_READ = (8);
int EVENTLOG_SEEK_READ = (2);
int EVENTLOG_SEQUENTIAL_READ = (1);
int EVENTLOG_ERROR_TYPE = (1);
int EVENTLOG_WARNING_TYPE = (2);
int EVENTLOG_INFORMATION_TYPE = (4);
int EVENTLOG_AUDIT_SUCCESS = (8);
int EVENTLOG_AUDIT_FAILURE = (16);
int RDW_ERASE = (4);
int RDW_FRAME = (1024);
int RDW_INTERNALPAINT = (2);
int RDW_INVALIDATE = (1);
int RDW_NOERASE = (32);
int RDW_NOFRAME = (2048);
int RDW_NOINTERNALPAINT = (16);
int RDW_VALIDATE = (8);
int RDW_ERASENOW = (512);
int RDW_UPDATENOW = (256);
int RDW_ALLCHILDREN = (128);
int RDW_NOCHILDREN = (64);
int HKEY_CLASSES_ROOT = (0x80000000);
int HKEY_CURRENT_USER = (0x80000001);
int HKEY_LOCAL_MACHINE = (0x80000002);
int HKEY_USERS = (0x80000003);
int HKEY_PERFORMANCE_DATA = (0x80000004);
int HKEY_CURRENT_CONFIG = (0x80000005);
int HKEY_DYN_DATA = (0x80000006);
int REG_OPTION_VOLATILE = (0x1);
int REG_OPTION_NON_VOLATILE = (0);
int REG_CREATED_NEW_KEY = (0x1);
int REG_OPENED_EXISTING_KEY = (0x2);
int REG_BINARY = (3);
int REG_DWORD = (4);
int REG_DWORD_LITTLE_ENDIAN = (4);
int REG_DWORD_BIG_ENDIAN = (5);
int REG_EXPAND_SZ = (2);
int REG_FULL_RESOURCE_DESCRIPTOR = (9);
int REG_LINK = (6);
int REG_MULTI_SZ = (7);
int REG_NONE = (0);
int REG_RESOURCE_LIST = (8);
int REG_RESOURCE_REQUIREMENTS_LIST = (10);
int REG_SZ = (1);
int MOD_ALT = (1);
int MOD_CONTROL = (2);
int MOD_SHIFT = (4);
int MOD_WIN = (8);
int IDHOT_SNAPDESKTOP = -((2));
int IDHOT_SNAPWINDOW = -((1));
int REG_NOTIFY_CHANGE_NAME = (0x1);
int REG_NOTIFY_CHANGE_ATTRIBUTES = (0x2);
int REG_NOTIFY_CHANGE_LAST_SET = (0x4);
int REG_NOTIFY_CHANGE_SECURITY = (0x8);
int SW_ERASE = (4);
int SW_INVALIDATE = (2);
int SW_SCROLLCHILDREN = (1);
int SMTO_ABORTIFHUNG = (2);
int SMTO_BLOCK = (1);
int SMTO_NORMAL = (0);
int OPAQUE = (2);
int TRANSPARENT = (1);
int SLE_ERROR = (1);
int SLE_MINORERROR = (2);
int SLE_WARNING = (3);
int SEM_FAILCRITICALERRORS = (1);
int SEM_NOALIGNMENTFAULTEXCEPT = (4);
int SEM_NOGPFAULTERRORBOX = (2);
int SEM_NOOPENFILEERRORBOX = (32768);
int ICM_ON = (2);
int ICM_OFF = (1);
int ICM_QUERY = (3);
int LOCALE_ILANGUAGE = (1);
int LOCALE_SLANGUAGE = (2);
int LOCALE_SENGLANGUAGE = (4097);
int LOCALE_SABBREVLANGNAME = (3);
int LOCALE_SNATIVELANGNAME = (4);
int LOCALE_ICOUNTRY = (5);
int LOCALE_SCOUNTRY = (6);
int LOCALE_SENGCOUNTRY = (4098);
int LOCALE_SABBREVCTRYNAME = (7);
int LOCALE_SNATIVECTRYNAME = (8);
int LOCALE_IDEFAULTLANGUAGE = (9);
int LOCALE_IDEFAULTCOUNTRY = (10);
int LOCALE_IDEFAULTANSICODEPAGE = (4100);
int LOCALE_IDEFAULTCODEPAGE = (11);
int LOCALE_SLIST = (12);
int LOCALE_IMEASURE = (13);
int LOCALE_SDECIMAL = (14);
int LOCALE_STHOUSAND = (15);
int LOCALE_SGROUPING = (16);
int LOCALE_IDIGITS = (17);
int LOCALE_ILZERO = (18);
int LOCALE_INEGNUMBER = (4112);
int LOCALE_SCURRENCY = (20);
int LOCALE_SMONDECIMALSEP = (22);
int LOCALE_SMONTHOUSANDSEP = (23);
int LOCALE_SMONGROUPING = (24);
int LOCALE_ICURRDIGITS = (25);
int LOCALE_ICURRENCY = (27);
int LOCALE_INEGCURR = (28);
int LOCALE_SDATE = (29);
int LOCALE_STIME = (30);
int LOCALE_STIMEFORMAT = (4099);
int LOCALE_SSHORTDATE = (31);
int LOCALE_SLONGDATE = (32);
int LOCALE_IDATE = (33);
int LOCALE_ILDATE = (34);
int LOCALE_ITIME = (35);
int LOCALE_ITLZERO = (37);
int LOCALE_IDAYLZERO = (38);
int LOCALE_IMONLZERO = (39);
int LOCALE_S1159 = (40);
int LOCALE_S2359 = (41);
int LOCALE_ICALENDARTYPE = (4105);
int LOCALE_IOPTIONALCALENDAR = (4107);
int LOCALE_IFIRSTDAYOFWEEK = (4108);
int LOCALE_IFIRSTWEEKOFYEAR = (4109);
int LOCALE_SDAYNAME1 = (42);
int LOCALE_SDAYNAME2 = (43);
int LOCALE_SDAYNAME3 = (44);
int LOCALE_SDAYNAME4 = (45);
int LOCALE_SDAYNAME5 = (46);
int LOCALE_SDAYNAME6 = (47);
int LOCALE_SDAYNAME7 = (48);
int LOCALE_SABBREVDAYNAME1 = (49);
int LOCALE_SABBREVDAYNAME2 = (50);
int LOCALE_SABBREVDAYNAME3 = (51);
int LOCALE_SABBREVDAYNAME4 = (52);
int LOCALE_SABBREVDAYNAME5 = (53);
int LOCALE_SABBREVDAYNAME6 = (54);
int LOCALE_SABBREVDAYNAME7 = (55);
int LOCALE_SMONTHNAME1 = (56);
int LOCALE_SMONTHNAME2 = (57);
int LOCALE_SMONTHNAME3 = (58);
int LOCALE_SMONTHNAME4 = (59);
int LOCALE_SMONTHNAME5 = (60);
int LOCALE_SMONTHNAME6 = (61);
int LOCALE_SMONTHNAME7 = (62);
int LOCALE_SMONTHNAME8 = (63);
int LOCALE_SMONTHNAME9 = (64);
int LOCALE_SMONTHNAME10 = (65);
int LOCALE_SMONTHNAME11 = (66);
int LOCALE_SMONTHNAME12 = (67);
int LOCALE_SMONTHNAME13 = (4110);
int LOCALE_SABBREVMONTHNAME1 = (68);
int LOCALE_SABBREVMONTHNAME2 = (69);
int LOCALE_SABBREVMONTHNAME3 = (70);
int LOCALE_SABBREVMONTHNAME4 = (71);
int LOCALE_SABBREVMONTHNAME5 = (72);
int LOCALE_SABBREVMONTHNAME6 = (73);
int LOCALE_SABBREVMONTHNAME7 = (74);
int LOCALE_SABBREVMONTHNAME8 = (75);
int LOCALE_SABBREVMONTHNAME9 = (76);
int LOCALE_SABBREVMONTHNAME10 = (77);
int LOCALE_SABBREVMONTHNAME11 = (78);
int LOCALE_SABBREVMONTHNAME12 = (79);
int LOCALE_SABBREVMONTHNAME13 = (4111);
int LOCALE_SPOSITIVESIGN = (80);
int LOCALE_SNEGATIVESIGN = (81);
int LOCALE_IPOSSIGNPOSN = (82);
int LOCALE_INEGSIGNPOSN = (83);
int LOCALE_IPOSSYMPRECEDES = (84);
int LOCALE_IPOSSEPBYSPACE = (85);
int LOCALE_INEGSYMPRECEDES = (86);
int LOCALE_INEGSEPBYSPACE = (87);
int LOCALE_NOUSEROVERRIDE = (0x80000000);
int CAL_ICALINTVALUE = (1);
int CAL_IYEAROFFSETRANGE = (3);
int CAL_SABBREVDAYNAME1 = (14);
int CAL_SABBREVDAYNAME2 = (15);
int CAL_SABBREVDAYNAME3 = (16);
int CAL_SABBREVDAYNAME4 = (17);
int CAL_SABBREVDAYNAME5 = (18);
int CAL_SABBREVDAYNAME6 = (19);
int CAL_SABBREVDAYNAME7 = (20);
int CAL_SABBREVMONTHNAME1 = (34);
int CAL_SABBREVMONTHNAME2 = (35);
int CAL_SABBREVMONTHNAME3 = (36);
int CAL_SABBREVMONTHNAME4 = (37);
int CAL_SABBREVMONTHNAME5 = (38);
int CAL_SABBREVMONTHNAME6 = (39);
int CAL_SABBREVMONTHNAME7 = (40);
int CAL_SABBREVMONTHNAME8 = (41);
int CAL_SABBREVMONTHNAME9 = (42);
int CAL_SABBREVMONTHNAME10 = (43);
int CAL_SABBREVMONTHNAME11 = (44);
int CAL_SABBREVMONTHNAME12 = (45);
int CAL_SABBREVMONTHNAME13 = (46);
int CAL_SCALNAME = (2);
int CAL_SDAYNAME1 = (7);
int CAL_SDAYNAME2 = (8);
int CAL_SDAYNAME3 = (9);
int CAL_SDAYNAME4 = (10);
int CAL_SDAYNAME5 = (11);
int CAL_SDAYNAME6 = (12);
int CAL_SDAYNAME7 = (13);
int CAL_SERASTRING = (4);
int CAL_SLONGDATE = (6);
int CAL_SMONTHNAME1 = (21);
int CAL_SMONTHNAME2 = (22);
int CAL_SMONTHNAME3 = (23);
int CAL_SMONTHNAME4 = (24);
int CAL_SMONTHNAME5 = (25);
int CAL_SMONTHNAME6 = (26);
int CAL_SMONTHNAME7 = (27);
int CAL_SMONTHNAME8 = (28);
int CAL_SMONTHNAME9 = (29);
int CAL_SMONTHNAME10 = (30);
int CAL_SMONTHNAME11 = (31);
int CAL_SMONTHNAME12 = (32);
int CAL_SMONTHNAME13 = (33);
int CAL_SSHORTDATE = (5);
int PROCESS_SET_QUOTA = (256);
int BLACKONWHITE = (1);
int COLORONCOLOR = (3);
int HALFTONE = (4);
int STRETCH_ANDSCANS = (1);
int STRETCH_DELETESCANS = (3);
int STRETCH_HALFTONE = (4);
int STRETCH_ORSCANS = (2);
int WHITEONBLACK = (2);
int OCR_NORMAL = (32512);
int OCR_IBEAM = (32513);
int OCR_WAIT = (32514);
int OCR_CROSS = (32515);
int OCR_UP = (32516);
int OCR_SIZE = (32640);
int OCR_ICON = (32641);
int OCR_SIZENWSE = (32642);
int OCR_SIZENESW = (32643);
int OCR_SIZEWE = (32644);
int OCR_SIZENS = (32645);
int OCR_SIZEALL = (32646);
int OCR_NO = (32648);
int OCR_APPSTARTING = (32650);
int TAPE_ABSOLUTE_BLOCK = (0x1);
int TAPE_LOGICAL_BLOCK = (0x2);
int TAPE_REWIND = (0);
int TAPE_SPACE_END_OF_DATA = (0x4);
int TAPE_SPACE_FILEMARKS = (0x6);
int TAPE_SPACE_RELATIVE_BLOCKS = (0x5);
int TAPE_SPACE_SEQUENTIAL_FMKS = (0x7);
int TAPE_SPACE_SEQUENTIAL_SMKS = (0x9);
int TAPE_SPACE_SETMARKS = (0x8);
int EXCEPTION_EXECUTE_HANDLER = (1);
int EXCEPTION_CONTINUE_EXECUTION = -((1));
int EXCEPTION_CONTINUE_SEARCH = (0);
int HWND_BOTTOM = (1);
int HWND_NOTOPMOST = -(2);
int HWND_TOP = (0);
int HWND_TOPMOST = -(1);
int SWP_DRAWFRAME = (32);
int SWP_FRAMECHANGED = (32);
int SWP_HIDEWINDOW = (128);
int SWP_NOACTIVATE = (16);
int SWP_NOCOPYBITS = (256);
int SWP_NOMOVE = (2);
int SWP_NOSIZE = (1);
int SWP_NOREDRAW = (8);
int SWP_NOZORDER = (4);
int SWP_SHOWWINDOW = (64);
int SWP_NOOWNERZORDER = (512);
int SWP_NOREPOSITION = (512);
int SWP_NOSENDCHANGING = (1024);
int HSHELL_ACTIVATESHELLWINDOW = (3);
int HSHELL_GETMINRECT = (5);
int HSHELL_LANGUAGE = (8);
int HSHELL_REDRAW = (6);
int HSHELL_TASKMAN = (7);
int HSHELL_WINDOWACTIVATED = (4);
int HSHELL_WINDOWCREATED = (1);
int HSHELL_WINDOWDESTROYED = (2);
int SW_HIDE = (0);
int SW_MAXIMIZE = (3);
int SW_MINIMIZE = (6);
int SW_NORMAL = (1);
int SW_RESTORE = (9);
int SW_SHOW = (5);
int SW_SHOWDEFAULT = (10);
int SW_SHOWMAXIMIZED = (3);
int SW_SHOWMINIMIZED = (2);
int SW_SHOWMINNOACTIVE = (7);
int SW_SHOWNA = (8);
int SW_SHOWNOACTIVATE = (4);
int SW_SHOWNORMAL = (1);
int WPF_RESTORETOMAXIMIZED = (2);
int WPF_SETMINPOSITION = (1);
int INFINITE = (0xFFFFFFFF);
int SPI_GETACCESSTIMEOUT = (60);
int SPI_GETANIMATION = (72);
int SPI_GETBEEP = (1);
int SPI_GETBORDER = (5);
int SPI_GETDEFAULTINPUTLANG = (89);
int SPI_GETDRAGFULLWINDOWS = (38);
int SPI_GETFASTTASKSWITCH = (35);
int SPI_GETFILTERKEYS = (50);
int SPI_GETFONTSMOOTHING = (74);
int SPI_GETGRIDGRANULARITY = (18);
int SPI_GETHIGHCONTRAST = (66);
int SPI_GETICONMETRICS = (45);
int SPI_GETICONTITLELOGFONT = (31);
int SPI_GETICONTITLEWRAP = (25);
int SPI_GETKEYBOARDDELAY = (22);
int SPI_GETKEYBOARDPREF = (68);
int SPI_GETKEYBOARDSPEED = (10);
int SPI_GETLOWPOWERACTIVE = (83);
int SPI_GETLOWPOWERTIMEOUT = (79);
int SPI_GETMENUDROPALIGNMENT = (27);
int SPI_GETMINIMIZEDMETRICS = (43);
int SPI_GETMOUSE = (3);
int SPI_GETMOUSEKEYS = (54);
int SPI_GETMOUSETRAILS = (94);
int SPI_GETNONCLIENTMETRICS = (41);
int SPI_GETPOWEROFFACTIVE = (84);
int SPI_GETPOWEROFFTIMEOUT = (80);
int SPI_GETSCREENREADER = (70);
int SPI_GETSCREENSAVEACTIVE = (16);
int SPI_GETSCREENSAVETIMEOUT = (14);
int SPI_GETSERIALKEYS = (62);
int SPI_GETSHOWSOUNDS = (56);
int SPI_GETSOUNDSENTRY = (64);
int SPI_GETSTICKYKEYS = (58);
int SPI_GETTOGGLEKEYS = (52);
int SPI_GETWINDOWSEXTENSION = (92);
int SPI_GETWORKAREA = (48);
int SPI_ICONHORIZONTALSPACING = (13);
int SPI_ICONVERTICALSPACING = (24);
int SPI_LANGDRIVER = (12);
int SPI_SCREENSAVERRUNNING = (97);
int SPI_SETACCESSTIMEOUT = (61);
int SPI_SETANIMATION = (73);
int SPI_SETBEEP = (2);
int SPI_SETBORDER = (6);
int SPI_SETDEFAULTINPUTLANG = (90);
int SPI_SETDESKPATTERN = (21);
int SPI_SETDESKWALLPAPER = (20);
int SPI_SETDOUBLECLICKTIME = (32);
int SPI_SETDOUBLECLKHEIGHT = (30);
int SPI_SETDOUBLECLKWIDTH = (29);
int SPI_SETDRAGFULLWINDOWS = (37);
int SPI_SETDRAGHEIGHT = (77);
int SPI_SETDRAGWIDTH = (76);
int SPI_SETFASTTASKSWITCH = (36);
int SPI_SETFILTERKEYS = (51);
int SPI_SETFONTSMOOTHING = (75);
int SPI_SETGRIDGRANULARITY = (19);
int SPI_SETHANDHELD = (78);
int SPI_SETHIGHCONTRAST = (67);
int SPI_SETICONMETRICS = (46);
int SPI_SETICONTITLELOGFONT = (34);
int SPI_SETICONTITLEWRAP = (26);
int SPI_SETKEYBOARDDELAY = (23);
int SPI_SETKEYBOARDPREF = (69);
int SPI_SETKEYBOARDSPEED = (11);
int SPI_SETLANGTOGGLE = (91);
int SPI_SETLOWPOWERACTIVE = (85);
int SPI_SETLOWPOWERTIMEOUT = (81);
int SPI_SETMENUDROPALIGNMENT = (28);
int SPI_SETMINIMIZEDMETRICS = (44);
int SPI_SETMOUSE = (4);
int SPI_SETMOUSEBUTTONSWAP = (33);
int SPI_SETMOUSEKEYS = (55);
int SPI_SETMOUSETRAILS = (93);
int SPI_SETNONCLIENTMETRICS = (42);
int SPI_SETPENWINDOWS = (49);
int SPI_SETPOWEROFFACTIVE = (86);
int SPI_SETPOWEROFFTIMEOUT = (82);
int SPI_SETSCREENREADER = (71);
int SPI_SETSCREENSAVEACTIVE = (17);
int SPI_SETSCREENSAVETIMEOUT = (15);
int SPI_SETSERIALKEYS = (63);
int SPI_SETSHOWSOUNDS = (57);
int SPI_SETSOUNDSENTRY = (65);
int SPI_SETSTICKYKEYS = (59);
int SPI_SETTOGGLEKEYS = (53);
int SPI_SETWORKAREA = (47);
int SPIF_UPDATEINIFILE = (1);
int SPIF_SENDWININICHANGE = (2);
int SPIF_SENDCHANGE = (2);
int TPM_CENTERALIGN = (0x4);
int TPM_LEFTALIGN = (0);
int TPM_RIGHTALIGN = (0x8);
int TPM_LEFTBUTTON = (0);
int TPM_RIGHTBUTTON = (0x2);
int TPM_HORIZONTAL = (0);
int TPM_VERTICAL = (0x40);
int TCI_SRCCHARSET = (1);
int TCI_SRCCODEPAGE = (2);
int TCI_SRCFONTSIG = (3);
int VFFF_ISSHAREDFILE = (1);
int VFF_CURNEDEST = (1);
int VFF_FILEINUSE = (2);
int VFF_BUFFTOOSMALL = (4);
int VIFF_FORCEINSTALL = (1);
int VIFF_DONTDELETEOLD = (2);
int VIF_TEMPFILE = (0x1);
int VIF_MISMATCH = (0x2);
int VIF_SRCOLD = (0x4);
int VIF_DIFFLANG = (0x8);
int VIF_DIFFCODEPG = (0x10);
int VIF_DIFFTYPE = (0x20);
int VIF_WRITEPROT = (0x40);
int VIF_FILEINUSE = (0x80);
int VIF_OUTOFSPACE = (0x100);
int VIF_ACCESSVIOLATION = (0x200);
int VIF_SHARINGVIOLATION = (0x400);
int VIF_CANNOTCREATE = (0x800);
int VIF_CANNOTDELETE = (0x1000);
int VIF_CANNOTDELETECUR = (0x4000);
int VIF_CANNOTRENAME = (0x2000);
int VIF_OUTOFMEMORY = (0x8000);
int VIF_CANNOTREADSRC = (0x10000);
int VIF_CANNOTREADDST = (0x20000);
int VIF_BUFFTOOSMALL = (0x40000);
int WC_COMPOSITECHECK = (512);
int WC_DISCARDNS = (16);
int WC_SEPCHARS = (32);
int WC_DEFAULTCHAR = (64);
int HELP_COMMAND = (0x102);
int HELP_CONTENTS = (0x3);
int HELP___FILE__ = (0x1);
int HELP___FILE__POPUP = (0x8);
int HELP_FORCEFILE = (0x9);
int HELP_HELPONHELP = (0x4);
int HELP_INDEX = (0x3);
int HELP_KEY = (0x101);
int HELP_MULTIKEY = (0x201);
int HELP_PARTIALKEY = (0x105);
int HELP_QUIT = (0x2);
int HELP_SETCONTENTS = (0x5);
int HELP_SETINDEX = (0x5);
int HELP___FILE__MENU = (0xa);
int HELP_FINDER = (0xb);
int HELP_WM_HELP = (0xc);
int HELP_TCARD = (0x8000);
int HELP_TCARD_DATA = (0x10);
int HELP_TCARD_OTHER_CALLER = (0x11);
int CONNECT_UPDATE_PROFILE = (1);
int RESOURCETYPE_DISK = (1);
int RESOURCETYPE_PRINT = (2);
int RESOURCETYPE_ANY = (0);
int RESOURCE_CONNECTED = (1);
int RESOURCE_GLOBALNET = (2);
int RESOURCE_REMEMBERED = (3);
int RESOURCEUSAGE_CONNECTABLE = (1);
int RESOURCEUSAGE_CONTAINER = (2);
int WN_BAD_NETNAME = (0x43);
int WN_EXTENDED_ERROR = (0x4b8);
int WN_MORE_DATA = (0xea);
int WN_NO_NETWORK = (0x4c6);
int WN_SUCCESS = (0);
int WN_ACCESS_DENIED = (0x5);
int WN_BAD_PROVIDER = (0x4b4);
int WN_NOT_AUTHENTICATED = (0x4dc);
int UNIVERSAL_NAME_INFO_LEVEL = (1);
int REMOTE_NAME_INFO_LEVEL = (2);
int STILL_ACTIVE = (0x103);
int SP_SERIALCOMM = (0x1);
int BAUD_075 = (0x1);
int BAUD_110 = (0x2);
int BAUD_134_5 = (0x4);
int BAUD_150 = (0x8);
int BAUD_300 = (0x10);
int BAUD_600 = (0x20);
int BAUD_1200 = (0x40);
int BAUD_1800 = (0x80);
int BAUD_2400 = (0x100);
int BAUD_4800 = (0x200);
int BAUD_7200 = (0x400);
int BAUD_9600 = (0x800);
int BAUD_14400 = (0x1000);
int BAUD_19200 = (0x2000);
int BAUD_38400 = (0x4000);
int BAUD_56K = (0x8000);
int BAUD_57600 = (0x40000);
int BAUD_115200 = (0x20000);
int BAUD_128K = (0x10000);
int BAUD_USER = (0x10000000);
int PST_FAX = (0x21);
int PST_LAT = (0x101);
int PST_MODEM = (0x6);
int PST_NETWORK_BRIDGE = (0x100);
int PST_PARALLELPORT = (0x2);
int PST_RS232 = (0x1);
int PST_RS422 = (0x3);
int PST_RS423 = (0x4);
int PST_RS449 = (0x5);
int PST_SCANNER = (0x22);
int PST_TCPIP_TELNET = (0x102);
int PST_UNSPECIFIED = (0);
int PST_X25 = (0x103);
int PCF_16BITMODE = (0x200);
int PCF_DTRDSR = (0x1);
int PCF_INTTIMEOUTS = (0x80);
int PCF_PARITY_CHECK = (0x8);
int PCF_RLSD = (0x4);
int PCF_RTSCTS = (0x2);
int PCF_SETXCHAR = (0x20);
int PCF_SPECIALCHARS = (0x100);
int PCF_TOTALTIMEOUTS = (0x40);
int PCF_XONXOFF = (0x10);
int SP_BAUD = (0x2);
int SP_DATABITS = (0x4);
int SP_HANDSHAKING = (0x10);
int SP_PARITY = (0x1);
int SP_PARITY_CHECK = (0x20);
int SP_RLSD = (0x40);
int SP_STOPBITS = (0x8);
int DATABITS_5 = (1);
int DATABITS_6 = (2);
int DATABITS_7 = (4);
int DATABITS_8 = (8);
int DATABITS_16 = (16);
int DATABITS_16X = (32);
int STOPBITS_10 = (1);
int STOPBITS_15 = (2);
int STOPBITS_20 = (4);
int PARITY_NONE = (256);
int PARITY_ODD = (512);
int PARITY_EVEN = (1024);
int PARITY_MARK = (2048);
int PARITY_SPACE = (4096);
int COMMPROP_INITIALIZED = (0xe73cf52e);
int CBR_110 = (110);
int CBR_300 = (300);
int CBR_600 = (600);
int CBR_1200 = (1200);
int CBR_2400 = (2400);
int CBR_4800 = (4800);
int CBR_9600 = (9600);
int CBR_14400 = (14400);
int CBR_19200 = (19200);
int CBR_38400 = (38400);
int CBR_56000 = (56000);
int CBR_57600 = (57600);
int CBR_115200 = (115200);
int CBR_128000 = (128000);
int CBR_256000 = (256000);
int DTR_CONTROL_DISABLE = (0);
int DTR_CONTROL_ENABLE = (1);
int DTR_CONTROL_HANDSHAKE = (2);
int RTS_CONTROL_DISABLE = (0);
int RTS_CONTROL_ENABLE = (1);
int RTS_CONTROL_HANDSHAKE = (2);
int RTS_CONTROL_TOGGLE = (3);
int EVENPARITY = (2);
int MARKPARITY = (3);
int NOPARITY = (0);
int ODDPARITY = (1);
int SPACEPARITY = (4);
int ONESTOPBIT = (0);
int ONE5STOPBITS = (1);
int TWOSTOPBITS = (2);
int CREATE_PROCESS_DEBUG_EVENT = (3);
int CREATE_THREAD_DEBUG_EVENT = (2);
int EXCEPTION_DEBUG_EVENT = (1);
int EXIT_PROCESS_DEBUG_EVENT = (5);
int EXIT_THREAD_DEBUG_EVENT = (4);
int LOAD_DLL_DEBUG_EVENT = (6);
int OUTPUT_DEBUG_STRING_EVENT = (8);
int UNLOAD_DLL_DEBUG_EVENT = (7);
int RIP_EVENT = (9);
int PROCESS_HEAP_REGION = (1);
int PROCESS_HEAP_UNCOMMITTED_RANGE = (2);
int PROCESS_HEAP_ENTRY_BUSY = (4);
int PROCESS_HEAP_ENTRY_MOVEABLE = (16);
int PROCESS_HEAP_ENTRY_DDESHARE = (32);
int HINSTANCE_ERROR = (32);
int BACKUP_DATA = (1);
int BACKUP_EA_DATA = (2);
int BACKUP_SECURITY_DATA = (3);
int BACKUP_ALTERNATE_DATA = (4);
int BACKUP_LINK = (5);
int STREAM_MODIFIED_WHEN_READ = (1);
int STREAM_CONTAINS_SECURITY = (2);
int STARTF_USESHOWWINDOW = (1);
int STARTF_USEPOSITION = (4);
int STARTF_USESIZE = (2);
int STARTF_USECOUNTCHARS = (8);
int STARTF_USEFILLATTRIBUTE = (16);
int STARTF_RUNFULLSCREEN = (32);
int STARTF_FORCEONFEEDBACK = (64);
int STARTF_FORCEOFFFEEDBACK = (128);
int STARTF_USESTDHANDLES = (256);
int STARTF_USEHOTKEY = (512);
int VER_PLATFORM_WIN32s = (0);
int VER_PLATFORM_WIN32_WINDOWS = (1);
int VER_PLATFORM_WIN32_NT = (2);
int MAXPROPPAGES = (100);
int PSP_DEFAULT = (0);
int PSP_DLGINDIRECT = (1);
int PSP_HASHELP = (32);
int PSP_USECALLBACK = (128);
int PSP_USEHICON = (2);
int PSP_USEICONID = (4);
int PSP_USEREFPARENT = (64);
int PSP_USETITLE = (8);
int PSP_RTLREADING = (16);
int PSH_DEFAULT = (0);
int PSH_HASHELP = (512);
int PSH_MODELESS = (1024);
int PSH_NOAPPLYNOW = (128);
int PSH_PROPSHEETPAGE = (8);
int PSH_PROPTITLE = (1);
int PSH_USECALLBACK = (256);
int PSH_USEHICON = (2);
int PSH_USEICONID = (4);
int PSH_USEPSTARTPAGE = (64);
int PSH_WIZARD = (32);
int PSH_RTLREADING = (2048);
int PSCB_INITIALIZED = (1);
int PSCB_PRECREATE = (2);
int PSNRET_NOERROR = (0);
int PSNRET_INVALID_NOCHANGEPAGE = (2);
int PSBTN_APPLYNOW = (4);
int PSBTN_BACK = (0);
int PSBTN_CANCEL = (5);
int PSBTN_FINISH = (2);
int PSBTN_HELP = (6);
int PSBTN_NEXT = (1);
int PSBTN_OK = (3);
int PSWIZB_BACK = (1);
int PSWIZB_NEXT = (2);
int PSWIZB_FINISH = (4);
int PSWIZB_DISABLEDFINISH = (8);
int ID_PSREBOOTSYSTEM = (3);
int ID_PSRESTARTWINDOWS = (2);
int WIZ_BODYCX = (184);
int WIZ_BODYX = (92);
int WIZ_CXBMP = (80);
int WIZ_CXDLG = (276);
int WIZ_CYDLG = (140);
char* VS_FILE_INFO = cast(char*) ((16));
int VS_VERSION_INFO = (1);
int VS_FF_DEBUG = (0x1);
int VS_FF_INFOINFERRED = (0x10);
int VS_FF_PATCHED = (0x4);
int VS_FF_PRERELEASE = (0x2);
int VS_FF_PRIVATEBUILD = (0x8);
int VS_FF_SPECIALBUILD = (0x20);
int VOS_UNKNOWN = (0);
int VOS_DOS = (0x10000);
int VOS_OS216 = (0x20000);
int VOS_OS232 = (0x30000);
int VOS_NT = (0x40000);
int VOS_DOS_WINDOWS16 = (0x10001);
int VOS_DOS_WINDOWS32 = (0x10004);
int VOS_OS216_PM16 = (0x20002);
int VOS_OS232_PM32 = (0x30003);
int VOS_NT_WINDOWS32 = (0x40004);
int VFT_UNKNOWN = (0);
int VFT_APP = (0x1);
int VFT_DLL = (0x2);
int VFT_DRV = (0x3);
int VFT_FONT = (0x4);
int VFT_VXD = (0x5);
int VFT_STATIC_LIB = (0x7);
int VFT2_UNKNOWN = (0);
int VFT2_DRV_PRINTER = (0x1);
int VFT2_DRV_KEYBOARD = (0x2);
int VFT2_DRV_LANGUAGE = (0x3);
int VFT2_DRV_DISPLAY = (0x4);
int VFT2_DRV_MOUSE = (0x5);
int VFT2_DRV_NETWORK = (0x6);
int VFT2_DRV_SYSTEM = (0x7);
int VFT2_DRV_INSTALLABLE = (0x8);
int VFT2_DRV_SOUND = (0x9);
int VFT2_FONT_RASTER = (0x1);
int VFT2_FONT_VECTOR = (0x2);
int VFT2_FONT_TRUETYPE = (0x3);
int PAN_ANY = (0);
int PAN_NO_FIT = (1);
int PAN_FAMILY_TEXT_DISPLAY = (2);
int PAN_FAMILY_SCRIPT = (3);
int PAN_FAMILY_DECORATIVE = (4);
int PAN_FAMILY_PICTORIAL = (5);
int PAN_SERIF_COVE = (2);
int PAN_SERIF_OBTUSE_COVE = (3);
int PAN_SERIF_SQUARE_COVE = (4);
int PAN_SERIF_OBTUSE_SQUARE_COVE = (5);
int PAN_SERIF_SQUARE = (6);
int PAN_SERIF_THIN = (7);
int PAN_SERIF_BONE = (8);
int PAN_SERIF_EXAGGERATED = (9);
int PAN_SERIF_TRIANGLE = (10);
int PAN_SERIF_NORMAL_SANS = (11);
int PAN_SERIF_OBTUSE_SANS = (12);
int PAN_SERIF_PERP_SANS = (13);
int PAN_SERIF_FLARED = (14);
int PAN_SERIF_ROUNDED = (15);
int PAN_WEIGHT_VERY_LIGHT = (2);
int PAN_WEIGHT_LIGHT = (3);
int PAN_WEIGHT_THIN = (4);
int PAN_WEIGHT_BOOK = (5);
int PAN_WEIGHT_MEDIUM = (6);
int PAN_WEIGHT_DEMI = (7);
int PAN_WEIGHT_BOLD = (8);
int PAN_WEIGHT_HEAVY = (9);
int PAN_WEIGHT_BLACK = (10);
int PAN_WEIGHT_NORD = (11);
int PAN_PROP_OLD_STYLE = (2);
int PAN_PROP_MODERN = (3);
int PAN_PROP_EVEN_WIDTH = (4);
int PAN_PROP_EXPANDED = (5);
int PAN_PROP_CONDENSED = (6);
int PAN_PROP_VERY_EXPANDED = (7);
int PAN_PROP_VERY_CONDENSED = (8);
int PAN_PROP_MONOSPACED = (9);
int PAN_CONTRAST_NONE = (2);
int PAN_CONTRAST_VERY_LOW = (3);
int PAN_CONTRAST_LOW = (4);
int PAN_CONTRAST_MEDIUM_LOW = (5);
int PAN_CONTRAST_MEDIUM = (6);
int PAN_CONTRAST_MEDIUM_HIGH = (7);
int PAN_CONTRAST_HIGH = (8);
int PAN_CONTRAST_VERY_HIGH = (9);
int PAN_STROKE_GRADUAL_DIAG = (2);
int PAN_STROKE_GRADUAL_TRAN = (3);
int PAN_STROKE_GRADUAL_VERT = (4);
int PAN_STROKE_GRADUAL_HORZ = (5);
int PAN_STROKE_RAPID_VERT = (6);
int PAN_STROKE_RAPID_HORZ = (7);
int PAN_STROKE_INSTANT_VERT = (8);
int PAN_STRAIGHT_ARMS_HORZ = (2);
int PAN_STRAIGHT_ARMS_WEDGE = (3);
int PAN_STRAIGHT_ARMS_VERT = (4);
int PAN_STRAIGHT_ARMS_SINGLE_SERIF = (5);
int PAN_STRAIGHT_ARMS_DOUBLE_SERIF = (6);
int PAN_BENT_ARMS_HORZ = (7);
int PAN_BENT_ARMS_VERT = (9);
int PAN_BENT_ARMS_WEDGE = (8);
int PAN_BENT_ARMS_SINGLE_SERIF = (10);
int PAN_BENT_ARMS_DOUBLE_SERIF = (11);
int PAN_LETT_NORMAL_CONTACT = (2);
int PAN_LETT_NORMAL_WEIGHTED = (3);
int PAN_LETT_NORMAL_BOXED = (4);
int PAN_LETT_NORMAL_FLATTENED = (5);
int PAN_LETT_NORMAL_ROUNDED = (6);
int PAN_LETT_NORMAL_OFF_CENTER = (7);
int PAN_LETT_NORMAL_SQUARE = (8);
int PAN_LETT_OBLIQUE_CONTACT = (9);
int PAN_LETT_OBLIQUE_WEIGHTED = (10);
int PAN_LETT_OBLIQUE_BOXED = (11);
int PAN_LETT_OBLIQUE_FLATTENED = (12);
int PAN_LETT_OBLIQUE_ROUNDED = (13);
int PAN_LETT_OBLIQUE_OFF_CENTER = (14);
int PAN_LETT_OBLIQUE_SQUARE = (15);
int PAN_MIDLINE_STANDARD_TRIMMED = (2);
int PAN_MIDLINE_STANDARD_POINTED = (3);
int PAN_MIDLINE_STANDARD_SERIFED = (4);
int PAN_MIDLINE_HIGH_TRIMMED = (5);
int PAN_MIDLINE_HIGH_POINTED = (6);
int PAN_MIDLINE_HIGH_SERIFED = (7);
int PAN_MIDLINE_CONSTANT_TRIMMED = (8);
int PAN_MIDLINE_CONSTANT_POINTED = (9);
int PAN_MIDLINE_CONSTANT_SERIFED = (10);
int PAN_MIDLINE_LOW_TRIMMED = (11);
int PAN_MIDLINE_LOW_POINTED = (12);
int PAN_MIDLINE_LOW_SERIFED = (13);
int PAN_XHEIGHT_CONSTANT_SMALL = (2);
int PAN_XHEIGHT_CONSTANT_STD = (3);
int PAN_XHEIGHT_CONSTANT_LARGE = (4);
int PAN_XHEIGHT_DUCKING_SMALL = (5);
int PAN_XHEIGHT_DUCKING_STD = (6);
int PAN_XHEIGHT_DUCKING_LARGE = (7);
int PC_EXPLICIT = (2);
int PC_NOCOLLAPSE = (4);
int PC_RESERVED = (1);
int BS_DIBPATTERN = (5);
int BS_DIBPATTERN8X8 = (8);
int BS_DIBPATTERNPT = (6);
int BS_HATCHED = (2);
int BS_HOLLOW = (1);
int BS_NULL = (1);
int BS_PATTERN = (3);
int BS_PATTERN8X8 = (7);
int BS_SOLID = (0);
int DM_ORIENTATION = (0x1);
int DM_PAPERSIZE = (0x2);
int DM_PAPERLENGTH = (0x4);
int DM_PAPERWIDTH = (0x8);
int DM_SCALE = (0x10);
int DM_COPIES = (0x100);
int DM_DEFAULTSOURCE = (0x200);
int DM_PRINTQUALITY = (0x400);
int DM_COLOR = (0x800);
int DM_DUPLEX = (0x1000);
int DM_YRESOLUTION = (0x2000);
int DM_TTOPTION = (0x4000);
int DM_COLLATE = (0x8000);
int DM_FORMNAME = (0x10000);
int DM_LOGPIXELS = (0x20000);
int DM_ICMMETHOD = (0x800000);
int DM_ICMINTENT = (0x1000000);
int DM_MEDIATYPE = (0x2000000);
int DM_DITHERTYPE = (0x4000000);
int DMORIENT_LANDSCAPE = (2);
int DMORIENT_PORTRAIT = (1);
int DMPAPER_LETTER = (1);
int DMPAPER_LEGAL = (5);
int DMPAPER_A4 = (9);
int DMPAPER_CSHEET = (24);
int DMPAPER_DSHEET = (25);
int DMPAPER_ESHEET = (26);
int DMPAPER_LETTERSMALL = (2);
int DMPAPER_TABLOID = (3);
int DMPAPER_LEDGER = (4);
int DMPAPER_STATEMENT = (6);
int DMPAPER_EXECUTIVE = (7);
int DMPAPER_A3 = (8);
int DMPAPER_A4SMALL = (10);
int DMPAPER_A5 = (11);
int DMPAPER_B4 = (12);
int DMPAPER_B5 = (13);
int DMPAPER_FOLIO = (14);
int DMPAPER_QUARTO = (15);
int DMPAPER_10X14 = (16);
int DMPAPER_11X17 = (17);
int DMPAPER_NOTE = (18);
int DMPAPER_ENV_9 = (19);
int DMPAPER_ENV_10 = (20);
int DMPAPER_ENV_11 = (21);
int DMPAPER_ENV_12 = (22);
int DMPAPER_ENV_14 = (23);
int DMPAPER_ENV_DL = (27);
int DMPAPER_ENV_C5 = (28);
int DMPAPER_ENV_C3 = (29);
int DMPAPER_ENV_C4 = (30);
int DMPAPER_ENV_C6 = (31);
int DMPAPER_ENV_C65 = (32);
int DMPAPER_ENV_B4 = (33);
int DMPAPER_ENV_B5 = (34);
int DMPAPER_ENV_B6 = (35);
int DMPAPER_ENV_ITALY = (36);
int DMPAPER_ENV_MONARCH = (37);
int DMPAPER_ENV_PERSONAL = (38);
int DMPAPER_FANFOLD_US = (39);
int DMPAPER_FANFOLD_STD_GERMAN = (40);
int DMPAPER_FANFOLD_LGL_GERMAN = (41);
int DMRES_HIGH = -((4));
int DMRES_MEDIUM = -((3));
int DMRES_LOW = -((2));
int DMRES_DRAFT = -((1));
int DMCOLOR_COLOR = (2);
int DMCOLOR_MONOCHROME = (1);
int DMDUP_SIMPLEX = (1);
int DMDUP_HORIZONTAL = (3);
int DMDUP_VERTICAL = (2);
int DMTT_BITMAP = (1);
int DMTT_DOWNLOAD = (2);
int DMTT_SUBDEV = (3);
int DMCOLLATE_TRUE = (1);
int DMCOLLATE_FALSE = (0);
int DM_GRAYSCALE = (1);
int DM_INTERLACED = (2);
int DMICMMETHOD_NONE = (1);
int DMICMMETHOD_SYSTEM = (2);
int DMICMMETHOD_DRIVER = (3);
int DMICMMETHOD_DEVICE = (4);
int DMICMMETHOD_USER = (256);
int DMICM_SATURATE = (1);
int DMICM_CONTRAST = (2);
int DMICM_COLORMETRIC = (3);
int DMICM_USER = (256);
int DMMEDIA_STANDARD = (1);
int DMMEDIA_GLOSSY = (3);
int DMMEDIA_TRANSPARENCY = (2);
int DMMEDIA_USER = (256);
int DMDITHER_NONE = (1);
int DMDITHER_COARSE = (2);
int DMDITHER_FINE = (3);
int DMDITHER_LINEART = (4);
int DMDITHER_GRAYSCALE = (10);
int DMDITHER_USER = (256);
int RDH_RECTANGLES = (1);
int TT_POLYGON_TYPE = (24);
int TT_PRIM_LINE = (1);
int TT_PRIM_QSPLINE = (2);
int GCPCLASS_ARABIC = (2);
int GCPCLASS_HEBREW = (2);
int GCPCLASS_LATIN = (1);
int GCPCLASS_LATINNUMBER = (5);
int GCPCLASS_LOCALNUMBER = (4);
int GCPCLASS_LATINNUMERICSEPARATOR = (7);
int GCPCLASS_LATINNUMERICTERMINATOR = (6);
int GCPCLASS_NEUTRAL = (3);
int GCPCLASS_NUMERICSEPARATOR = (8);
int GCPCLASS_PREBOUNDLTR = (128);
int GCPCLASS_PREBOUNDRTL = (64);
int GCPCLASS_POSTBOUNDLTR = (32);
int GCPCLASS_POSTBOUNDRTL = (16);
int GCPGLYPH_LINKBEFORE = (32768);
int GCPGLYPH_LINKAFTER = (16384);
int TT_AVAILABLE = (1);
int TT_ENABLED = (2);
int CA_NEGATIVE = (1);
int CA_LOG_FILTER = (2);
int ILLUMINANT_DEVICE_DEFAULT = (0);
int ILLUMINANT_A = (1);
int ILLUMINANT_B = (2);
int ILLUMINANT_C = (3);
int ILLUMINANT_D50 = (4);
int ILLUMINANT_D55 = (5);
int ILLUMINANT_D65 = (6);
int ILLUMINANT_D75 = (7);
int ILLUMINANT_F2 = (8);
int ILLUMINANT_TUNGSTEN = (1);
int ILLUMINANT_DAYLIGHT = (3);
int ILLUMINANT_FLUORESCENT = (8);
int ILLUMINANT_NTSC = (3);
int DI_APPBANDING = (1);
int EMR_HEADER = (1);
int ENHMETA_SIGNATURE = (1179469088);
int ENM_CHANGE = (1);
int ENM_CORRECTTEXT = (4194304);
int ENM_DROPFILES = (1048576);
int ENM_KEYEVENTS = (65536);
int ENM_MOUSEEVENTS = (131072);
int ENM_PROTECTED = (2097152);
int ENM_REQUESTRESIZE = (262144);
int ENM_SCROLL = (4);
int ENM_SELCHANGE = (524288);
int ENM_UPDATE = (2);
int ENM_NONE = (0);
int ES_DISABLENOSCROLL = (8192);
int ES_EX_NOCALLOLEINIT = (16777216);
int ES_NOIME = (524288);
int ES_SAVESEL = (32768);
int ES_SELFIME = (262144);
int ES_SUNKEN = (16384);
int ES_VERTICAL = (4194304);
int ES_SELECTIONBAR = (16777216);
int ECOOP_SET = (1);
int ECOOP_OR = (2);
int ECOOP_AND = (3);
int ECOOP_XOR = (4);
int ECO_AUTOWORDSELECTION = (1);
int ECO_AUTOVSCROLL = (64);
int ECO_AUTOHSCROLL = (128);
int ECO_NOHIDESEL = (256);
int ECO_READONLY = (2048);
int ECO_WANTRETURN = (4096);
int ECO_SAVESEL = (32768);
int ECO_SELECTIONBAR = (16777216);
int ECO_VERTICAL = (4194304);
int SCF_WORD = (2);
int SCF_SELECTION = (1);
int SF_TEXT = (1);
int SF_RTF = (2);
int SF_RTFNOOBJS = (3);
int SF_TEXTIZED = (4);
int SFF_SELECTION = (32768);
int SFF_PLAINRTF = (16384);
int WB_CLASSIFY = (3);
int WB_LEFTBREAK = (6);
int WB_PREVBREAK = (6);
int WB_MOVEWORDLEFT = (4);
int WB_MOVEWORDPREV = (4);
int WB_MOVEWORDRIGHT = (5);
int WB_MOVEWORDNEXT = (5);
int WB_RIGHTBREAK = (7);
int WB_NEXTBREAK = (7);
int PC_LEADING = (2);
int PC_FOLLOWING = (1);
int PC_DELIMITER = (4);
int PC_OVERFLOW = (3);
int WBF_WORDWRAP = (16);
int WBF_WORDBREAK = (32);
int WBF_OVERFLOW = (64);
int WBF_LEVEL1 = (128);
int WBF_LEVEL2 = (256);
int WBF_CUSTOM = (512);
int WBF_BREAKAFTER = (64);
int WBF_BREAKLINE = (32);
int WBF_ISWHITE = (16);
int CFM_BOLD = (1);
int CFM_COLOR = (1073741824);
int CFM_FACE = (536870912);
int CFM_ITALIC = (2);
int CFM_OFFSET = (268435456);
int CFM_PROTECTED = (16);
int CFM_SIZE = (0x80000000);
int CFM_STRIKEOUT = (8);
int CFM_UNDERLINE = (4);
int CFE_AUTOCOLOR = (1073741824);
int CFE_BOLD = (1);
int CFE_ITALIC = (2);
int CFE_STRIKEOUT = (8);
int CFE_UNDERLINE = (4);
int CFE_PROTECTED = (16);
int PFM_ALIGNMENT = (8);
int PFM_NUMBERING = (32);
int PFM_OFFSET = (4);
int PFM_OFFSETINDENT = (0x80000000);
int PFM_RIGHTINDENT = (2);
int PFM_STARTINDENT = (1);
int PFM_TABSTOPS = (16);
int PFN_BULLET = (1);
int PFA_LEFT = (1);
int PFA_RIGHT = (2);
int PFA_CENTER = (3);
int SEL_EMPTY = (0);
int SEL_TEXT = (1);
int SEL_OBJECT = (2);
int SEL_MULTICHAR = (4);
int SEL_MULTIOBJECT = (8);
char* CF_RTF = ("Rich Text Format");
char* CF_RETEXTOBJ = ("RichEdit Text and Objects");
int ODT_BUTTON = (4);
int ODT_COMBOBOX = (3);
int ODT_LISTBOX = (2);
int ODT_LISTVIEW = (102);
int ODT_MENU = (1);
int ODT_STATIC = (5);
int ODT_TAB = (101);
int ODT_HEADER = (100);
int ODA_DRAWENTIRE = (1);
int ODA_FOCUS = (4);
int ODA_SELECT = (2);
int ODS_CHECKED = (8);
int ODS_COMBOBOXEDIT = (4096);
int ODS_DEFAULT = (32);
int ODS_DISABLED = (4);
int ODS_FOCUS = (16);
int ODS_GRAYED = (2);
int ODS_SELECTED = (1);
char* ANIMATE_CLASSW = ("SysAnimate32");
char* HOTKEY_CLASSW = ("msctls_hotkey32");
char* PROGRESS_CLASSW = ("msctls_progress32");
char* STATUSCLASSNAMEW = ("msctls_statusbar32");
char* TOOLBARCLASSNAMEW = ("ToolbarWindow32");
char* TOOLTIPS_CLASSW = ("tooltips_class32");
char* TRACKBAR_CLASSW = ("msctls_trackbar32");
char* UPDOWN_CLASSW = ("msctls_updown32");
char* WC_HEADERW = ("SysHeader32");
char* WC_LISTVIEWW = ("SysListView32");
char* WC_TABCONTROLW = ("SysTabControl32");
char* WC_TREEVIEWW = ("SysTreeView32");
int CCS_ADJUSTABLE = (0x20);
int CCS_BOTTOM = (0x3);
int CCS_NODIVIDER = (0x40);
int CCS_NOMOVEY = (0x2);
int CCS_NOPARENTALIGN = (0x8);
int CCS_NORESIZE = (0x4);
int CCS_TOP = (0x1);
char* ANIMATE_CLASSA = ("SysAnimate32");
char* HOTKEY_CLASSA = ("msctls_hotkey32");
char* PROGRESS_CLASSA = ("msctls_progress32");
char* STATUSCLASSNAMEA = ("msctls_statusbar32");
char* TOOLBARCLASSNAMEA = ("ToolbarWindow32");
char* TOOLTIPS_CLASSA = ("tooltips_class32");
char* TRACKBAR_CLASSA = ("msctls_trackbar32");
char* UPDOWN_CLASSA = ("msctls_updown32");
char* WC_HEADERA = ("SysHeader32");
char* WC_LISTVIEWA = ("SysListView32");
char* WC_TABCONTROLA = ("SysTabControl32");
char* WC_TREEVIEWA = ("SysTreeView32");
char* ANIMATE_CLASS = (ANIMATE_CLASSA);
char* HOTKEY_CLASS = (HOTKEY_CLASSA);
char* PROGRESS_CLASS = (PROGRESS_CLASSA);
char* STATUSCLASSNAME = (STATUSCLASSNAMEA);
char* TOOLBARCLASSNAME = (TOOLBARCLASSNAMEA);
char* TOOLTIPS_CLASS = (TOOLTIPS_CLASSA);
char* TRACKBAR_CLASS = (TRACKBAR_CLASSA);
char* UPDOWN_CLASS = (UPDOWN_CLASSA);
char* WC_HEADER = (WC_HEADERA);
char* WC_LISTVIEW = (WC_LISTVIEWA);
char* WC_TABCONTROL = (WC_TABCONTROLA);
char* WC_TREEVIEW = (WC_TREEVIEWA);
int HDS_BUTTONS = (2);
int HDS_HIDDEN = (8);
int HDS_HORZ = (0);
int HDI_BITMAP = (16);
int HDI_FORMAT = (4);
int HDI_HEIGHT = (1);
int HDI_LPARAM = (8);
int HDI_TEXT = (2);
int HDI_WIDTH = (1);
int HDF_CENTER = (2);
int HDF_LEFT = (0);
int HDF_RIGHT = (1);
int HDF_RTLREADING = (4);
int HDF_BITMAP = (8192);
int HDF_OWNERDRAW = (32768);
int HDF_STRING = (16384);
int HDF_JUSTIFYMASK = (3);
int HHT_NOWHERE = (1);
int HHT_ONDIVIDER = (4);
int HHT_ONDIVOPEN = (8);
int HHT_ONHEADER = (2);
int HHT_TOLEFT = (2048);
int HHT_TORIGHT = (1024);
int HINST_COMMCTRL = -(1);
int IDB_STD_LARGE_COLOR = (1);
int IDB_STD_SMALL_COLOR = (0);
int IDB_VIEW_LARGE_COLOR = (5);
int IDB_VIEW_SMALL_COLOR = (4);
int STD_COPY = (1);
int STD_CUT = (0);
int STD_DELETE = (5);
int STD_FILENEW = (6);
int STD_FILEOPEN = (7);
int STD_FILESAVE = (8);
int STD_FIND = (12);
int STD_HELP = (11);
int STD_PASTE = (2);
int STD_PRINT = (14);
int STD_PRINTPRE = (9);
int STD_PROPERTIES = (10);
int STD_REDOW = (4);
int STD_REPLACE = (13);
int STD_UNDO = (3);
int VIEW_LARGEICONS = (0);
int VIEW_SMALLICONS = (1);
int VIEW_LIST = (2);
int VIEW_DETAILS = (3);
int VIEW_SORTNAME = (4);
int VIEW_SORTSIZE = (5);
int VIEW_SORTDATE = (6);
int VIEW_SORTTYPE = (7);
int TBSTYLE_ALTDRAG = (1024);
int TBSTYLE_TOOLTIPS = (256);
int TBSTYLE_WRAPABLE = (512);
int TBSTYLE_BUTTON = (0);
int TBSTYLE_CHECK = (2);
int TBSTYLE_CHECKGROUP = (6);
int TBSTYLE_GROUP = (4);
int TBSTYLE_SEP = (1);
int TBSTATE_CHECKED = (1);
int TBSTATE_ENABLED = (4);
int TBSTATE_HIDDEN = (8);
int TBSTATE_INDETERMINATE = (16);
int TBSTATE_PRESSED = (2);
int TBSTATE_WRAP = (32);
int TTS_ALWAYSTIP = (1);
int TTS_NOPREFIX = (2);
int TTF_IDISHWND = (1);
int TTF_CENTERTIP = (2);
int TTF_RTLREADING = (4);
int TTF_SUBCLASS = (16);
int TTDT_AUTOMATIC = (0);
int TTDT_AUTOPOP = (2);
int TTDT_INITIAL = (3);
int TTDT_RESHOW = (1);
int SBARS_SIZEGRIP = (256);
int DL_MOVECURSOR = (3);
int DL_COPYCURSOR = (2);
int DL_STOPCURSOR = (1);
int UDS_ALIGNLEFT = (8);
int UDS_ALIGNRIGHT = (4);
int UDS_ARROWKEYS = (32);
int UDS_AUTOBUDDY = (16);
int UDS_HORZ = (64);
int UDS_NOTHOUSANDS = (128);
int UDS_SETBUDDYINT = (2);
int UDS_WRAP = (1);
int UD_MAXVAL = (32767);
int UD_MINVAL = -((32767));
int HOTKEYF_ALT = (4);
int HOTKEYF_CONTROL = (2);
int HOTKEYF_EXT = (8);
int HOTKEYF_SHIFT = (1);
int HKCOMB_A = (8);
int HKCOMB_C = (4);
int HKCOMB_CA = (64);
int HKCOMB_NONE = (1);
int HKCOMB_S = (2);
int HKCOMB_SA = (32);
int HKCOMB_SC = (16);
int HKCOMB_SCA = (128);
int TBS_HORZ = (0);
int TBS_VERT = (2);
int TBS_AUTOTICKS = (1);
int TBS_NOTICKS = (16);
int TBS_TOP = (4);
int TBS_BOTTOM = (0);
int TBS_LEFT = (4);
int TBS_RIGHT = (0);
int TBS_BOTH = (8);
int TBS_ENABLESELRANGE = (32);
int TBS_FIXEDLENGTH = (64);
int TBS_NOTHUMB = (128);
int TB_BOTTOM = (7);
int TB_ENDTRACK = (8);
int TB_LINEDOWN = (1);
int TB_LINEUP = (0);
int TB_PAGEDOWN = (3);
int TB_PAGEUP = (2);
int TB_THUMBPOSITION = (4);
int TB_THUMBTRACK = (5);
int TB_TOP = (6);
int LVS_ALIGNLEFT = (2048);
int LVS_ALIGNTOP = (0);
int LVS_AUTOARRANGE = (256);
int LVS_EDITLABELS = (512);
int LVS_ICON = (0);
int LVS_LIST = (3);
int LVS_NOCOLUMNHEADER = (16384);
int LVS_NOLABELWRAP = (128);
int LVS_NOSCROLL = (8192);
int LVS_NOSORTHEADER = (32768);
int LVS_OWNERDRAWFIXED = (1024);
int LVS_REPORT = (1);
int LVS_SHAREIMAGELISTS = (64);
int LVS_SHOWSELALWAYS = (8);
int LVS_SINGLESEL = (4);
int LVS_SMALLICON = (2);
int LVS_SORTASCENDING = (16);
int LVS_SORTDESCENDING = (32);
int LVS_TYPESTYLEMASK = (64512);
int LVSIL_NORMAL = (0);
int LVSIL_SMALL = (1);
int LVSIL_STATE = (2);
int LVIS_CUT = (4);
int LVIS_DROPHILITED = (8);
int LVIS_FOCUSED = (1);
int LVIS_SELECTED = (2);
int LVIS_OVERLAYMASK = (3840);
int LVIS_STATEIMAGEMASK = (61440);
wchar* LPSTR_TEXTCALLBACKW = cast(LPWSTR)(-(1));
char* LPSTR_TEXTCALLBACKA = cast(LPSTR)(-(1));
char* LPSTR_TEXTCALLBACK = (LPSTR_TEXTCALLBACKA);
int LVIF_TEXT = (1);
int LVIF_IMAGE = (2);
int LVIF_PARAM = (4);
int LVIF_STATE = (8);
int LVIF_DI_SETITEM = (4096);
int LVNI_ABOVE = (256);
int LVNI_ALL = (0);
int LVNI_BELOW = (512);
int LVNI_TOLEFT = (1024);
int LVNI_TORIGHT = (2048);
int LVNI_CUT = (4);
int LVNI_DROPHILITED = (8);
int LVNI_FOCUSED = (1);
int LVNI_SELECTED = (2);
int LVFI_PARAM = (1);
int LVFI_PARTIAL = (8);
int LVFI_STRING = (2);
int LVFI_WRAP = (32);
int LVFI_NEARESTXY = (64);
int LVHT_ABOVE = (8);
int LVHT_BELOW = (16);
int LVHT_NOWHERE = (1);
int LVHT_ONITEMICON = (2);
int LVHT_ONITEMLABEL = (4);
int LVHT_ONITEMSTATEICON = (8);
int LVHT_TOLEFT = (64);
int LVHT_TORIGHT = (32);
int LVCF_FMT = (1);
int LVCF_SUBITEM = (8);
int LVCF_TEXT = (4);
int LVCF_WIDTH = (2);
int LVCFMT_CENTER = (2);
int LVCFMT_LEFT = (0);
int LVCFMT_RIGHT = (1);
int LVIR_BOUNDS = (0);
int LVIR_ICON = (1);
int LVIR_LABEL = (2);
int LVIR_SELECTBOUNDS = (3);
int LVA_ALIGNLEFT = (1);
int LVA_ALIGNTOP = (2);
int LVA_DEFAULT = (0);
int LVA_SNAPTOGRID = (5);
int LVSCW_AUTOSIZE = -((1));
int LVSCW_AUTOSIZE_USEHEADER = -((2));
int TVS_DISABLEDRAGDROP = (16);
int TVS_EDITLABELS = (8);
int TVS_HASBUTTONS = (1);
int TVS_HASLINES = (2);
int TVS_LINESATROOT = (4);
int TVS_SHOWSELALWAYS = (32);
int TVIS_BOLD = (16);
int TVIS_CUT = (4);
int TVIS_DROPHILITED = (8);
int TVIS_EXPANDED = (32);
int TVIS_EXPANDEDONCE = (64);
int TVIS_FOCUSED = (1);
int TVIS_OVERLAYMASK = (3840);
int TVIS_SELECTED = (2);
int TVIS_STATEIMAGEMASK = (61440);
int TVIS_USERMASK = (61440);
int TVIF_CHILDREN = (64);
int TVIF_HANDLE = (16);
int TVIF_IMAGE = (2);
int TVIF_PARAM = (4);
int TVIF_SELECTEDIMAGE = (32);
int TVIF_STATE = (8);
int TVIF_TEXT = (1);
int I_CHILDRENCALLBACK = -((1));
int I_IMAGECALLBACK = -((1));
}

struct TREEITEM
{
}

alias TREEITEM* HTREEITEM;
alias TREEITEM TTREEITEM;
alias TREEITEM* PTREEITEM;
const{
int TVI_ROOT = (0xFFFF0000);
int TVI_FIRST = (0xFFFF0001);
int TVI_LAST = (0xFFFF0002);
int TVI_SORT = (0xFFFF0003);
int TVHT_ABOVE = (256);
int TVHT_BELOW = (512);
int TVHT_NOWHERE = (1);
int TVHT_ONITEM = (70);
int TVHT_ONITEMBUTTON = (16);
int TVHT_ONITEMICON = (2);
int TVHT_ONITEMINDENT = (8);
int TVHT_ONITEMLABEL = (4);
int TVHT_ONITEMRIGHT = (32);
int TVHT_ONITEMSTATEICON = (64);
int TVHT_TOLEFT = (2048);
int TVHT_TORIGHT = (1024);
int TVE_COLLAPSE = (1);
int TVE_COLLAPSERESET = (32768);
int TVE_EXPAND = (2);
int TVE_TOGGLE = (3);
int TVSIL_NORMAL = (0);
int TVSIL_STATE = (2);
int TVGN_CARET = (9);
int TVGN_CHILD = (4);
int TVGN_DROPHILITE = (8);
int TVGN_FIRSTVISIBLE = (5);
int TVGN_NEXT = (1);
int TVGN_NEXTVISIBLE = (6);
int TVGN_PARENT = (3);
int TVGN_PREVIOUS = (2);
int TVGN_PREVIOUSVISIBLE = (7);
int TVGN_ROOT = (0);
int TVC_BYKEYBOARD = (2);
int TVC_BYMOUSE = (1);
int TVC_UNKNOWN = (0);
int TCS_BUTTONS = (256);
int TCS_FIXEDWIDTH = (1024);
int TCS_FOCUSNEVER = (32768);
int TCS_FOCUSONBUTTONDOWN = (4096);
int TCS_FORCEICONLEFT = (16);
int TCS_FORCELABELLEFT = (32);
int TCS_MULTILINE = (512);
int TCS_OWNERDRAWFIXED = (8192);
int TCS_RAGGEDRIGHT = (2048);
int TCS_RIGHTJUSTIFY = (0);
int TCS_SINGLELINE = (0);
int TCS_TABS = (0);
int TCS_TOOLTIPS = (16384);
int TCIF_TEXT = (1);
int TCIF_IMAGE = (2);
int TCIF_PARAM = (8);
int TCIF_RTLREADING = (4);
int TCHT_NOWHERE = (1);
int TCHT_ONITEM = (6);
int TCHT_ONITEMICON = (2);
int TCHT_ONITEMLABEL = (4);
int ACS_AUTOPLAY = (4);
int ACS_CENTER = (1);
int ACS_TRANSPARENT = (2);
int DIALOPTION_BILLING = (64);
int DIALOPTION_QUIET = (128);
int DIALOPTION_DIALTONE = (256);
int MDMVOLFLAG_LOW = (1);
int MDMVOLFLAG_MEDIUM = (2);
int MDMVOLFLAG_HIGH = (4);
int MDMVOL_LOW = (0);
int MDMVOL_MEDIUM = (1);
int MDMVOL_HIGH = (2);
int MDMSPKRFLAG_OFF = (1);
int MDMSPKRFLAG_DIAL = (2);
int MDMSPKRFLAG_ON = (4);
int MDMSPKRFLAG_CALLSETUP = (8);
int MDMSPKR_OFF = (0);
int MDMSPKR_DIAL = (1);
int MDMSPKR_ON = (2);
int MDMSPKR_CALLSETUP = (3);
int MDM_BLIND_DIAL = (512);
int MDM_CCITT_OVERRIDE = (64);
int MDM_CELLULAR = (8);
int MDM_COMPRESSION = (1);
int MDM_ERROR_CONTROL = (2);
int MDM_FLOWCONTROL_HARD = (16);
int MDM_FLOWCONTROL_SOFT = (32);
int MDM_FORCED_EC = (4);
int MDM_SPEED_ADJUST = (128);
int MDM_TONE_DIAL = (256);
int MDM_V23_OVERRIDE = (1024);
int LANG_BULGARIAN = (2);
int LANG_CHINESE = (4);
int LANG_CROATIAN = (26);
int LANG_CZECH = (5);
int LANG_DANISH = (6);
int LANG_DUTCH = (19);
int LANG_ENGLISH = (9);
int LANG_FINNISH = (11);
int LANG_FRENCH = (12);
int LANG_GERMAN = (7);
int LANG_GREEK = (8);
int LANG_HUNGARIAN = (14);
int LANG_ICELANDIC = (15);
int LANG_ITALIAN = (16);
int LANG_JAPANESE = (17);
int LANG_KOREAN = (18);
int LANG_NEUTRAL = (0);
int LANG_NORWEGIAN = (20);
int LANG_POLISH = (21);
int LANG_PORTUGUESE = (22);
int LANG_ROMANIAN = (24);
int LANG_RUSSIAN = (25);
int LANG_SLOVAK = (27);
int LANG_SLOVENIAN = (36);
int LANG_SPANISH = (10);
int LANG_SWEDISH = (29);
int LANG_TURKISH = (31);
int SUBLANG_CHINESE_SIMPLIFIED = (2);
int SUBLANG_CHINESE_TRADITIONAL = (1);
int SUBLANG_CHINESE_HONGKONG = (3);
int SUBLANG_CHINESE_SINGAPORE = (4);
int SUBLANG_DEFAULT = (1);
int SUBLANG_DUTCH = (1);
int SUBLANG_DUTCH_BELGIAN = (2);
int SUBLANG_ENGLISH_AUS = (3);
int SUBLANG_ENGLISH_CAN = (4);
int SUBLANG_ENGLISH_EIRE = (6);
int SUBLANG_ENGLISH_NZ = (5);
int SUBLANG_ENGLISH_UK = (2);
int SUBLANG_ENGLISH_US = (1);
int SUBLANG_FRENCH = (1);
int SUBLANG_FRENCH_BELGIAN = (2);
int SUBLANG_FRENCH_CANADIAN = (3);
int SUBLANG_FRENCH_SWISS = (4);
int SUBLANG_GERMAN = (1);
int SUBLANG_GERMAN_AUSTRIAN = (3);
int SUBLANG_GERMAN_SWISS = (2);
int SUBLANG_ITALIAN = (1);
int SUBLANG_ITALIAN_SWISS = (2);
int SUBLANG_NEUTRAL = (0);
int SUBLANG_NORWEGIAN_BOKMAL = (1);
int SUBLANG_NORWEGIAN_NYNORSK = (2);
int SUBLANG_PORTUGUESE = (2);
int SUBLANG_PORTUGUESE_BRAZILIAN = (1);
int SUBLANG_SPANISH = (1);
int SUBLANG_SPANISH_MEXICAN = (2);
int SUBLANG_SPANISH_MODERN = (3);
int SUBLANG_SYS_DEFAULT = (2);
int NLS_VALID_LOCALE_MASK = (1048575);
int SORT_DEFAULT = (0);
int SORT_JAPANESE_XJIS = (0);
int SORT_JAPANESE_UNICODE = (1);
int SORT_CHINESE_BIG5 = (0);
int SORT_CHINESE_UNICODE = (1);
int SORT_KOREAN_KSC = (0);
int SORT_KOREAN_UNICODE = (1);
int PROCESSOR_INTEL_386 = (386);
int PROCESSOR_INTEL_486 = (486);
int PROCESSOR_INTEL_PENTIUM = (586);
int PROCESSOR_MIPS_R4000 = (4000);
int PROCESSOR_ALPHA_21064 = (21064);
int COMPRESSION_FORMAT_NONE = (0);
int COMPRESSION_FORMAT_DEFAULT = (1);
int COMPRESSION_FORMAT_LZNT1 = (2);
int TAPE_DRIVE_COMPRESSION = (131072);
int TAPE_DRIVE_ECC = (65536);
int TAPE_DRIVE_ERASE_BOP_ONLY = (64);
int TAPE_DRIVE_ERASE_LONG = (32);
int TAPE_DRIVE_ERASE_IMMEDIATE = (128);
int TAPE_DRIVE_ERASE_SHORT = (16);
int TAPE_DRIVE_FIXED = (1);
int TAPE_DRIVE_FIXED_BLOCK = (1024);
int TAPE_DRIVE_INITIATOR = (4);
int TAPE_DRIVE_PADDING = (262144);
int TAPE_DRIVE_GET_ABSOLUTE_BLK = (1048576);
int TAPE_DRIVE_GET_LOGICAL_BLK = (2097152);
int TAPE_DRIVE_REPORT_SMKS = (524288);
int TAPE_DRIVE_SELECT = (2);
int TAPE_DRIVE_SET_EOT_WZ_SIZE = (4194304);
int TAPE_DRIVE_TAPE_CAPACITY = (256);
int TAPE_DRIVE_TAPE_REMAINING = (512);
int TAPE_DRIVE_VARIABLE_BLOCK = (2048);
int TAPE_DRIVE_WRITE_PROTECT = (4096);
int TAPE_DRIVE_ABS_BLK_IMMED = -((2147475456));
int TAPE_DRIVE_ABSOLUTE_BLK = -((2147479552));
int TAPE_DRIVE_END_OF_DATA = -((2147418112));
int TAPE_DRIVE_FILEMARKS = -((2147221504));
int TAPE_DRIVE_LOAD_UNLOAD = -((2147483647));
int TAPE_DRIVE_LOAD_UNLD_IMMED = -((2147483616));
int TAPE_DRIVE_LOCK_UNLOCK = -((2147483644));
int TAPE_DRIVE_LOCK_UNLK_IMMED = -((2147483520));
int TAPE_DRIVE_LOG_BLK_IMMED = -((2147450880));
int TAPE_DRIVE_LOGICAL_BLK = -((2147467264));
int TAPE_DRIVE_RELATIVE_BLKS = -((2147352576));
int TAPE_DRIVE_REVERSE_POSITION = -((2143289344));
int TAPE_DRIVE_REWIND_IMMEDIATE = -((2147483640));
int TAPE_DRIVE_SEQUENTIAL_FMKS = -((2146959360));
int TAPE_DRIVE_SEQUENTIAL_SMKS = -((2145386496));
int TAPE_DRIVE_SET_BLOCK_SIZE = -((2147483632));
int TAPE_DRIVE_SET_COMPRESSION = -((2147483136));
int TAPE_DRIVE_SET_ECC = -((2147483392));
int TAPE_DRIVE_SET_PADDING = -((2147482624));
int TAPE_DRIVE_SET_REPORT_SMKS = -((2147481600));
int TAPE_DRIVE_SETMARKS = -((2146435072));
int TAPE_DRIVE_SPACE_IMMEDIATE = -((2139095040));
int TAPE_DRIVE_TENSION = -((2147483646));
int TAPE_DRIVE_TENSION_IMMED = -((2147483584));
int TAPE_DRIVE_WRITE_FILEMARKS = -((2113929216));
int TAPE_DRIVE_WRITE_LONG_FMKS = -((2013265920));
int TAPE_DRIVE_WRITE_MARK_IMMED = -((1879048192));
int TAPE_DRIVE_WRITE_SETMARKS = -((2130706432));
int TAPE_DRIVE_WRITE_SHORT_FMKS = -((2080374784));
int STANDARD_RIGHTS_REQUIRED = (0xf0000);
int STANDARD_RIGHTS_WRITE = (0x20000);
int STANDARD_RIGHTS_READ = (0x20000);
int STANDARD_RIGHTS_EXECUTE = (0x20000);
int STANDARD_RIGHTS_ALL = (0x1f0000);
int SPECIFIC_RIGHTS_ALL = (0xffff);
int MAXIMUM_ALLOWED = (0x2000000);
int GENERIC_ALL = (0x10000000);
int SECURITY_NULL_RID = (0);
int SECURITY_WORLD_RID = (0);
int SECURITY_LOCAL_RID = (0);
int SECURITY_CREATOR_OWNER_RID = (0);
int SECURITY_CREATOR_GROUP_RID = (0x1);
int SECURITY_DIALUP_RID = (0x1);
int SECURITY_NETWORK_RID = (0x2);
int SECURITY_BATCH_RID = (0x3);
int SECURITY_INTERACTIVE_RID = (0x4);
int SECURITY_LOGON_IDS_RID = (0x5);
int SECURITY_LOGON_IDS_RID_COUNT = (0x3);
int SECURITY_SERVICE_RID = (0x6);
int SECURITY_LOCAL_SYSTEM_RID = (0x12);
int SECURITY_BUILTIN_DOMAIN_RID = (0x20);
int DOMAIN_USER_RID_ADMIN = (0x1f4);
int DOMAIN_USER_RID_GUEST = (0x1f5);
int DOMAIN_GROUP_RID_ADMINS = (0x200);
int DOMAIN_GROUP_RID_USERS = (0x201);
int DOMAIN_ALIAS_RID_ADMINS = (0x220);
int DOMAIN_ALIAS_RID_USERS = (0x221);
int DOMAIN_ALIAS_RID_GUESTS = (0x222);
int DOMAIN_ALIAS_RID_POWER_USERS = (0x223);
int DOMAIN_ALIAS_RID_ACCOUNT_OPS = (0x224);
int DOMAIN_ALIAS_RID_SYSTEM_OPS = (0x225);
int DOMAIN_ALIAS_RID_PRINT_OPS = (0x226);
int DOMAIN_ALIAS_RID_BACKUP_OPS = (0x227);
int DOMAIN_ALIAS_RID_REPLICATOR = (0x228);
int SE_GROUP_MANDATORY = (0x1);
int SE_GROUP_ENABLED_BY_DEFAULT = (0x2);
int SE_GROUP_ENABLED = (0x4);
int SE_GROUP_OWNER = (0x8);
int SE_GROUP_LOGON_ID = (0xc0000000);
int ACL_REVISION = (2);
int ACCESS_ALLOWED_ACE_TYPE = (0x0);
int ACCESS_DENIED_ACE_TYPE = (0x1);
int SYSTEM_AUDIT_ACE_TYPE = (0x2);
int SYSTEM_ALARM_ACE_TYPE = (0x3);
int OBJECT_INHERIT_ACE = (0x1);
int CONTAINER_INHERIT_ACE = (0x2);
int NO_PROPAGATE_INHERIT_ACE = (0x4);
int INHERIT_ONLY_ACE = (0x8);
int SUCCESSFUL_ACCESS_ACE_FLAG = (0x40);
int FAILED_ACCESS_ACE_FLAG = (0x80);
int SECURITY_DESCRIPTOR_MIN_LENGTH = (20);
int SE_OWNER_DEFAULTED = (1);
int SE_GROUP_DEFAULTED = (2);
int SE_DACL_PRESENT = (4);
int SE_DACL_DEFAULTED = (8);
int SE_SACL_PRESENT = (16);
int SE_SACL_DEFAULTED = (32);
int SE_SELF_RELATIVE = (32768);
int SE_PRIVILEGE_ENABLED_BY_DEFAULT = (0x1);
int SE_PRIVILEGE_ENABLED = (0x2);
int SE_PRIVILEGE_USED_FOR_ACCESS = (0x80000000);
int PRIVILEGE_SET_ALL_NECESSARY = (0x1);
int OFN_ALLOWMULTISELECT = (0x200);
int OFN_CREATEPROMPT = (0x2000);
int OFN_ENABLEHOOK = (0x20);
int OFN_ENABLETEMPLATE = (0x40);
int OFN_ENABLETEMPLATEHANDLE = (0x80);
int OFN_EXPLORER = (0x80000);
int OFN_EXTENSIONDIFFERENT = (0x400);
int OFN_FILEMUSTEXIST = (0x1000);
int OFN_HIDEREADONLY = (0x4);
int OFN_LONGNAMES = (0x200000);
int OFN_NOCHANGEDIR = (0x8);
int OFN_NODEREFERENCELINKS = (0x100000);
int OFN_NOLONGNAMES = (0x40000);
int OFN_NONETWORKBUTTON = (0x20000);
int OFN_NOREADONLYRETURN = (0x8000);
int OFN_NOTESTFILECREATE = (0x10000);
int OFN_NOVALIDATE = (0x100);
int OFN_OVERWRITEPROMPT = (0x2);
int OFN_PATHMUSTEXIST = (0x800);
int OFN_READONLY = (0x1);
int OFN_SHAREAWARE = (0x4000);
int OFN_SHOWHELP = (0x10);
int OFN_SHAREFALLTHROUGH = (0x2);
int OFN_SHARENOWARN = (0x1);
int OFN_SHAREWARN = (0);
int CDN_INITDONE = (0xfffffda7);
int CDN_SELCHANGE = (0xfffffda6);
int CDN_FOLDERCHANGE = (0xfffffda5);
int CDN_SHAREVIOLATION = (0xfffffda4);
int CDN_HELP = (0xfffffda3);
int CDN_FILEOK = (0xfffffda2);
int CDN_TYPECHANGE = (0xfffffda1);
int CDM_GETFILEPATH = (0x465);
int CDM_GETFOLDERIDLIST = (0x467);
int CDM_GETFOLDERPATH = (0x466);
int CDM_GETSPEC = (0x464);
int CDM_HIDECONTROL = (0x469);
int CDM_SETCONTROLTEXT = (0x468);
int CDM_SETDEFEXT = (0x46a);
int CC_ENABLEHOOK = (0x10);
int CC_ENABLETEMPLATE = (0x20);
int CC_ENABLETEMPLATEHANDLE = (0x40);
int CC_FULLOPEN = (0x2);
int CC_PREVENTFULLOPEN = (0x4);
int CC_RGBINIT = (0x1);
int CC_SHOWHELP = (0x8);
int CC_SOLIDCOLOR = (0x80);
int FR_DIALOGTERM = (0x40);
int FR_DOWN = (0x1);
int FR_ENABLEHOOK = (0x100);
int FR_ENABLETEMPLATE = (0x200);
int FR_ENABLETEMPLATEHANDLE = (0x2000);
int FR_FINDNEXT = (0x8);
int FR_HIDEUPDOWN = (0x4000);
int FR_HIDEMATCHCASE = (0x8000);
int FR_HIDEWHOLEWORD = (0x10000);
int FR_MATCHCASE = (0x4);
int FR_NOMATCHCASE = (0x800);
int FR_NOUPDOWN = (0x400);
int FR_NOWHOLEWORD = (0x1000);
int FR_REPLACE = (0x10);
int FR_REPLACEALL = (0x20);
int FR_SHOWHELP = (0x80);
int FR_WHOLEWORD = (0x2);
int CF_APPLY = (0x200);
int CF_ANSIONLY = (0x400);
int CF_BOTH = (0x3);
int CF_TTONLY = (0x40000);
int CF_EFFECTS = (0x100);
int CF_ENABLEHOOK = (0x8);
int CF_ENABLETEMPLATE = (0x10);
int CF_ENABLETEMPLATEHANDLE = (0x20);
int CF_FIXEDPITCHONLY = (0x4000);
int CF_FORCEFONTEXIST = (0x10000);
int CF_INITTOLOGFONTSTRUCT = (0x40);
int CF_LIMITSIZE = (0x2000);
int CF_NOOEMFONTS = (0x800);
int CF_NOFACESEL = (0x80000);
int CF_NOSCRIPTSEL = (0x800000);
int CF_NOSTYLESEL = (0x100000);
int CF_NOSIZESEL = (0x200000);
int CF_NOSIMULATIONS = (0x1000);
int CF_NOVECTORFONTS = (0x800);
int CF_NOVERTFONTS = (0x1000000);
int CF_PRINTERFONTS = (0x2);
int CF_SCALABLEONLY = (0x20000);
int CF_SCREENFONTS = (0x1);
int CF_SCRIPTSONLY = (0x400);
int CF_SELECTSCRIPT = (0x400000);
int CF_SHOWHELP = (0x4);
int CF_USESTYLE = (0x80);
int CF_WYSIWYG = (0x8000);
int BOLD_FONTTYPE = (0x100);
int ITALIC_FONTTYPE = (0x200);
int PRINTER_FONTTYPE = (0x4000);
int REGULAR_FONTTYPE = (0x400);
int SCREEN_FONTTYPE = (0x2000);
int SIMULATED_FONTTYPE = (0x8000);
char* COLOROKSTRINGW = ("commdlg_ColorOK");
char* FILEOKSTRINGW = ("commdlg_FileNameOK");
char* FINDMSGSTRINGW = ("commdlg_FindReplace");
char* HELPMSGSTRINGW = ("commdlg_help");
char* LBSELCHSTRINGW = ("commdlg_LBSelChangedNotify");
char* SETRGBSTRINGW = ("commdlg_SetRGBColor");
char* SHAREVISTRINGW = ("commdlg_ShareViolation");
char* COLOROKSTRINGA = ("commdlg_ColorOK");
char* FILEOKSTRINGA = ("commdlg_FileNameOK");
char* FINDMSGSTRINGA = ("commdlg_FindReplace");
char* HELPMSGSTRINGA = ("commdlg_help");
char* LBSELCHSTRINGA = ("commdlg_LBSelChangedNotify");
char* SETRGBSTRINGA = ("commdlg_SetRGBColor");
char* SHAREVISTRINGA = ("commdlg_ShareViolation");
char* COLOROKSTRING = (COLOROKSTRINGA);
char* FILEOKSTRING = (FILEOKSTRINGA);
char* FINDMSGSTRING = (FINDMSGSTRINGA);
char* HELPMSGSTRING = (HELPMSGSTRINGA);
char* LBSELCHSTRING = (LBSELCHSTRINGA);
char* SETRGBSTRING = (SETRGBSTRINGA);
char* SHAREVISTRING = (SHAREVISTRINGA);
int CD_LBSELCHANGE = (0);
int CD_LBSELADD = (2);
int CD_LBSELSUB = (1);
int CD_LBSELNOITEMS = -((1));
int DN_DEFAULTPRN = (1);
int PD_ALLPAGES = (0);
int PD_COLLATE = (16);
int PD_DISABLEPRINTTOFILE = (524288);
int PD_ENABLEPRINTHOOK = (4096);
int PD_ENABLEPRINTTEMPLATE = (16384);
int PD_ENABLEPRINTTEMPLATEHANDLE = (65536);
int PD_ENABLESETUPHOOK = (8192);
int PD_ENABLESETUPTEMPLATE = (32768);
int PD_ENABLESETUPTEMPLATEHANDLE = (131072);
int PD_HIDEPRINTTOFILE = (1048576);
int PD_NOPAGENUMS = (8);
int PD_NOSELECTION = (4);
int PD_NOWARNING = (128);
int PD_PAGENUMS = (2);
int PD_PRINTSETUP = (64);
int PD_PRINTTOFILE = (32);
int PD_RETURNDC = (256);
int PD_RETURNDEFAULT = (1024);
int PD_RETURNIC = (512);
int PD_SELECTION = (1);
int PD_SHOWHELP = (2048);
int PD_USEDEVMODECOPIES = (262144);
int PD_USEDEVMODECOPIESANDCOLLATE = (262144);
int PSD_DEFAULTMINMARGINS = (0);
int PSD_DISABLEMARGINS = (16);
int PSD_DISABLEORIENTATION = (256);
int PSD_DISABLEPAGEPAINTING = (524288);
int PSD_DISABLEPAPER = (512);
int PSD_DISABLEPRINTER = (32);
int PSD_ENABLEPAGEPAINTHOOK = (262144);
int PSD_ENABLEPAGESETUPHOOK = (8192);
int PSD_ENABLEPAGESETUPTEMPLATE = (32768);
int PSD_ENABLEPAGESETUPTEMPLATEHANDLE = (131072);
int PSD_INHUNDREDTHSOFMILLIMETERS = (8);
int PSD_INTHOUSANDTHSOFINCHES = (4);
int PSD_INWININIINTLMEASURE = (0);
int PSD_MARGINS = (2);
int PSD_MINMARGINS = (1);
int PSD_NOWARNING = (128);
int PSD_RETURNDEFAULT = (1024);
int PSD_SHOWHELP = (2048);
int SW_OTHERUNZOOM = (4);
int SW_OTHERZOOM = (2);
int SW_PARENTCLOSING = (1);
int SW_PARENTOPENING = (3);
int VK_LBUTTON = (1);
int VK_RBUTTON = (2);
int VK_CANCEL = (3);
int VK_MBUTTON = (4);
int VK_BACK = (8);
int VK_TAB = (9);
int VK_CLEAR = (12);
int VK_RETURN = (13);
int VK_SHIFT = (16);
int VK_CONTROL = (17);
int VK_MENU = (18);
int VK_PAUSE = (19);
int VK_CAPITAL = (20);
int VK_ESCAPE = (27);
int VK_SPACE = (32);
int VK_PRIOR = (33);
int VK_NEXT = (34);
int VK_END = (35);
int VK_HOME = (36);
int VK_LEFT = (37);
int VK_UP = (38);
int VK_RIGHT = (39);
int VK_DOWN = (40);
int VK_SELECT = (41);
int VK_PRINT = (42);
int VK_EXECUTE = (43);
int VK_SNAPSHOT = (44);
int VK_INSERT = (45);
int VK_DELETE = (46);
int VK_HELP = (47);
int VK_0 = (48);
int VK_1 = (49);
int VK_2 = (50);
int VK_3 = (51);
int VK_4 = (52);
int VK_5 = (53);
int VK_6 = (54);
int VK_7 = (55);
int VK_8 = (56);
int VK_9 = (57);
int VK_A = (65);
int VK_B = (66);
int VK_C = (67);
int VK_D = (68);
int VK_E = (69);
int VK_F = (70);
int VK_G = (71);
int VK_H = (72);
int VK_I = (73);
int VK_J = (74);
int VK_K = (75);
int VK_L = (76);
int VK_M = (77);
int VK_N = (78);
int VK_O = (79);
int VK_P = (80);
int VK_Q = (81);
int VK_R = (82);
int VK_S = (83);
int VK_T = (84);
int VK_U = (85);
int VK_V = (86);
int VK_W = (87);
int VK_X = (88);
int VK_Y = (89);
int VK_Z = (90);
int VK_NUMPAD0 = (96);
int VK_NUMPAD1 = (97);
int VK_NUMPAD2 = (98);
int VK_NUMPAD3 = (99);
int VK_NUMPAD4 = (100);
int VK_NUMPAD5 = (101);
int VK_NUMPAD6 = (102);
int VK_NUMPAD7 = (103);
int VK_NUMPAD8 = (104);
int VK_NUMPAD9 = (105);
int VK_MULTIPLY = (106);
int VK_ADD = (107);
int VK_SEPARATOR = (108);
int VK_SUBTRACT = (109);
int VK_DECIMAL = (110);
int VK_DIVIDE = (111);
int VK_F1 = (112);
int VK_F2 = (113);
int VK_F3 = (114);
int VK_F4 = (115);
int VK_F5 = (116);
int VK_F6 = (117);
int VK_F7 = (118);
int VK_F8 = (119);
int VK_F9 = (120);
int VK_F10 = (121);
int VK_F11 = (122);
int VK_F12 = (123);
int VK_F13 = (124);
int VK_F14 = (125);
int VK_F15 = (126);
int VK_F16 = (127);
int VK_F17 = (128);
int VK_F18 = (129);
int VK_F19 = (130);
int VK_F20 = (131);
int VK_F21 = (132);
int VK_F22 = (133);
int VK_F23 = (134);
int VK_F24 = (135);
int VK_NUMLOCK = (144);
int VK_SCROLL = (145);
int VK_LSHIFT = (160);
int VK_LCONTROL = (162);
int VK_LMENU = (164);
int VK_RSHIFT = (161);
int VK_RCONTROL = (163);
int VK_RMENU = (165);
int VK_PROCESSKEY = (229);
int KF_ALTDOWN = (8192);
int KF_DLGMODE = (2048);
int KF_EXTENDED = (256);
int KF_MENUMODE = (4096);
int KF_REPEAT = (16384);
int KF_UP = (32768);
int KL_NAMELENGTH = (9);
int WA_ACTIVE = (1);
int WA_CLICKACTIVE = (2);
int WA_INACTIVE = (0);
int PWR_CRITICALRESUME = (3);
int PWR_SUSPENDREQUEST = (1);
int PWR_SUSPENDRESUME = (2);
int PWR_FAIL = -((1));
int PWR_OK = (1);
int NF_QUERY = (3);
int NF_REQUERY = (4);
int NFR_ANSI = (1);
int NFR_UNICODE = (2);
int WMSZ_BOTTOM = (6);
int WMSZ_BOTTOMLEFT = (7);
int WMSZ_BOTTOMRIGHT = (8);
int WMSZ_LEFT = (1);
int WMSZ_RIGHT = (2);
int WMSZ_TOP = (3);
int WMSZ_TOPLEFT = (4);
int WMSZ_TOPRIGHT = (5);
int MA_ACTIVATE = (1);
int MA_ACTIVATEANDEAT = (2);
int MA_NOACTIVATE = (3);
int MA_NOACTIVATEANDEAT = (4);
int SIZE_MAXHIDE = (4);
int SIZE_MAXIMIZED = (2);
int SIZE_MAXSHOW = (3);
int SIZE_MINIMIZED = (1);
int SIZE_RESTORED = (0);
int WVR_ALIGNTOP = (16);
int WVR_ALIGNLEFT = (32);
int WVR_ALIGNBOTTOM = (64);
int WVR_ALIGNRIGHT = (128);
int WVR_HREDRAW = (256);
int WVR_VREDRAW = (512);
int WVR_REDRAW = (768);
int WVR_VALIDRECTS = (1024);
int HTBOTTOM = (15);
int HTBOTTOMLEFT = (16);
int HTBOTTOMRIGHT = (17);
int HTCAPTION = (2);
int HTCLIENT = (1);
int HTERROR = -((2));
int HTGROWBOX = (4);
int HTHSCROLL = (6);
int HTLEFT = (10);
int HTMENU = (5);
int HTNOWHERE = (0);
int HTREDUCE = (8);
int HTRIGHT = (11);
int HTSIZE = (4);
int HTSYSMENU = (3);
int HTTOP = (12);
int HTTOPLEFT = (13);
int HTTOPRIGHT = (14);
int HTTRANSPARENT = -((1));
int HTVSCROLL = (7);
int HTZOOM = (9);
int MK_CONTROL = (8);
int MK_LBUTTON = (1);
int MK_MBUTTON = (16);
int MK_RBUTTON = (2);
int MK_SHIFT = (4);
int CS_BYTEALIGNCLIENT = (4096);
int CS_BYTEALIGNWINDOW = (8192);
int CS_CLASSDC = (64);
int CS_DBLCLKS = (8);
int CS_GLOBALCLASS = (16384);
int CS_HREDRAW = (2);
int CS_KEYCVTWINDOW = (4);
int CS_NOCLOSE = (512);
int CS_NOKEYCVT = (256);
int CS_OWNDC = (32);
int CS_PARENTDC = (128);
int CS_SAVEBITS = (2048);
int CS_VREDRAW = (1);
int DLGWINDOWEXTRA = (30);
int FALT = (16);
int FCONTROL = (8);
int FNOINVERT = (2);
int FSHIFT = (4);
int FVIRTKEY = (1);
int MIIM_CHECKMARKS = (8);
int MIIM_DATA = (32);
int MIIM_ID = (2);
int MIIM_STATE = (1);
int MIIM_SUBMENU = (4);
int MIIM_TYPE = (16);
int MFT_BITMAP = (0x4);
int MFT_MENUBARBREAK = (0x20);
int MFT_MENUBREAK = (0x40);
int MFT_OWNERDRAW = (0x100);
int MFT_RADIOCHECK = (0x200);
int MFT_RIGHTJUSTIFY = (0x4000);
int MFT_SEPARATOR = (0x800);
int MFT_STRING = (0);
int MFS_CHECKED = (0x8);
int MFS_DEFAULT = (0x1000);
int MFS_DISABLED = (0x3);
int MFS_ENABLED = (0);
int MFS_GRAYED = (0x3);
int MFS_HILITE = (0x80);
int MFS_UNCHECKED = (0);
int MFS_UNHILITE = (0);
int SERKF_AVAILABLE = (2);
int SERKF_INDICATOR = (4);
int SERKF_SERIALKEYSON = (1);
int FKF_AVAILABLE = (2);
int FKF_CLICKON = (64);
int FKF_FILTERKEYSON = (1);
int FKF_HOTKEYACTIVE = (4);
int FKF_HOTKEYSOUND = (16);
int FKF_CONFIRMHOTKEY = (8);
int FKF_INDICATOR = (32);
int HELPINFO_MENUITEM = (2);
int HELPINFO_WINDOW = (1);
int PRF_CHECKVISIBLE = (0x1);
int PRF_CHILDREN = (0x10);
int PRF_CLIENT = (0x4);
int PRF_ERASEBKGND = (0x8);
int PRF_NONCLIENT = (0x2);
int PRF_OWNED = (0x20);
int HWND_DESKTOP = (0);
int SC_CLOSE = (61536);
int SC___FILE__HELP = (61824);
int SC_DEFAULT = (61792);
int SC_HOTKEY = (61776);
int SC_HSCROLL = (61568);
int SC_KEYMENU = (61696);
int SC_MAXIMIZE = (61488);
int SC_ZOOM = (61488);
int SC_MINIMIZE = (61472);
int SC_ICON = (61472);
int SC_MONITORPOWER = (61808);
int SC_MOUSEMENU = (61584);
int SC_MOVE = (61456);
int SC_NEXTWINDOW = (61504);
int SC_PREVWINDOW = (61520);
int SC_RESTORE = (61728);
int SC_SCREENSAVE = (61760);
int SC_SIZE = (61440);
int SC_TASKLIST = (61744);
int SC_VSCROLL = (61552);
int DC_HASDEFID = (21323);
int DLGC_BUTTON = (8192);
int DLGC_DEFPUSHBUTTON = (16);
int DLGC_HASSETSEL = (8);
int DLGC_RADIOBUTTON = (64);
int DLGC_STATIC = (256);
int DLGC_UNDEFPUSHBUTTON = (32);
int DLGC_WANTALLKEYS = (4);
int DLGC_WANTARROWS = (1);
int DLGC_WANTCHARS = (128);
int DLGC_WANTMESSAGE = (4);
int DLGC_WANTTAB = (2);
int EC_LEFTMARGIN = (1);
int EC_RIGHTMARGIN = (2);
int EC_USEFONTINFO = (65535);
int LB_ERR = -((1));
int LB_ERRSPACE = -((2));
int LB_OKAY = (0);
int CB_ERR = -((1));
int CB_ERRSPACE = -((2));
int IMC_GETCANDIDATEPOS = (7);
int IMC_GETCOMPOSITIONFONT = (9);
int IMC_GETCOMPOSITIONWINDOW = (11);
int IMC_GETSTATUSWINDOWPOS = (15);
int IMC_CLOSESTATUSWINDOW = (33);
int IMC_OPENSTATUSWINDOW = (34);
int IMC_SETCANDIDATEPOS = (8);
int IMC_SETCOMPOSITIONFONT = (10);
int IMC_SETCOMPOSITIONWINDOW = (12);
int IMC_SETSTATUSWINDOWPOS = (16);
int IMN_CHANGECANDIDATE = (3);
int IMN_CLOSECANDIDATE = (4);
int IMN_CLOSESTATUSWINDOW = (1);
int IMN_GUIDELINE = (13);
int IMN_OPENCANDIDATE = (5);
int IMN_OPENSTATUSWINDOW = (2);
int IMN_SETCANDIDATEPOS = (9);
int IMN_SETCOMPOSITIONFONT = (10);
int IMN_SETCOMPOSITIONWINDOW = (11);
int IMN_SETCONVERSIONMODE = (6);
int IMN_SETOPENSTATUS = (8);
int IMN_SETSENTENCEMODE = (7);
int IMN_SETSTATUSWINDOWPOS = (12);
int IMN_PRIVATE = (14);
int SKF_AUDIBLEFEEDBACK = (64);
int SKF_AVAILABLE = (2);
int SKF_CONFIRMHOTKEY = (8);
int SKF_HOTKEYACTIVE = (4);
int SKF_HOTKEYSOUND = (16);
int SKF_INDICATOR = (32);
int SKF_STICKYKEYSON = (1);
int SKF_TRISTATE = (128);
int SKF_TWOKEYSOFF = (256);
int MKF_AVAILABLE = (2);
int MKF_CONFIRMHOTKEY = (8);
int MKF_HOTKEYACTIVE = (4);
int MKF_HOTKEYSOUND = (16);
int MKF_INDICATOR = (32);
int MKF_MOUSEKEYSON = (1);
int MKF_MODIFIERS = (64);
int MKF_REPLACENUMBERS = (128);
int SSF_AVAILABLE = (2);
int SSF_SOUNDSENTRYON = (1);
int SSTF_BORDER = (2);
int SSTF_CHARS = (1);
int SSTF_DISPLAY = (3);
int SSTF_NONE = (0);
int SSGF_DISPLAY = (3);
int SSGF_NONE = (0);
int SSWF_CUSTOM = (4);
int SSWF_DISPLAY = (3);
int SSWF_NONE = (0);
int SSWF_TITLE = (1);
int SSWF_WINDOW = (2);
int ATF_ONOFFFEEDBACK = (2);
int ATF_TIMEOUTON = (1);
int HCF_AVAILABLE = (2);
int HCF_CONFIRMHOTKEY = (8);
int HCF_HIGHCONTRASTON = (1);
int HCF_HOTKEYACTIVE = (4);
int HCF_HOTKEYAVAILABLE = (64);
int HCF_HOTKEYSOUND = (16);
int HCF_INDICATOR = (32);
int TKF_AVAILABLE = (2);
int TKF_CONFIRMHOTKEY = (8);
int TKF_HOTKEYACTIVE = (4);
int TKF_HOTKEYSOUND = (16);
int TKF_TOGGLEKEYSON = (1);
int PP_DISPLAYERRORS = (1);
int RESOURCEDISPLAYTYPE_DOMAIN = (1);
int RESOURCEDISPLAYTYPE_FILE = (4);
int RESOURCEDISPLAYTYPE_GENERIC = (0);
int RESOURCEDISPLAYTYPE_GROUP = (5);
int RESOURCEDISPLAYTYPE_SERVER = (2);
int RESOURCEDISPLAYTYPE_SHARE = (3);
int CAPSLOCK_ON = (128);
int ENHANCED_KEY = (256);
int LEFT_ALT_PRESSED = (2);
int LEFT_CTRL_PRESSED = (8);
int NUMLOCK_ON = (32);
int RIGHT_ALT_PRESSED = (1);
int RIGHT_CTRL_PRESSED = (4);
int SCROLLLOCK_ON = (64);
int SHIFT_PRESSED = (16);
int FROM_LEFT_1ST_BUTTON_PRESSED = (1);
int RIGHTMOST_BUTTON_PRESSED = (2);
int FROM_LEFT_2ND_BUTTON_PRESSED = (4);
int FROM_LEFT_3RD_BUTTON_PRESSED = (8);
int FROM_LEFT_4TH_BUTTON_PRESSED = (16);
int DOUBLE_CLICK = (2);
int MOUSE_MOVED = (1);
int KEY_EVENT = (1);
int _MOUSE_EVENT = (2);
int cMOUSE_EVENT = (2);
int WINDOW_BUFFER_SIZE_EVENT = (4);
int MENU_EVENT = (8);
int FOCUS_EVENT = (16);
int BI_RGB = (0);
int BI_RLE8 = (1);
int BI_RLE4 = (2);
int BI_BITFIELDS = (3);
int PFD_DRAW_TO_WINDOW = (0x4);
int PFD_DRAW_TO_BITMAP = (0x8);
int PFD_SUPPORT_GDI = (0x10);
int PFD_SUPPORT_OPENGL = (0x20);
int PFD_DOUBLEBUFFER = (0x1);
int PFD_STEREO = (0x2);
int PFD_DOUBLEBUFFER_DONTCARE = (0x40000000);
int PFD_STEREO_DONTCARE = (0x80000000);
int PFD_TYPE_RGBA = (0);
int PFD_TYPE_COLORINDEX = (1);
int PFD_MAIN_PLANE = (0);
int PFD_OVERLAY_PLANE = (1);
int PFD_UNDERLAY_PLANE = -((1));
int WGL_FONT_LINES = (0);
int WGL_FONT_POLYGONS = (1);
int PFD_GENERIC_FORMAT = (0x40);
int PFD_NEED_PALETTE = (0x80);
int PFD_NEED_SYSTEM_PALETTE = (0x100);
int PFD_SWAP_COPY = (0x400);
int PFD_SWAP_EXCHANGE = (0x200);
int TMPF_FIXED_PITCH = (0x1);
int TMPF_VECTOR = (0x2);
int TMPF_TRUETYPE = (0x4);
int TMPF_DEVICE = (0x8);
int SE_ERR_SHARE = (26);
int SE_ERR_ASSOCINCOMPLETE = (27);
int SE_ERR_DDETIMEOUT = (28);
int SE_ERR_DDEFAIL = (29);
int SE_ERR_DDEBUSY = (30);
int SE_ERR_NOASSOC = (31);
int XCLASS_BOOL = (0x1000);
int XCLASS_DATA = (0x2000);
int XCLASS_FLAGS = (0x4000);
int XCLASS_MASK = (0xfc00);
int XCLASS_NOTIFICATION = (0x8000);
int XTYPF_NOBLOCK = (0x0002);
int XTYP_ADVDATA = (0x4010);
int XTYP_ADVREQ = (0x2022);
int XTYP_ADVSTART = (0x1030);
int XTYP_ADVSTOP = (0x8040);
int XTYP_CONNECT = (0x1062);
int XTYP_CONNECT_CONFIRM = (0x8072);
int XTYP_DISCONNECT = (0x80c2);
int XTYP_EXECUTE = (0x4050);
int XTYP_POKE = (0x4090);
int XTYP_REQUEST = (0x20b0);
int XTYP_WILDCONNECT = (0x20E2);
int XTYP_REGISTER = (0x80A2);
int XTYP_ERROR = (0x8002);
int XTYP_XACT_COMPLETE = (0x8080);
int XTYP_UNREGISTER = (0x80D2);
int DMLERR_DLL_USAGE = (0x4004);
int DMLERR_INVALIDPARAMETER = (0x4006);
int DMLERR_NOTPROCESSED = (0x4009);
int DMLERR_POSTMSG_FAILED = (0x400c);
int DMLERR_SERVER_DIED = (0x400e);
int DMLERR_SYS_ERROR = (0x400f);
int DMLERR_BUSY = (0x4001);
int DMLERR_DATAACKTIMEOUT = (0x4002);
int DMLERR_ADVACKTIMEOUT = (0x4000);
int DMLERR_DLL_NOT_INITIALIZED = (0x4003);
int DMLERR_LOW_MEMORY = (0x4007);
int DMLERR_MEMORY_ERROR = (0x4008);
int DMLERR_POKEACKTIMEOUT = (0x400b);
int DMLERR_NO_CONV_ESTABLISHED = (0x400a);
int DMLERR_REENTRANCY = (0x400d);
int DMLERR_UNFOUND_QUEUE_ID = (0x4011);
int DMLERR_UNADVACKTIMEOUT = (0x4010);
int DMLERR_EXECACKTIMEOUT = (0x4005);
int DDE_FACK = (0x8000);
int DDE_FNOTPROCESSED = (0x0000);
int DNS_REGISTER = (0x0001);
int DNS_UNREGISTER = (0x0002);
int CP_WINANSI = (1004);
int CP_WINUNICODE = (1200);
int APPCLASS_STANDARD = (0x00000000);
int BKMODE_LAST = (2);
int CTLCOLOR_MSGBOX = (0);
int CTLCOLOR_EDIT = (1);
int CTLCOLOR_LISTBOX = (2);
int CTLCOLOR_BTN = (3);
int CTLCOLOR_DLG = (4);
int CTLCOLOR_SCROLLBAR = (5);
int CTLCOLOR_STATIC = (6);
int CTLCOLOR_MAX = (7);
int META_SETMAPMODE = (0x0103);
int META_SETWINDOWORG = (0x020B);
int META_SETWINDOWEXT = (0x020C);
int POLYFILL_LAST = (2);
int STATUS_WAIT_0 = (0x00000000);
int STATUS_ABANDONED_WAIT_0 = (0x00000080);
int STATUS_USER_APC = (0x000000C0);
int STATUS_TIMEOUT = (0x00000102);
int STATUS_PENDING = (0x00000103);
int STATUS_GUARD_PAGE_VIOLATION = (0x80000001);
int STATUS_DATATYPE_MISALIGNMENT = (0x80000002);
int STATUS_BREAKPOINT = (0x80000003);
int STATUS_SINGLE_STEP = (0x80000004);
int STATUS_IN_PAGE_ERROR = (0xC0000006);
int STATUS_INVALID_HANDLE = (0xC0000008);
int STATUS_ILLEGAL_INSTRUCTION = (0xC000001D);
int STATUS_NONCONTINUABLE_EXCEPTION = (0xC0000025);
int STATUS_INVALID_DISPOSITION = (0xC0000026);
int STATUS_ARRAY_BOUNDS_EXCEEDED = (0xC000008C);
int STATUS_FLOAT_DENORMAL_OPERAND = (0xC000008D);
int STATUS_FLOAT_DIVIDE_BY_ZERO = (0xC000008E);
int STATUS_FLOAT_INEXACT_RESULT = (0xC000008F);
int STATUS_FLOAT_INVALID_OPERATION = (0xC0000090);
int STATUS_FLOAT_OVERFLOW = (0xC0000091);
int STATUS_FLOAT_STACK_CHECK = (0xC0000092);
int STATUS_FLOAT_UNDERFLOW = (0xC0000093);
int STATUS_INTEGER_DIVIDE_BY_ZERO = (0xC0000094);
int STATUS_INTEGER_OVERFLOW = (0xC0000095);
int STATUS_PRIVILEGED_INSTRUCTION = (0xC0000096);
int STATUS_STACK_OVERFLOW = (0xC00000FD);
int STATUS_CONTROL_C_EXIT = (0xC000013A);
int PROCESSOR_ARCHITECTURE_INTEL = (0);
int PROCESSOR_ARCHITECTURE_MIPS = (1);
int PROCESSOR_ARCHITECTURE_ALPHA = (2);
int PROCESSOR_ARCHITECTURE_PPC = (3);
int SIZEFULLSCREEN = (SIZE_MAXIMIZED);
int SIZENORMAL = (SIZE_RESTORED);
int SIZEICONIC = (SIZE_MINIMIZED);
int SIZE_OF_80387_REGISTERS = (80);
int __FILE___i386 = (0x10000);
int __FILE___CONTROL = (__FILE___i386) | (1);
int __FILE___INTEGER = (__FILE___i386) | (2);
int __FILE___SEGMENTS = (__FILE___i386) | (4);
int __FILE___FLOATING_POINT = (__FILE___i386) | (8);
int __FILE___DEBUG_REGISTERS = (__FILE___i386) | (0x10);
int __FILE___FULL = ((__FILE___CONTROL) | (__FILE___INTEGER)) | (__FILE___SEGMENTS);
int FLAG_TRACE_BIT = (0x100);
int __FILE___DEBUGGER = (__FILE___FULL) | (__FILE___FLOATING_POINT);
int FILTER_TEMP_DUPLICATE_ACCOUNT = (0x0001);
int FILTER_NORMAL_ACCOUNT = (0x0002);
int FILTER_INTERDOMAIN_TRUST_ACCOUNT = (0x0008);
int FILTER_WORKSTATION_TRUST_ACCOUNT = (0x0010);
int FILTER_SERVER_TRUST_ACCOUNT = (0x0020);
int LOGON32_LOGON_INTERACTIVE = (0x02);
int LOGON32_LOGON_BATCH = (0x04);
int LOGON32_LOGON_SERVICE = (0x05);
int LOGON32_PROVIDER_DEFAULT = (0x00);
int LOGON32_PROVIDER_WINNT35 = (0x01);
int QID_SYNC = (0xFFFFFFFF);
int IMAGE_DOS_SIGNATURE = (0x5a4d);
int IMAGE_NT_SIGNATURE = (0x4550);
int SEVERITY_SUCCESS = (0);
int SEVERITY_ERROR = (1);
int VT_EMPTY = (0);
int VT_NULL = (1);
int VT_I2 = (2);
int VT_I4 = (3);
int VT_R4 = (4);
int VT_R8 = (5);
int VT_BSTR = (8);
int VT_ERROR = (10);
int VT_BOOL = (11);
int VT_UI1 = (17);
int VT_BYREF = (0x4000);
int VT_RESERVED = (0x8000);
int FACILITY_WINDOWS = (8);
int FACILITY_STORAGE = (3);
int FACILITY_RPC = (1);
int FACILITY_SSPI = (9);
int FACILITY_WIN32 = (7);
int FACILITY_CONTROL = (10);
int FACILITY_NULL = (0);
int FACILITY_INTERNET = (12);
int FACILITY_ITF = (4);
int FACILITY_DISPATCH = (2);
int FACILITY_CERT = (11);
int ACM_OPENW = (1127);
int ACM_OPENA = (1124);
int ACM_OPEN = (ACM_OPENA);
int ACM_PLAY = (1125);
int ACM_STOP = (1126);
int ACN_START = (1);
int ACN_STOP = (2);
int BM_CLICK = (245);
int BM_GETCHECK = (240);
int BM_GETIMAGE = (246);
int BM_GETSTATE = (242);
int BM_SETCHECK = (241);
int BM_SETIMAGE = (247);
int BM_SETSTATE = (243);
int BM_SETSTYLE = (244);
int BN_CLICKED = (0);
int BN_DBLCLK = (5);
int BN_DISABLE = (4);
int BN_DOUBLECLICKED = (5);
int BN_HILITE = (2);
int BN_KILLFOCUS = (7);
int BN_PAINT = (1);
int BN_PUSHED = (2);
int BN_SETFOCUS = (6);
int BN_UNHILITE = (3);
int BN_UNPUSHED = (3);
int CB_ADDSTRING = (323);
int CB_DELETESTRING = (324);
int CB_DIR = (325);
int CB_FINDSTRING = (332);
int CB_FINDSTRINGEXACT = (344);
int CB_GETCOUNT = (326);
int CB_GETCURSEL = (327);
int CB_GETDROPPEDCONTROLRECT = (338);
int CB_GETDROPPEDSTATE = (343);
int CB_GETDROPPEDWIDTH = (351);
int CB_GETEDITSEL = (320);
int CB_GETEXTENDEDUI = (342);
int CB_GETHORIZONTALEXTENT = (349);
int CB_GETITEMDATA = (336);
int CB_GETITEMHEIGHT = (340);
int CB_GETLBTEXT = (328);
int CB_GETLBTEXTLEN = (329);
int CB_GETLOCALE = (346);
int CB_GETTOPINDEX = (347);
int CB_INITSTORAGE = (353);
int CB_INSERTSTRING = (330);
int CB_LIMITTEXT = (321);
int CB_RESETCONTENT = (331);
int CB_SELECTSTRING = (333);
int CB_SETCURSEL = (334);
int CB_SETDROPPEDWIDTH = (352);
int CB_SETEDITSEL = (322);
int CB_SETEXTENDEDUI = (341);
int CB_SETHORIZONTALEXTENT = (350);
int CB_SETITEMDATA = (337);
int CB_SETITEMHEIGHT = (339);
int CB_SETLOCALE = (345);
int CB_SETTOPINDEX = (348);
int CB_SHOWDROPDOWN = (335);
int CBN_CLOSEUP = (8);
int CBN_DBLCLK = (2);
int CBN_DROPDOWN = (7);
int CBN_EDITCHANGE = (5);
int CBN_EDITUPDATE = (6);
int CBN_ERRSPACE = -((1));
int CBN_KILLFOCUS = (4);
int CBN_SELCHANGE = (1);
int CBN_SELENDCANCEL = (10);
int CBN_SELENDOK = (9);
int CBN_SETFOCUS = (3);
int DL_BEGINDRAG = (1157);
int DL_CANCELDRAG = (1160);
int DL_DRAGGING = (1158);
int DL_DROPPED = (1159);
int DM_GETDEFID = (1024);
int DM_REPOSITION = (1026);
int DM_SETDEFID = (1025);
int EM_CANPASTE = (1074);
int EM_CANUNDO = (198);
int EM_CHARFROMPOS = (215);
int EM_DISPLAYBAND = (1075);
int EM_EMPTYUNDOBUFFER = (205);
int EM_EXGETSEL = (1076);
int EM_EXLIMITTEXT = (1077);
int EM_EXLINEFROMCHAR = (1078);
int EM_EXSETSEL = (1079);
int EM_FINDTEXT = (1080);
int EM_FINDTEXTEX = (1103);
int EM_FINDWORDBREAK = (1100);
int EM_FMTLINES = (200);
int EM_FORMATRANGE = (1081);
int EM_GETCHARFORMAT = (1082);
int EM_GETEVENTMASK = (1083);
int EM_GETFIRSTVISIBLELINE = (206);
int EM_GETHANDLE = (189);
int EM_GETLIMITTEXT = (213);
int EM_GETLINE = (196);
int EM_GETLINECOUNT = (186);
int EM_GETMARGINS = (212);
int EM_GETMODIFY = (184);
int EM_GETIMECOLOR = (1129);
int EM_GETIMEOPTIONS = (1131);
int EM_GETOPTIONS = (1102);
int EM_GETOLEINTERFACE = (1084);
int EM_GETPARAFORMAT = (1085);
int EM_GETPASSWORDCHAR = (210);
int EM_GETPUNCTUATION = (1125);
int EM_GETRECT = (178);
int EM_GETSEL = (176);
int EM_GETSELTEXT = (1086);
int EM_GETTEXTRANGE = (1099);
int EM_GETTHUMB = (190);
int EM_GETWORDBREAKPROC = (209);
int EM_GETWORDBREAKPROCEX = (1104);
int EM_GETWORDWRAPMODE = (1127);
int EM_HIDESELECTION = (1087);
int EM_LIMITTEXT = (197);
int EM_LINEFROMCHAR = (201);
int EM_LINEINDEX = (187);
int EM_LINELENGTH = (193);
int EM_LINESCROLL = (182);
int EM_PASTESPECIAL = (1088);
int EM_POSFROMCHAR = (214);
int EM_REPLACESEL = (194);
int EM_REQUESTRESIZE = (1089);
int EM_SCROLL = (181);
int EM_SCROLLCARET = (183);
int EM_SELECTIONTYPE = (1090);
int EM_SETBKGNDCOLOR = (1091);
int EM_SETCHARFORMAT = (1092);
int EM_SETEVENTMASK = (1093);
int EM_SETHANDLE = (188);
int EM_SETIMECOLOR = (1128);
int EM_SETIMEOPTIONS = (1130);
int EM_SETLIMITTEXT = (197);
int EM_SETMARGINS = (211);
int EM_SETMODIFY = (185);
int EM_SETOLECALLBACK = (1094);
int EM_SETOPTIONS = (1101);
int EM_SETPARAFORMAT = (1095);
int EM_SETPASSWORDCHAR = (204);
int EM_SETPUNCTUATION = (1124);
int EM_SETREADONLY = (207);
int EM_SETRECT = (179);
int EM_SETRECTNP = (180);
int EM_SETSEL = (177);
int EM_SETTABSTOPS = (203);
int EM_SETTARGETDEVICE = (1096);
int EM_SETWORDBREAKPROC = (208);
int EM_SETWORDBREAKPROCEX = (1105);
int EM_SETWORDWRAPMODE = (1126);
int EM_STREAMIN = (1097);
int EM_STREAMOUT = (1098);
int EM_UNDO = (199);
int EN_CHANGE = (768);
int EN_CORRECTTEXT = (1797);
int EN_DROPFILES = (1795);
int EN_ERRSPACE = (1280);
int EN_HSCROLL = (1537);
int EN_IMECHANGE = (1799);
int EN_KILLFOCUS = (512);
int EN_MAXTEXT = (1281);
int EN_MSGFILTER = (1792);
int EN_OLEOPFAILED = (1801);
int EN_PROTECTED = (1796);
int EN_REQUESTRESIZE = (1793);
int EN_SAVECLIPBOARD = (1800);
int EN_SELCHANGE = (1794);
int EN_SETFOCUS = (256);
int EN_STOPNOUNDO = (1798);
int EN_UPDATE = (1024);
int EN_VSCROLL = (1538);
int HDM_DELETEITEM = (4610);
int HDM_GETITEMW = (4619);
int HDM_INSERTITEMW = (4618);
int HDM_SETITEMW = (4620);
int HDM_GETITEMA = (4611);
int HDM_INSERTITEMA = (4609);
int HDM_SETITEMA = (4612);
int HDM_GETITEM = (HDM_GETITEMA);
int HDM_INSERTITEM = (HDM_INSERTITEMA);
int HDM_SETITEM = (HDM_SETITEMA);
int HDM_GETITEMCOUNT = (4608);
int HDM_HITTEST = (4614);
int HDM_LAYOUT = (4613);
int HDN_BEGINTRACKW = -((326));
int HDN_DIVIDERDBLCLICKW = -((325));
int HDN_ENDTRACKW = -((327));
int HDN_ITEMCHANGEDW = -((321));
int HDN_ITEMCHANGINGW = -((320));
int HDN_ITEMCLICKW = -((322));
int HDN_ITEMDBLCLICKW = -((323));
int HDN_TRACKW = -((328));
int HDN_BEGINTRACKA = -((306));
int HDN_DIVIDERDBLCLICKA = -((305));
int HDN_ENDTRACKA = -((307));
int HDN_ITEMCHANGEDA = -((301));
int HDN_ITEMCHANGINGA = -((300));
int HDN_ITEMCLICKA = -((302));
int HDN_ITEMDBLCLICKA = -((303));
int HDN_TRACKA = -((308));
int HDN_BEGINTRACK = (HDN_BEGINTRACKA);
int HDN_DIVIDERDBLCLICK = (HDN_DIVIDERDBLCLICKA);
int HDN_ENDTRACK = (HDN_ENDTRACKA);
int HDN_ITEMCHANGED = (HDN_ITEMCHANGEDA);
int HDN_ITEMCHANGING = (HDN_ITEMCHANGINGA);
int HDN_ITEMCLICK = (HDN_ITEMCLICKA);
int HDN_ITEMDBLCLICK = (HDN_ITEMDBLCLICKA);
int HDN_TRACK = (HDN_TRACKA);
int HKM_GETHOTKEY = (1026);
int HKM_SETHOTKEY = (1025);
int HKM_SETRULES = (1027);
int LB_ADDFILE = (406);
int LB_ADDSTRING = (384);
int LB_DELETESTRING = (386);
int LB_DIR = (397);
int LB_FINDSTRING = (399);
int LB_FINDSTRINGEXACT = (418);
int LB_GETANCHORINDEX = (413);
int LB_GETCARETINDEX = (415);
int LB_GETCOUNT = (395);
int LB_GETCURSEL = (392);
int LB_GETHORIZONTALEXTENT = (403);
int LB_GETITEMDATA = (409);
int LB_GETITEMHEIGHT = (417);
int LB_GETITEMRECT = (408);
int LB_GETLOCALE = (422);
int LB_GETSEL = (391);
int LB_GETSELCOUNT = (400);
int LB_GETSELITEMS = (401);
int LB_GETTEXT = (393);
int LB_GETTEXTLEN = (394);
int LB_GETTOPINDEX = (398);
int LB_INITSTORAGE = (424);
int LB_INSERTSTRING = (385);
int LB_ITEMFROMPOINT = (425);
int LB_RESETCONTENT = (388);
int LB_SELECTSTRING = (396);
int LB_SELITEMRANGE = (411);
int LB_SELITEMRANGEEX = (387);
int LB_SETANCHORINDEX = (412);
int LB_SETCARETINDEX = (414);
int LB_SETCOLUMNWIDTH = (405);
int LB_SETCOUNT = (423);
int LB_SETCURSEL = (390);
int LB_SETHORIZONTALEXTENT = (404);
int LB_SETITEMDATA = (410);
int LB_SETITEMHEIGHT = (416);
int LB_SETLOCALE = (421);
int LB_SETSEL = (389);
int LB_SETTABSTOPS = (402);
int LB_SETTOPINDEX = (407);
int LBN_DBLCLK = (2);
int LBN_ERRSPACE = -((2));
int LBN_KILLFOCUS = (5);
int LBN_SELCANCEL = (3);
int LBN_SELCHANGE = (1);
int LBN_SETFOCUS = (4);
int LVM_ARRANGE = (4118);
int LVM_CREATEDRAGIMAGE = (4129);
int LVM_DELETEALLITEMS = (4105);
int LVM_DELETECOLUMN = (4124);
int LVM_DELETEITEM = (4104);
int LVM_ENSUREVISIBLE = (4115);
int LVM_GETBKCOLOR = (4096);
int LVM_GETCALLBACKMASK = (4106);
int LVM_GETCOLUMNWIDTH = (4125);
int LVM_GETCOUNTPERPAGE = (4136);
int LVM_GETEDITCONTROL = (4120);
int LVM_GETIMAGELIST = (4098);
int LVM_EDITLABELW = (4214);
int LVM_FINDITEMW = (4179);
int LVM_GETCOLUMNW = (4191);
int LVM_GETISEARCHSTRINGW = (4213);
int LVM_GETITEMW = (4171);
int LVM_GETITEMTEXTW = (4211);
int LVM_GETSTRINGWIDTHW = (4183);
int LVM_INSERTCOLUMNW = (4193);
int LVM_INSERTITEMW = (4173);
int LVM_SETCOLUMNW = (4192);
int LVM_SETITEMW = (4172);
int LVM_SETITEMTEXTW = (4212);
int LVM_EDITLABELA = (4119);
int LVM_FINDITEMA = (4109);
int LVM_GETCOLUMNA = (4121);
int LVM_GETISEARCHSTRINGA = (4148);
int LVM_GETITEMA = (4101);
int LVM_GETITEMTEXTA = (4141);
int LVM_GETSTRINGWIDTHA = (4113);
int LVM_INSERTCOLUMNA = (4123);
int LVM_INSERTITEMA = (4103);
int LVM_SETCOLUMNA = (4122);
int LVM_SETITEMA = (4102);
int LVM_SETITEMTEXTA = (4142);
int LVM_EDITLABEL = (LVM_EDITLABELA);
int LVM_FINDITEM = (LVM_FINDITEMA);
int LVM_GETCOLUMN = (LVM_GETCOLUMNA);
int LVM_GETISEARCHSTRING = (LVM_GETISEARCHSTRINGA);
int LVM_GETITEM = (LVM_GETITEMA);
int LVM_GETITEMTEXT = (LVM_GETITEMTEXTA);
int LVM_GETSTRINGWIDTH = (LVM_GETSTRINGWIDTHA);
int LVM_INSERTCOLUMN = (LVM_INSERTCOLUMNA);
int LVM_INSERTITEM = (LVM_INSERTITEMA);
int LVM_SETCOLUMN = (LVM_SETCOLUMNA);
int LVM_SETITEM = (LVM_SETITEMA);
int LVM_SETITEMTEXT = (LVM_SETITEMTEXTA);
int LVM_GETITEMCOUNT = (4100);
int LVM_GETITEMPOSITION = (4112);
int LVM_GETITEMRECT = (4110);
int LVM_GETITEMSPACING = (4147);
int LVM_GETITEMSTATE = (4140);
int LVM_GETNEXTITEM = (4108);
int LVM_GETORIGIN = (4137);
int LVM_GETSELECTEDCOUNT = (4146);
int LVM_GETTEXTBKCOLOR = (4133);
int LVM_GETTEXTCOLOR = (4131);
int LVM_GETTOPINDEX = (4135);
int LVM_GETVIEWRECT = (4130);
int LVM_HITTEST = (4114);
int LVM_REDRAWITEMS = (4117);
int LVM_SCROLL = (4116);
int LVM_SETBKCOLOR = (4097);
int LVM_SETCALLBACKMASK = (4107);
int LVM_SETCOLUMNWIDTH = (4126);
int LVM_SETIMAGELIST = (4099);
int LVM_SETITEMCOUNT = (4143);
int LVM_SETITEMPOSITION = (4111);
int LVM_SETITEMPOSITION32 = (4145);
int LVM_SETITEMSTATE = (4139);
int LVM_SETTEXTBKCOLOR = (4134);
int LVM_SETTEXTCOLOR = (4132);
int LVM_SORTITEMS = (4144);
int LVM_UPDATE = (4138);
int LVN_BEGINDRAG = -((109));
int LVN_BEGINRDRAG = -((111));
int LVN_COLUMNCLICK = -((108));
int LVN_DELETEALLITEMS = -((104));
int LVN_DELETEITEM = -((103));
int LVN_BEGINLABELEDITW = -((175));
int LVN_ENDLABELEDITW = -((176));
int LVN_GETDISPINFOW = -((177));
int LVN_SETDISPINFOW = -((178));
int LVN_BEGINLABELEDITA = -((105));
int LVN_ENDLABELEDITA = -((106));
int LVN_GETDISPINFOA = -((150));
int LVN_SETDISPINFOA = -((151));
int LVN_BEGINLABELEDIT = (LVN_BEGINLABELEDITA);
int LVN_ENDLABELEDIT = (LVN_ENDLABELEDITA);
int LVN_GETDISPINFO = (LVN_GETDISPINFOA);
int LVN_SETDISPINFO = (LVN_SETDISPINFOA);
int LVN_INSERTITEM = -((102));
int LVN_ITEMCHANGED = -((101));
int LVN_ITEMCHANGING = -((100));
int LVN_KEYDOWN = -((155));
int NM_CLICK = -((2));
int NM_DBLCLK = -((3));
int NM_KILLFOCUS = -((8));
int NM_OUTOFMEMORY = -((1));
int NM_RCLICK = -((5));
int NM_RDBLCLK = -((6));
int NM_RETURN = -((4));
int NM_SETFOCUS = -((7));
int PBM_DELTAPOS = (1027);
int PBM_SETPOS = (1026);
int PBM_SETRANGE = (1025);
int PBM_SETSTEP = (1028);
int PBM_STEPIT = (1029);
int PSM_ADDPAGE = (1127);
int PSM_APPLY = (1134);
int PSM_CANCELTOCLOSE = (1131);
int PSM_CHANGED = (1128);
int PSM_GETTABCONTROL = (1140);
int PSM_GETCURRENTPAGEHWND = (1142);
int PSM_ISDIALOGMESSAGE = (1141);
int PSM_PRESSBUTTON = (1137);
int PSM_QUERYSIBLINGS = (1132);
int PSM_REBOOTSYSTEM = (1130);
int PSM_REMOVEPAGE = (1126);
int PSM_RESTARTWINDOWS = (1129);
int PSM_SETCURSEL = (1125);
int PSM_SETCURSELID = (1138);
int PSM_SETFINISHTEXTW = (1145);
int PSM_SETTITLEW = (1144);
int PSM_SETFINISHTEXTA = (1139);
int PSM_SETTITLEA = (1135);
int PSM_SETFINISHTEXT = (PSM_SETFINISHTEXTA);
int PSM_SETTITLE = (PSM_SETTITLEA);
int PSM_SETWIZBUTTONS = (1136);
int PSM_UNCHANGED = (1133);
int PSN_APPLY = -((202));
int PSN_HELP = -((205));
int PSN_KILLACTIVE = -((201));
int PSN_QUERYCANCEL = -((209));
int PSN_RESET = -((203));
int PSN_SETACTIVE = -((200));
int PSN_WIZBACK = -((206));
int PSN_WIZFINISH = -((208));
int PSN_WIZNEXT = -((207));
int SB_GETBORDERS = (1031);
int SB_GETPARTS = (1030);
int SB_GETRECT = (1034);
int SB_GETTEXTW = (1037);
int SB_GETTEXTLENGTHW = (1036);
int SB_SETTEXTW = (1035);
int SB_GETTEXTA = (1026);
int SB_GETTEXTLENGTHA = (1027);
int SB_SETTEXTA = (1025);
int SB_GETTEXT = (SB_GETTEXTA);
int SB_GETTEXTLENGTH = (SB_GETTEXTLENGTHA);
int SB_SETTEXT = (SB_SETTEXTA);
int SB_SETMINHEIGHT = (1032);
int SB_SETPARTS = (1028);
int SB_SIMPLE = (1033);
int SBM_ENABLE_ARROWS = (228);
int SBM_GETPOS = (225);
int SBM_GETRANGE = (227);
int SBM_GETSCROLLINFO = (234);
int SBM_SETPOS = (224);
int SBM_SETRANGE = (226);
int SBM_SETRANGEREDRAW = (230);
int SBM_SETSCROLLINFO = (233);
int STM_GETICON = (369);
int STM_GETIMAGE = (371);
int STM_SETICON = (368);
int STM_SETIMAGE = (370);
int STN_CLICKED = (0);
int STN_DBLCLK = (1);
int STN_DISABLE = (3);
int STN_ENABLE = (2);
int TB_ADDBITMAP = (1043);
int TB_ADDBUTTONS = (1044);
int TB_AUTOSIZE = (1057);
int TB_BUTTONCOUNT = (1048);
int TB_BUTTONSTRUCTSIZE = (1054);
int TB_CHANGEBITMAP = (1067);
int TB_CHECKBUTTON = (1026);
int TB_COMMANDTOINDEX = (1049);
int TB_CUSTOMIZE = (1051);
int TB_DELETEBUTTON = (1046);
int TB_ENABLEBUTTON = (1025);
int TB_GETBITMAP = (1068);
int TB_GETBITMAPFLAGS = (1065);
int TB_GETBUTTON = (1047);
int TB_ADDSTRINGW = (1101);
int TB_GETBUTTONTEXTW = (1099);
int TB_SAVERESTOREW = (1100);
int TB_ADDSTRINGA = (1052);
int TB_GETBUTTONTEXTA = (1069);
int TB_SAVERESTOREA = (1050);
int TB_ADDSTRING = (TB_ADDSTRINGA);
int TB_GETBUTTONTEXT = (TB_GETBUTTONTEXTA);
int TB_SAVERESTORE = (TB_SAVERESTOREA);
int TB_GETITEMRECT = (1053);
int TB_GETROWS = (1064);
int TB_GETSTATE = (1042);
int TB_GETTOOLTIPS = (1059);
int TB_HIDEBUTTON = (1028);
int TB_INDETERMINATE = (1029);
int TB_INSERTBUTTON = (1045);
int TB_ISBUTTONCHECKED = (1034);
int TB_ISBUTTONENABLED = (1033);
int TB_ISBUTTONHIDDEN = (1036);
int TB_ISBUTTONINDETERMINATE = (1037);
int TB_ISBUTTONPRESSED = (1035);
int TB_PRESSBUTTON = (1027);
int TB_SETBITMAPSIZE = (1056);
int TB_SETBUTTONSIZE = (1055);
int TB_SETCMDID = (1066);
int TB_SETPARENT = (1061);
int TB_SETROWS = (1063);
int TB_SETSTATE = (1041);
int TB_SETTOOLTIPS = (1060);
int TBM_CLEARSEL = (1043);
int TBM_CLEARTICS = (1033);
int TBM_GETCHANNELRECT = (1050);
int TBM_GETLINESIZE = (1048);
int TBM_GETNUMTICS = (1040);
int TBM_GETPAGESIZE = (1046);
int TBM_GETPOS = (1024);
int TBM_GETPTICS = (1038);
int TBM_GETRANGEMAX = (1026);
int TBM_GETRANGEMIN = (1025);
int TBM_GETSELEND = (1042);
int TBM_GETSELSTART = (1041);
int TBM_GETTHUMBLENGTH = (1052);
int TBM_GETTHUMBRECT = (1049);
int TBM_GETTIC = (1027);
int TBM_GETTICPOS = (1039);
int TBM_SETLINESIZE = (1047);
int TBM_SETPAGESIZE = (1045);
int TBM_SETPOS = (1029);
int TBM_SETRANGE = (1030);
int TBM_SETRANGEMAX = (1032);
int TBM_SETRANGEMIN = (1031);
int TBM_SETSEL = (1034);
int TBM_SETSELEND = (1036);
int TBM_SETSELSTART = (1035);
int TBM_SETTHUMBLENGTH = (1051);
int TBM_SETTIC = (1028);
int TBM_SETTICFREQ = (1044);
int TBN_BEGINADJUST = -((703));
int TBN_BEGINDRAG = -((701));
int TBN_CUSTHELP = -((709));
int TBN_ENDADJUST = -((704));
int TBN_ENDDRAG = -((702));
int TBN_GETBUTTONINFOW = -((720));
int TBN_GETBUTTONINFOA = -((700));
int TBN_GETBUTTONINFO = (TBN_GETBUTTONINFOA);
int TBN_QUERYDELETE = -((707));
int TBN_QUERYINSERT = -((706));
int TBN_RESET = -((705));
int TBN_TOOLBARCHANGE = -((708));
int TCM_ADJUSTRECT = (4904);
int TCM_DELETEALLITEMS = (4873);
int TCM_DELETEITEM = (4872);
int TCM_GETCURFOCUS = (4911);
int TCM_GETCURSEL = (4875);
int TCM_GETIMAGELIST = (4866);
int TCM_GETITEMW = (4924);
int TCM_INSERTITEMW = (4926);
int TCM_SETITEMW = (4925);
int TCM_GETITEMA = (4869);
int TCM_INSERTITEMA = (4871);
int TCM_SETITEMA = (4870);
int TCM_GETITEM = (TCM_GETITEMA);
int TCM_INSERTITEM = (TCM_INSERTITEMA);
int TCM_SETITEM = (TCM_SETITEMA);
int TCM_GETITEMCOUNT = (4868);
int TCM_GETITEMRECT = (4874);
int TCM_GETROWCOUNT = (4908);
int TCM_GETTOOLTIPS = (4909);
int TCM_HITTEST = (4877);
int TCM_REMOVEIMAGE = (4906);
int TCM_SETCURFOCUS = (4912);
int TCM_SETCURSEL = (4876);
int TCM_SETIMAGELIST = (4867);
int TCM_SETITEMEXTRA = (4878);
int TCM_SETITEMSIZE = (4905);
int TCM_SETPADDING = (4907);
int TCM_SETTOOLTIPS = (4910);
int TCN_KEYDOWN = -((550));
int TCN_SELCHANGE = -((551));
int TCN_SELCHANGING = -((552));
int TTM_ACTIVATE = (1025);
int TTM_ADDTOOLW = (1074);
int TTM_DELTOOLW = (1075);
int TTM_ENUMTOOLSW = (1082);
int TTM_GETCURRENTTOOLW = (1083);
int TTM_GETTEXTW = (1080);
int TTM_GETTOOLINFOW = (1077);
int TTM_HITTESTW = (1079);
int TTM_NEWTOOLRECTW = (1076);
int TTM_SETTOOLINFOW = (1078);
int TTM_UPDATETIPTEXTW = (1081);
int TTM_ADDTOOLA = (1028);
int TTM_DELTOOLA = (1029);
int TTM_ENUMTOOLSA = (1038);
int TTM_GETCURRENTTOOLA = (1039);
int TTM_GETTEXTA = (1035);
int TTM_GETTOOLINFOA = (1032);
int TTM_HITTESTA = (1034);
int TTM_NEWTOOLRECTA = (1030);
int TTM_SETTOOLINFOA = (1033);
int TTM_UPDATETIPTEXTA = (1036);
int TTM_ADDTOOL = (TTM_ADDTOOLA);
int TTM_DELTOOL = (TTM_DELTOOLA);
int TTM_ENUMTOOLS = (TTM_ENUMTOOLSA);
int TTM_GETCURRENTTOOL = (TTM_GETCURRENTTOOLA);
int TTM_GETTEXT = (TTM_GETTEXTA);
int TTM_GETTOOLINFO = (TTM_GETTOOLINFOA);
int TTM_HITTEST = (TTM_HITTESTA);
int TTM_NEWTOOLRECT = (TTM_NEWTOOLRECTA);
int TTM_SETTOOLINFO = (TTM_SETTOOLINFOA);
int TTM_UPDATETIPTEXT = (TTM_UPDATETIPTEXTA);
int TTM_GETTOOLCOUNT = (1037);
int TTM_RELAYEVENT = (1031);
int TTM_SETDELAYTIME = (1027);
int TTM_WINDOWFROMPOINT = (1040);
int TTN_NEEDTEXTW = -((530));
int TTN_NEEDTEXTA = -((520));
int TTN_NEEDTEXT = (TTN_NEEDTEXTA);
int TTN_POP = -((522));
int TTN_SHOW = -((521));
int TVM_CREATEDRAGIMAGE = (4370);
int TVM_DELETEITEM = (4353);
int TVM_ENDEDITLABELNOW = (4374);
int TVM_ENSUREVISIBLE = (4372);
int TVM_EXPAND = (4354);
int TVM_GETCOUNT = (4357);
int TVM_GETEDITCONTROL = (4367);
int TVM_GETIMAGELIST = (4360);
int TVM_GETINDENT = (4358);
int TVM_GETITEMRECT = (4356);
int TVM_GETNEXTITEM = (4362);
int TVM_GETVISIBLECOUNT = (4368);
int TVM_HITTEST = (4369);
int TVM_EDITLABELW = (4417);
int TVM_GETISEARCHSTRINGW = (4416);
int TVM_GETITEMW = (4414);
int TVM_INSERTITEMW = (4402);
int TVM_SETITEMW = (4415);
int TVM_EDITLABELA = (4366);
int TVM_GETISEARCHSTRINGA = (4375);
int TVM_GETITEMA = (4364);
int TVM_INSERTITEMA = (4352);
int TVM_SETITEMA = (4365);
int TVM_EDITLABEL = (TVM_EDITLABELA);
int TVM_GETISEARCHSTRING = (TVM_GETISEARCHSTRINGA);
int TVM_GETITEM = (TVM_GETITEMA);
int TVM_INSERTITEM = (TVM_INSERTITEMA);
int TVM_SETITEM = (TVM_SETITEMA);
int TVM_SELECTITEM = (4363);
int TVM_SETIMAGELIST = (4361);
int TVM_SETINDENT = (4359);
int TVM_SORTCHILDREN = (4371);
int TVM_SORTCHILDRENCB = (4373);
int TVN_KEYDOWN = -((412));
int TVN_BEGINDRAGW = -((456));
int TVN_BEGINLABELEDITW = -((459));
int TVN_BEGINRDRAGW = -((457));
int TVN_DELETEITEMW = -((458));
int TVN_ENDLABELEDITW = -((460));
int TVN_GETDISPINFOW = -((452));
int TVN_ITEMEXPANDEDW = -((455));
int TVN_ITEMEXPANDINGW = -((454));
int TVN_SELCHANGEDW = -((451));
int TVN_SELCHANGINGW = -((450));
int TVN_SETDISPINFOW = -((453));
int TVN_BEGINDRAGA = -((407));
int TVN_BEGINLABELEDITA = -((410));
int TVN_BEGINRDRAGA = -((408));
int TVN_DELETEITEMA = -((409));
int TVN_ENDLABELEDITA = -((411));
int TVN_GETDISPINFOA = -((403));
int TVN_ITEMEXPANDEDA = -((406));
int TVN_ITEMEXPANDINGA = -((405));
int TVN_SELCHANGEDA = -((402));
int TVN_SELCHANGINGA = -((401));
int TVN_SETDISPINFOA = -((404));
int TVN_BEGINDRAG = (TVN_BEGINDRAGA);
int TVN_BEGINLABELEDIT = (TVN_BEGINLABELEDITA);
int TVN_BEGINRDRAG = (TVN_BEGINRDRAGA);
int TVN_DELETEITEM = (TVN_DELETEITEMA);
int TVN_ENDLABELEDIT = (TVN_ENDLABELEDITA);
int TVN_GETDISPINFO = (TVN_GETDISPINFOA);
int TVN_ITEMEXPANDED = (TVN_ITEMEXPANDEDA);
int TVN_ITEMEXPANDING = (TVN_ITEMEXPANDINGA);
int TVN_SELCHANGED = (TVN_SELCHANGEDA);
int TVN_SELCHANGING = (TVN_SELCHANGINGA);
int TVN_SETDISPINFO = (TVN_SETDISPINFOA);
int UDM_GETACCEL = (1132);
int UDM_GETBASE = (1134);
int UDM_GETBUDDY = (1130);
int UDM_GETPOS = (1128);
int UDM_GETRANGE = (1126);
int UDM_SETACCEL = (1131);
int UDM_SETBASE = (1133);
int UDM_SETBUDDY = (1129);
int UDM_SETPOS = (1127);
int UDM_SETRANGE = (1125);
int UDN_DELTAPOS = -((722));
int WM_ACTIVATE = (6);
int WM_ACTIVATEAPP = (28);
int WM_ASKCBFORMATNAME = (780);
int WM_CANCELJOURNAL = (75);
int WM_CANCELMODE = (31);
int WM_CAPTURECHANGED = (533);
int WM_CHANGECBCHAIN = (781);
int WM_CHAR = (258);
int WM_CHARTOITEM = (47);
int WM_CHILDACTIVATE = (34);
int WM_CHOOSEFONT_GETLOGFONT = (1025);
int WM_CHOOSEFONT_SETLOGFONT = (1125);
int WM_CHOOSEFONT_SETFLAGS = (1126);
int WM_CLEAR = (771);
int WM_CLOSE = (16);
int WM_COMMAND = (273);
int WM_COMPACTING = (65);
int WM_COMPAREITEM = (57);
int WM___FILE__MENU = (123);
int WM_COPY = (769);
int WM_COPYDATA = (74);
int WM_CREATE = (1);
int WM_CTLCOLORBTN = (309);
int WM_CTLCOLORDLG = (310);
int WM_CTLCOLOREDIT = (307);
int WM_CTLCOLORLISTBOX = (308);
int WM_CTLCOLORMSGBOX = (306);
int WM_CTLCOLORSCROLLBAR = (311);
int WM_CTLCOLORSTATIC = (312);
int WM_CUT = (768);
int WM_DEADCHAR = (259);
int WM_DELETEITEM = (45);
int WM_DESTROY = (2);
int WM_DESTROYCLIPBOARD = (775);
int WM_DEVICECHANGE = (537);
int WM_DEVMODECHANGE = (27);
int WM_DISPLAYCHANGE = (126);
int WM_DRAWCLIPBOARD = (776);
int WM_DRAWITEM = (43);
int WM_DROPFILES = (563);
int WM_ENABLE = (10);
int WM_ENDSESSION = (22);
int WM_ENTERIDLE = (289);
int WM_ENTERMENULOOP = (529);
int WM_ENTERSIZEMOVE = (561);
int WM_ERASEBKGND = (20);
int WM_EXITMENULOOP = (530);
int WM_EXITSIZEMOVE = (562);
int WM_FONTCHANGE = (29);
int WM_GETDLGCODE = (135);
int WM_GETFONT = (49);
int WM_GETHOTKEY = (51);
int WM_GETICON = (127);
int WM_GETMINMAXINFO = (36);
int WM_GETTEXT = (13);
int WM_GETTEXTLENGTH = (14);
int WM_HELP = (83);
int WM_HOTKEY = (786);
int WM_HSCROLL = (276);
int WM_HSCROLLCLIPBOARD = (782);
int WM_ICONERASEBKGND = (39);
int WM_IME_CHAR = (646);
int WM_IME_COMPOSITION = (271);
int WM_IME_COMPOSITIONFULL = (644);
int WM_IME_CONTROL = (643);
int WM_IME_ENDCOMPOSITION = (270);
int WM_IME_KEYDOWN = (656);
int WM_IME_KEYUP = (657);
int WM_IME_NOTIFY = (642);
int WM_IME_SELECT = (645);
int WM_IME_SET__FILE__ = (641);
int WM_IME_STARTCOMPOSITION = (269);
int WM_INITDIALOG = (272);
int WM_INITMENU = (278);
int WM_INITMENUPOPUP = (279);
int WM_INPUTLANGCHANGE = (81);
int WM_INPUTLANGCHANGEREQUEST = (80);
int WM_KEYDOWN = (256);
int WM_KEYUP = (257);
int WM_KILLFOCUS = (8);
int WM_LBUTTONDBLCLK = (515);
int WM_LBUTTONDOWN = (513);
int WM_LBUTTONUP = (514);
int WM_MBUTTONDBLCLK = (521);
int WM_MBUTTONDOWN = (519);
int WM_MBUTTONUP = (520);
int WM_MDIACTIVATE = (546);
int WM_MDICASCADE = (551);
int WM_MDICREATE = (544);
int WM_MDIDESTROY = (545);
int WM_MDIGETACTIVE = (553);
int WM_MDIICONARRANGE = (552);
int WM_MDIMAXIMIZE = (549);
int WM_MDINEXT = (548);
int WM_MDIREFRESHMENU = (564);
int WM_MDIRESTORE = (547);
int WM_MDISETMENU = (560);
int WM_MDITILE = (550);
int WM_MEASUREITEM = (44);
int WM_MENUCHAR = (288);
int WM_MENUSELECT = (287);
int WM_MOUSEACTIVATE = (33);
int WM_MOUSEMOVE = (512);
int WM_MOUSEWHEEL = 0x020A;
int WM_MOVE = (3);
int WM_MOVING = (534);
int WM_NCACTIVATE = (134);
int WM_NCCALCSIZE = (131);
int WM_NCCREATE = (129);
int WM_NCDESTROY = (130);
int WM_NCHITTEST = (132);
int WM_NCLBUTTONDBLCLK = (163);
int WM_NCLBUTTONDOWN = (161);
int WM_NCLBUTTONUP = (162);
int WM_NCMBUTTONDBLCLK = (169);
int WM_NCMBUTTONDOWN = (167);
int WM_NCMBUTTONUP = (168);
int WM_NCMOUSEMOVE = (160);
int WM_NCPAINT = (133);
int WM_NCRBUTTONDBLCLK = (166);
int WM_NCRBUTTONDOWN = (164);
int WM_NCRBUTTONUP = (165);
int WM_NEXTDLGCTL = (40);
int WM_NOTIFY = (78);
int WM_NOTIFYFORMAT = (85);
int WM_NULL = (0);
int WM_PAINT = (15);
int WM_PAINTCLIPBOARD = (777);
int WM_PAINTICON = (38);
int WM_PALETTECHANGED = (785);
int WM_PALETTEISCHANGING = (784);
int WM_PARENTNOTIFY = (528);
int WM_PASTE = (770);
int WM_PENWINFIRST = (896);
int WM_PENWINLAST = (911);
int WM_POWER = (72);
int WM_POWERBROADCAST = (536);
int WM_PRINT = (791);
int WM_PRINTCLIENT = (792);
int WM_PSD_ENVSTAMPRECT = (1029);
int WM_PSD_FULLPAGERECT = (1025);
int WM_PSD_GREEKTEXTRECT = (1028);
int WM_PSD_MARGINRECT = (1027);
int WM_PSD_MINMARGINRECT = (1026);
int WM_PSD_PAGESETUPDLG = (1024);
int WM_PSD_YAFULLPAGERECT = (1030);
int WM_QUERYDRAGICON = (55);
int WM_QUERYENDSESSION = (17);
int WM_QUERYNEWPALETTE = (783);
int WM_QUERYOPEN = (19);
int WM_QUEUESYNC = (35);
int WM_QUIT = (18);
int WM_RBUTTONDBLCLK = (518);
int WM_RBUTTONDOWN = (516);
int WM_RBUTTONUP = (517);
int WM_RENDERALLFORMATS = (774);
int WM_RENDERFORMAT = (773);
int WM_SETCURSOR = (32);
int WM_SETFOCUS = (7);
int WM_SETFONT = (48);
int WM_SETHOTKEY = (50);
int WM_SETICON = (128);
int WM_SETREDRAW = (11);
int WM_SETTEXT = (12);
int WM_SETTINGCHANGE = (26);
int WM_SHOWWINDOW = (24);
int WM_SIZE = (5);
int WM_SIZECLIPBOARD = (779);
int WM_SIZING = (532);
int WM_SPOOLERSTATUS = (42);
int WM_STYLECHANGED = (125);
int WM_STYLECHANGING = (124);
int WM_SYSCHAR = (262);
int WM_SYSCOLORCHANGE = (21);
int WM_SYSCOMMAND = (274);
int WM_SYSDEADCHAR = (263);
int WM_SYSKEYDOWN = (260);
int WM_SYSKEYUP = (261);
int WM_TCARD = (82);
int WM_TIMECHANGE = (30);
int WM_TIMER = (275);
int WM_UNDO = (772);
int WM_USER = (1024);
int WM_USERCHANGED = (84);
int WM_VKEYTOITEM = (46);
int WM_VSCROLL = (277);
int WM_VSCROLLCLIPBOARD = (778);
int WM_WINDOWPOSCHANGED = (71);
int WM_WINDOWPOSCHANGING = (70);
int WM_WININICHANGE = (26);
int WM_KEYFIRST = (256);
int WM_KEYLAST = (264);
int WM_MOUSEFIRST = (512);
int WM_MOUSELAST = (521);
}
struct VA_LIST
{
}


struct ABC
{
	int abcA;
	UINT abcB;
	int abcC;
}

alias ABC* LPABC;
alias ABC _ABC;
alias ABC TABC;
alias ABC* PABC;

struct ABCFLOAT
{
	FLOAT abcfA;
	FLOAT abcfB;
	FLOAT abcfC;
}

alias ABCFLOAT* LPABCFLOAT;
alias ABCFLOAT _ABCFLOAT;
alias ABCFLOAT TABCFLOAT;
alias ABCFLOAT* PABCFLOAT;

struct ACCEL
{
	ubyte fVirt;
	ushort key;
	ushort cmd;
}

alias ACCEL* LPACCEL;
alias ACCEL _ACCEL;
alias ACCEL TACCEL;
alias ACCEL* PACCEL;

struct ACE_HEADER
{
	ubyte AceType;
	ubyte AceFlags;
	ushort AceSize;
}

alias ACE_HEADER _ACE_HEADER;
alias ACE_HEADER TACE_HEADER;
alias ACE_HEADER* PACE_HEADER;
alias DWORD ACCESS_MASK;
alias ACCESS_MASK REGSAM;

struct ACCESS_ALLOWED_ACE
{
	ACE_HEADER Header;
	ACCESS_MASK Mask;
	DWORD SidStart;
}

alias ACCESS_ALLOWED_ACE _ACCESS_ALLOWED_ACE;
alias ACCESS_ALLOWED_ACE TACCESS_ALLOWED_ACE;
alias ACCESS_ALLOWED_ACE* PACCESS_ALLOWED_ACE;

struct ACCESS_DENIED_ACE
{
	ACE_HEADER Header;
	ACCESS_MASK Mask;
	DWORD SidStart;
}

alias ACCESS_DENIED_ACE _ACCESS_DENIED_ACE;
alias ACCESS_DENIED_ACE TACCESS_DENIED_ACE;

struct ACCESSTIMEOUT
{
	UINT cbSize;
	DWORD dwFlags;
	DWORD iTimeOutMSec;
}

alias ACCESSTIMEOUT _ACCESSTIMEOUT;
alias ACCESSTIMEOUT TACCESSTIMEOUT;
alias ACCESSTIMEOUT* PACCESSTIMEOUT;

struct ACL
{
	ubyte AclRevision;
	ubyte Sbz1;
	ushort AclSize;
	ushort AceCount;
	ushort Sbz2;
}

alias ACL* PACL;
alias ACL _ACL;
alias ACL TACL;

struct ACL_REVISION_INFORMATION
{
	DWORD AclRevision;
}

alias ACL_REVISION_INFORMATION _ACL_REVISION_INFORMATION;
alias ACL_REVISION_INFORMATION TACLREVISIONINFORMATION;
alias ACL_REVISION_INFORMATION* PACLREVISIONINFORMATION;

struct ACL_SIZE_INFORMATION
{
	DWORD AceCount;
	DWORD AclBytesInUse;
	DWORD AclBytesFree;
}

alias ACL_SIZE_INFORMATION _ACL_SIZE_INFORMATION;
alias ACL_SIZE_INFORMATION TACLSIZEINFORMATION;
alias ACL_SIZE_INFORMATION* PACLSIZEINFORMATION;

struct ACTION_HEADER
{
	ULONG transport_id;
	USHORT action_code;
	USHORT reserved;
}

alias ACTION_HEADER _ACTION_HEADER;
alias ACTION_HEADER TACTIONHEADER;
alias ACTION_HEADER* PACTIONHEADER;

struct ADAPTER_STATUS
{
	UCHAR[1 + 5] adapter_address;
	UCHAR rev_major;
	UCHAR reserved0;
	UCHAR adapter_type;
	UCHAR rev_minor;
	ushort duration;
	ushort frmr_recv;
	ushort frmr_xmit;
	ushort iframe_recv_err;
	ushort xmit_aborts;
	DWORD xmit_success;
	DWORD recv_success;
	ushort iframe_xmit_err;
	ushort recv_buff_unavail;
	ushort t1_timeouts;
	ushort ti_timeouts;
	DWORD reserved1;
	ushort free_ncbs;
	ushort max_cfg_ncbs;
	ushort max_ncbs;
	ushort xmit_buf_unavail;
	ushort max_dgram_size;
	ushort pending_sess;
	ushort max_cfg_sess;
	ushort max_sess;
	ushort max_sess_pkt_size;
	ushort name_count;
}

alias ADAPTER_STATUS _ADAPTER_STATUS;
alias ADAPTER_STATUS TADAPTERSTATUS;
alias ADAPTER_STATUS* PADAPTERSTATUS;

struct ADDJOB_INFO_1
{
	LPTSTR Path;
	DWORD JobId;
}

alias ADDJOB_INFO_1 _ADDJOB_INFO_1;
alias ADDJOB_INFO_1 TADDJOB_INFO_1;
alias ADDJOB_INFO_1* PADDJOB_INFO_1;

struct ANIMATIONINFO
{
	UINT cbSize;
	int iMinAnimate;
}

alias ANIMATIONINFO* LPANIMATIONINFO;
alias ANIMATIONINFO _ANIMATIONINFO;
alias ANIMATIONINFO TANIMATIONINFO;
alias ANIMATIONINFO* PANIMATIONINFO;

struct RECT
{
	LONG left;
	LONG top;
	LONG right;
	LONG bottom;
}

alias RECT* LPRECT;
alias RECT _RECT;
alias RECT TRECT;
alias RECT* PRECT;

struct RECTL
{
	LONG left;
	LONG top;
	LONG right;
	LONG bottom;
}

alias RECTL _RECTL;
alias RECTL TRECTL;
alias RECTL* PRECTL;

struct APPBARDATA
{
	DWORD cbSize;
	HWND hWnd;
	UINT uCallbackMessage;
	UINT uEdge;
	RECT rc;
	LPARAM lParam;
}

alias APPBARDATA _APPBARDATA;
alias APPBARDATA TAPPBARDATA;
alias APPBARDATA* PAPPBARDATA;

struct BITMAP
{
	LONG bmType;
	LONG bmWidth;
	LONG bmHeight;
	LONG bmWidthBytes;
	ushort bmPlanes;
	ushort bmBitsPixel;
	LPVOID bmBits;
}

alias BITMAP* PBITMAP;
alias BITMAP* NPBITMAP;
alias BITMAP* LPBITMAP;
alias BITMAP TAGBITMAP;
alias BITMAP TBITMAP;

struct BITMAPCOREHEADER
{
	DWORD bcSize;
	ushort bcWidth;
	ushort bcHeight;
	ushort bcPlanes;
	ushort bcBitCount;
}

alias BITMAPCOREHEADER TAGBITMAPCOREHEADER;
alias BITMAPCOREHEADER TBITMAPCOREHEADER;
alias BITMAPCOREHEADER* PBITMAPCOREHEADER;

struct RGBTRIPLE
{
	ubyte rgbtBlue;
	ubyte rgbtGreen;
	ubyte rgbtRed;
}

alias RGBTRIPLE TAGRGBTRIPLE;
alias RGBTRIPLE TRGBTRIPLE;
alias RGBTRIPLE* PRGBTRIPLE;

struct BITMAPCOREINFO
{
	BITMAPCOREHEADER bmciHeader;
	RGBTRIPLE[1 + 0] bmciColors;
}

alias BITMAPCOREINFO* PBITMAPCOREINFO;
alias BITMAPCOREINFO* LPBITMAPCOREINFO;
alias BITMAPCOREINFO _BITMAPCOREINFO;
alias BITMAPCOREINFO TBITMAPCOREINFO;

struct BITMAPINFOHEADER
{
	DWORD biSize;
	LONG biWidth;
	LONG biHeight;
	ushort biPlanes;
	ushort biBitCount;
	DWORD biCompression;
	DWORD biSizeImage;
	LONG biXPelsPerMeter;
	LONG biYPelsPerMeter;
	DWORD biClrUsed;
	DWORD biClrImportant;
}

alias BITMAPINFOHEADER* LPBITMAPINFOHEADER;
alias BITMAPINFOHEADER TBITMAPINFOHEADER;
alias BITMAPINFOHEADER* PBITMAPINFOHEADER;

struct RGBQUAD
{
	ubyte rgbBlue;
	ubyte rgbGreen;
	ubyte rgbRed;
	ubyte rgbReserved;
}

alias RGBQUAD TAGRGBQUAD;
alias RGBQUAD TRGBQUAD;
alias RGBQUAD* PRGBQUAD;

struct BITMAPINFO
{
	BITMAPINFOHEADER bmiHeader;
	RGBQUAD[1 + 0] bmiColors;
}

alias BITMAPINFO* LPBITMAPINFO;
alias BITMAPINFO* PBITMAPINFO;
alias BITMAPINFO TBITMAPINFO;
alias int FXPT2DOT30;
alias FXPT2DOT30* LPFXPT2DOT30;
alias FXPT2DOT30 TPFXPT2DOT30;
alias FXPT2DOT30* PPFXPT2DOT30;

struct CIEXYZ
{
	FXPT2DOT30 ciexyzX;
	FXPT2DOT30 ciexyzY;
	FXPT2DOT30 ciexyzZ;
}

alias CIEXYZ TAGCIEXYZ;
alias CIEXYZ* LPCIEXYZ;
alias CIEXYZ TPCIEXYZ;
alias CIEXYZ* PCIEXYZ;

struct CIEXYZTRIPLE
{
	CIEXYZ ciexyzRed;
	CIEXYZ ciexyzGreen;
	CIEXYZ ciexyzBlue;
}

alias CIEXYZTRIPLE TAGCIEXYZTRIPLE;
alias CIEXYZTRIPLE* LPCIEXYZTRIPLE;
alias CIEXYZTRIPLE TCIEXYZTRIPLE;
alias CIEXYZTRIPLE* PCIEXYZTRIPLE;

struct BITMAPV4HEADER
{
	DWORD bV4Size;
	LONG bV4Width;
	LONG bV4Height;
	ushort bV4Planes;
	ushort bV4BitCount;
	DWORD bV4V4Compression;
	DWORD bV4SizeImage;
	LONG bV4XPelsPerMeter;
	LONG bV4YPelsPerMeter;
	DWORD bV4ClrUsed;
	DWORD bV4ClrImportant;
	DWORD bV4RedMask;
	DWORD bV4GreenMask;
	DWORD bV4BlueMask;
	DWORD bV4AlphaMask;
	DWORD bV4CSType;
	CIEXYZTRIPLE bV4Endpoints;
	DWORD bV4GammaRed;
	DWORD bV4GammaGreen;
	DWORD bV4GammaBlue;
}

alias BITMAPV4HEADER* LPBITMAPV4HEADER;
alias BITMAPV4HEADER TBITMAPV4HEADER;
alias BITMAPV4HEADER* PBITMAPV4HEADER;

align(1) struct BITMAPFILEHEADER
{
	ushort bfType;
	DWORD bfSize;
	ushort bfReserved1;
	ushort bfReserved2;
	DWORD bfOffBits;
}


struct BLOB
{
	ULONG cbSize;
	ubyte* pBlobData;
}

alias BLOB _BLOB;
alias BLOB TBLOB;
alias BLOB* PBLOB;

struct SHITEMID
{
	USHORT cb;
	ubyte[1 + 0] abID;
}

alias SHITEMID* LPSHITEMID;
alias SHITEMID* LPCSHITEMID;
alias SHITEMID _SHITEMID;
alias SHITEMID TSHITEMID;
alias SHITEMID* PSHITEMID;

struct ITEMIDLIST
{
	SHITEMID mkid;
}

alias ITEMIDLIST* LPITEMIDLIST;
alias ITEMIDLIST* LPCITEMIDLIST;
alias ITEMIDLIST _ITEMIDLIST;
alias ITEMIDLIST TITEMIDLIST;
alias ITEMIDLIST* PITEMIDLIST;

struct BROWSEINFO
{
	HWND hwndOwner;
	LPCITEMIDLIST pidlRoot;
	LPSTR pszDisplayName;
	LPCSTR lpszTitle;
	UINT ulFlags;
	BFFCALLBACK lpfn;
	LPARAM lParam;
	int iImage;
}

alias BROWSEINFO* LPBROWSEINFO;
alias BROWSEINFO _BROWSEINFO;
alias BROWSEINFO TBROWSEINFO;
alias BROWSEINFO* PBROWSEINFO;

struct FILETIME
{
	DWORD dwLowDateTime;
	DWORD dwHighDateTime;
}

alias FILETIME* LPFILETIME;
alias FILETIME _FILETIME;
alias FILETIME TFILETIME;
alias FILETIME* PFILETIME;

struct BY_HANDLE_FILE_INFORMATION
{
	DWORD dwFileAttributes;
	FILETIME ftCreationTime;
	FILETIME ftLastAccessTime;
	FILETIME ftLastWriteTime;
	DWORD dwVolumeSerialNumber;
	DWORD nFileSizeHigh;
	DWORD nFileSizeLow;
	DWORD nNumberOfLinks;
	DWORD nFileIndexHigh;
	DWORD nFileIndexLow;
}

alias BY_HANDLE_FILE_INFORMATION* LPBY_HANDLE_FILE_INFORMATION;
alias BY_HANDLE_FILE_INFORMATION _BY_HANDLE_FILE_INFORMATION;
alias BY_HANDLE_FILE_INFORMATION TBYHANDLEFILEINFORMATION;
alias BY_HANDLE_FILE_INFORMATION* PBYHANDLEFILEINFORMATION;

struct FIXED
{
	ushort fract;
	int value;
}

alias FIXED _FIXED;
alias FIXED TFIXED;
alias FIXED* PFIXED;

struct POINT
{
	LONG x;
	LONG y;
}

alias POINT* LPPOINT;
alias POINT TAGPOINT;
alias POINT TPOINT;
alias POINT* PPOINT;

struct POINTFX
{
	FIXED x;
	FIXED y;
}

alias POINTFX TAGPOINTFX;
alias POINTFX TPOINTFX;
alias POINTFX* PPOINTFX;

struct POINTL
{
	LONG x;
	LONG y;
}

alias POINTL _POINTL;
alias POINTL TPOINTL;
alias POINTL* PPOINTL;

struct TSMALLPOINT
{
	byte X, Y;
}


struct POINTS
{
	SHORT x;
	SHORT y;
}

alias POINTS TAGPOINTS;
alias POINTS TPOINTS;
alias POINTS* PPOINTS;

struct CANDIDATEFORM
{
	DWORD dwIndex;
	DWORD dwStyle;
	POINT ptCurrentPos;
	RECT rcArea;
}

alias CANDIDATEFORM* LPCANDIDATEFORM;
alias CANDIDATEFORM _TAGCANDIDATEFORM;
alias CANDIDATEFORM TCANDIDATEFORM;
alias CANDIDATEFORM* PCANDIDATEFORM;

struct CANDIDATELIST
{
	DWORD dwSize;
	DWORD dwStyle;
	DWORD dwCount;
	DWORD dwSelection;
	DWORD dwPageStart;
	DWORD dwPageSize;
	DWORD[1 + 0] dwOffset;
}

alias CANDIDATELIST* LPCANDIDATELIST;
alias CANDIDATELIST _TAGCANDIDATELIST;
alias CANDIDATELIST TCANDIDATELIST;
alias CANDIDATELIST* PCANDIDATELIST;

struct CREATESTRUCT
{
	LPVOID lpCreateParams;
	HINST hInstance;
	HMENU hMenu;
	HWND hwndParent;
	int cy;
	int cx;
	int y;
	int x;
	LONG style;
	LPCTSTR lpszName;
	LPCTSTR lpszClass;
	DWORD dwExStyle;
}

alias CREATESTRUCT* LPCREATESTRUCT;
alias CREATESTRUCT TAGCREATESTRUCT;
alias CREATESTRUCT TCREATESTRUCT;
alias CREATESTRUCT* PCREATESTRUCT;

struct CBT_CREATEWND
{
	LPCREATESTRUCT lpcs;
	HWND hwndInsertAfter;
}

alias CBT_CREATEWND TAGCBT_CREATEWND;
alias CBT_CREATEWND TCBT_CREATEWND;
alias CBT_CREATEWND* PCBT_CREATEWND;

struct CBTACTIVATESTRUCT
{
	WINBOOL fMouse;
	HWND hWndActive;
}

alias CBTACTIVATESTRUCT TAGCBTACTIVATESTRUCT;
alias CBTACTIVATESTRUCT TCBTACTIVATESTRUCT;
alias CBTACTIVATESTRUCT* PCBTACTIVATESTRUCT;

struct CHAR_INFO
{

	union
	{
		struct
		{
			WCHAR UnicodeChar;
			ushort Attributes;
		}
		struct
		{
			char AsciiChar;
		}
	}
}

alias CHAR_INFO _CHAR_INFO;
alias CHAR_INFO TCHAR_INFO;
alias CHAR_INFO* PCHAR_INFO;

struct CHARFORMAT
{
	UINT cbSize;
	DWORD dwMask;
	DWORD dwEffects;
	LONG yHeight;
	LONG yOffset;
	COLORREF crTextColor;
	ubyte bCharSet;
	ubyte bPitchAndFamily;
	TCHAR[1 + LF_FACESIZE-1] szFaceName;
}

alias CHARFORMAT _CHARFORMAT;
alias CHARFORMAT TCHARFORMAT;
alias CHARFORMAT* PCHARFORMAT;

struct CHARRANGE
{
	LONG cpMin;
	LONG cpMax;
}

alias CHARRANGE _CHARRANGE;
alias CHARRANGE TCHARRANGE;
alias CHARRANGE* PCHARRANGE;

struct CHARSET
{
	DWORD[1 + 2] aflBlock;
	DWORD flLang;
}

alias CHARSET TAGCHARSET;
alias CHARSET TCHARSET;
alias CHARSET* PCHARSET;

struct FONTSIGNATURE
{
	DWORD[1 + 3] fsUsb;
	DWORD[1 + 1] fsCsb;
}

alias FONTSIGNATURE* LPFONTSIGNATURE;
alias FONTSIGNATURE TAGFONTSIGNATURE;
alias FONTSIGNATURE TFONTSIGNATURE;
alias FONTSIGNATURE* PFONTSIGNATURE;

struct CHARSETINFO
{
	UINT ciCharset;
	UINT ciACP;
	FONTSIGNATURE fs;
}

alias CHARSETINFO* LPCHARSETINFO;
alias CHARSETINFO TCHARSETINFO;
alias CHARSETINFO* PCHARSETINFO;

struct TCHOOSECOLOR
{
	DWORD lStructSize;
	HWND hwndOwner;
	HWND hInstance;
	COLORREF rgbResult;
	COLORREF* lpCustColors;
	DWORD Flags;
	LPARAM lCustData;
	LPCCHOOKPROC lpfnHook;
	LPCTSTR lpTemplateName;
}

alias TCHOOSECOLOR* LPCHOOSECOLOR;
alias TCHOOSECOLOR* PCHOOSECOLOR;

struct LOGFONT
{
	LONG lfHeight;
	LONG lfWidth;
	LONG lfEscapement;
	LONG lfOrientation;
	LONG lfWeight;
	ubyte lfItalic;
	ubyte lfUnderline;
	ubyte lfStrikeOut;
	ubyte lfCharSet;
	ubyte lfOutPrecision;
	ubyte lfClipPrecision;
	ubyte lfQuality;
	ubyte lfPitchAndFamily;
	TCHAR[1 + LF_FACESIZE-1] lfFaceName;
}

alias LOGFONT* LPLOGFONT;
alias LOGFONT TLOGFONT;
alias LOGFONT TLOGFONTA;
alias LOGFONT* PLOGFONT;

struct LOGFONTW
{
    LONG lfHeight;
    LONG lfWidth;
    LONG lfEscapement;
    LONG lfOrientation;
    LONG lfWeight;
    ubyte lfItalic;
    ubyte lfUnderline;
    ubyte lfStrikeOut;
    ubyte lfCharSet;
    ubyte lfOutPrecision;
    ubyte lfClipPrecision;
    ubyte lfQuality;
    ubyte lfPitchAndFamily;
    WCHAR lfFaceName[LF_FACESIZE];
};

alias LOGFONTW* LPLOGFONTW;
alias LOGFONTW TLOGFONTW;
alias LOGFONTW TLOGFONTWA;
alias LOGFONTW* PLOGFONTW;

struct TCHOOSEFONT
{
	DWORD lStructSize;
	HWND hwndOwner;
	HDC hDC;
	LPLOGFONT lpLogFont;
	INT iPointSize;
	DWORD Flags;
	DWORD rgbColors;
	LPARAM lCustData;
	LPCFHOOKPROC lpfnHook;
	LPCTSTR lpTemplateName;
	HINST hInstance;
	LPTSTR lpszStyle;
	ushort nFontType;
	ushort ___MISSING_ALIGNMENT__;
	INT nSizeMin;
	INT nSizeMax;
}

alias TCHOOSEFONT* LPCHOOSEFONT;
alias TCHOOSEFONT* PCHOOSEFONT;

struct CIDA
{
	UINT cidl;
	UINT[1 + 0] aoffset;
}

alias CIDA* LPIDA;
alias CIDA _IDA;
alias CIDA TIDA;
alias CIDA* PIDA;

struct CLIENTCREATESTRUCT
{
	HANDLE hWindowMenu;
	UINT idFirstChild;
}

alias CLIENTCREATESTRUCT* LPCLIENTCREATESTRUCT;
alias CLIENTCREATESTRUCT TAGCLIENTCREATESTRUCT;
alias CLIENTCREATESTRUCT TCLIENTCREATESTRUCT;
alias CLIENTCREATESTRUCT* PCLIENTCREATESTRUCT;

struct CMINVOKECOMMANDINFO
{
	DWORD cbSize;
	DWORD fMask;
	HWND hwnd;
	LPCSTR lpVerb;
	LPCSTR lpParameters;
	LPCSTR lpDirectory;
	int nShow;
	DWORD dwHotKey;
	HANDLE hIcon;
}

alias CMINVOKECOMMANDINFO* LPCMINVOKECOMMANDINFO;
alias CMINVOKECOMMANDINFO _CMINVOKECOMMANDINFO;
alias CMINVOKECOMMANDINFO TCMINVOKECOMMANDINFO;
alias CMINVOKECOMMANDINFO* PCMINVOKECOMMANDINFO;

struct COLORADJUSTMENT
{
	ushort caSize;
	ushort caFlags;
	ushort caIlluminantIndex;
	ushort caRedGamma;
	ushort caGreenGamma;
	ushort caBlueGamma;
	ushort caReferenceBlack;
	ushort caReferenceWhite;
	SHORT caContrast;
	SHORT caBrightness;
	SHORT caColorfulness;
	SHORT caRedGreenTint;
}

alias COLORADJUSTMENT* LPCOLORADJUSTMENT;
alias COLORADJUSTMENT TAGCOLORADJUSTMENT;
alias COLORADJUSTMENT TCOLORADJUSTMENT;
alias COLORADJUSTMENT* PCOLORADJUSTMENT;

struct COLORMAP
{
	COLORREF from;
	COLORREF _to;
}

alias COLORMAP* LPCOLORMAP;
alias COLORMAP _COLORMAP;
alias COLORMAP TCOLORMAP;
alias COLORMAP* PCOLORMAP;

struct DCB
{
	DWORD DCBlength;
	DWORD BaudRate;
	int flag0;
	ushort wReserved;
	ushort XonLim;
	ushort XoffLim;
	ubyte ByteSize;
	ubyte Parity;
	ubyte StopBits;
	char XonChar;
	char XoffChar;
	char ErrorChar;
	char EofChar;
	char EvtChar;
	ushort wReserved1;
}

alias DCB* LPDCB;
alias DCB _DCB;
alias DCB TDCB;
alias DCB* PDCB;
const{
int bm_DCB_fBinary = (0x1);
int bp_DCB_fBinary = (0);
int bm_DCB_fParity = (0x2);
int bp_DCB_fParity = (1);
int bm_DCB_fOutxCtsFlow = (0x4);
int bp_DCB_fOutxCtsFlow = (2);
int bm_DCB_fOutxDsrFlow = (0x8);
int bp_DCB_fOutxDsrFlow = (3);
int bm_DCB_fDtrControl = (0x30);
int bp_DCB_fDtrControl = (4);
int bm_DCB_fDsrSensitivity = (0x40);
int bp_DCB_fDsrSensitivity = (6);
int bm_DCB_fTXContinueOnXoff = (0x80);
int bp_DCB_fTXContinueOnXoff = (7);
int bm_DCB_fOutX = (0x100);
int bp_DCB_fOutX = (8);
int bm_DCB_fInX = (0x200);
int bp_DCB_fInX = (9);
int bm_DCB_fErrorChar = (0x400);
int bp_DCB_fErrorChar = (10);
int bm_DCB_fNull = (0x800);
int bp_DCB_fNull = (11);
int bm_DCB_fRtsControl = (0x3000);
int bp_DCB_fRtsControl = (12);
int bm_DCB_fAbortOnError = (0x4000);
int bp_DCB_fAbortOnError = (14);
int bm_DCB_fDummy2 = (0xFFFF8000);
int bp_DCB_fDummy2 = (15);
}

struct COMMCONFIG
{
	DWORD dwSize;
	ushort wVersion;
	ushort wReserved;
	DCB dcb;
	DWORD dwProviderSubType;
	DWORD dwProviderOffset;
	DWORD dwProviderSize;
	WCHAR[1 + 0] wcProviderData;
}

alias COMMCONFIG* LPCOMMCONFIG;
alias COMMCONFIG _COMM_CONFIG;
alias COMMCONFIG TCOMMCONFIG;
alias COMMCONFIG* PCOMMCONFIG;

struct COMMPROP
{
	ushort wPacketLength;
	ushort wPacketVersion;
	DWORD dwServiceMask;
	DWORD dwReserved1;
	DWORD dwMaxTxQueue;
	DWORD dwMaxRxQueue;
	DWORD dwMaxBaud;
	DWORD dwProvSubType;
	DWORD dwProvCapabilities;
	DWORD dwSettableParams;
	DWORD dwSettableBaud;
	ushort wSettableData;
	ushort wSettableStopParity;
	DWORD dwCurrentTxQueue;
	DWORD dwCurrentRxQueue;
	DWORD dwProvSpec1;
	DWORD dwProvSpec2;
	WCHAR[1 + 0] wcProvChar;
}

alias COMMPROP* LPCOMMPROP;
alias COMMPROP _COMMPROP;
alias COMMPROP TCOMMPROP;
alias COMMPROP* PCOMMPROP;

struct COMMTIMEOUTS
{
	DWORD ReadIntervalTimeout;
	DWORD ReadTotalTimeoutMultiplier;
	DWORD ReadTotalTimeoutConstant;
	DWORD WriteTotalTimeoutMultiplier;
	DWORD WriteTotalTimeoutConstant;
}

alias COMMTIMEOUTS* LPCOMMTIMEOUTS;
alias COMMTIMEOUTS _COMMTIMEOUTS;
alias COMMTIMEOUTS TCOMMTIMEOUTS;
alias COMMTIMEOUTS* PCOMMTIMEOUTS;

struct COMPAREITEMSTRUCT
{
	UINT CtlType;
	UINT CtlID;
	HWND hwndItem;
	UINT itemID1;
	DWORD itemData1;
	UINT itemID2;
	DWORD itemData2;
}

alias COMPAREITEMSTRUCT TAGCOMPAREITEMSTRUCT;
alias COMPAREITEMSTRUCT TCOMPAREITEMSTRUCT;
alias COMPAREITEMSTRUCT* PCOMPAREITEMSTRUCT;

struct COMPCOLOR
{
	COLORREF crText;
	COLORREF crBackground;
	DWORD dwEffects;
}

alias COMPCOLOR TCOMPCOLOR;
alias COMPCOLOR* PCOMPCOLOR;

struct COMPOSITIONFORM
{
	DWORD dwStyle;
	POINT ptCurrentPos;
	RECT rcArea;
}

alias COMPOSITIONFORM* LPCOMPOSITIONFORM;
alias COMPOSITIONFORM _TAGCOMPOSITIONFORM;
alias COMPOSITIONFORM TCOMPOSITIONFORM;
alias COMPOSITIONFORM* PCOMPOSITIONFORM;

struct COMSTAT
{
	int flag0;
	DWORD cbInQue;
	DWORD cbOutQue;
}

alias COMSTAT* LPCOMSTAT;
alias COMSTAT _COMSTAT;
alias COMSTAT TCOMSTAT;
alias COMSTAT* PCOMSTAT;
const{
int bm_COMSTAT_fCtsHold = (0x1);
int bp_COMSTAT_fCtsHold = (0);
int bm_COMSTAT_fDsrHold = (0x2);
int bp_COMSTAT_fDsrHold = (1);
int bm_COMSTAT_fRlsdHold = (0x4);
int bp_COMSTAT_fRlsdHold = (2);
int bm_COMSTAT_fXoffHold = (0x8);
int bp_COMSTAT_fXoffHold = (3);
int bm_COMSTAT_fXoffSent = (0x10);
int bp_COMSTAT_fXoffSent = (4);
int bm_COMSTAT_fEof = (0x20);
int bp_COMSTAT_fEof = (5);
int bm_COMSTAT_fTxim = (0x40);
int bp_COMSTAT_fTxim = (6);
int bm_COMSTAT_fReserved = (0xFFFFFF80);
int bp_COMSTAT_fReserved = (7);
}
struct CONSOLE_CURSOR_INFO
{
	DWORD dwSize;
	WINBOOL bVisible;
}

alias CONSOLE_CURSOR_INFO* PCONSOLE_CURSOR_INFO;
alias CONSOLE_CURSOR_INFO _CONSOLE_CURSOR_INFO;
alias CONSOLE_CURSOR_INFO TCONSOLECURSORINFO;
alias CONSOLE_CURSOR_INFO* PCONSOLECURSORINFO;
alias CONSOLE_CURSOR_INFO TCURSORINFO;

struct COORD
{
	SHORT X;
	SHORT Y;
}

alias COORD _COORD;
alias COORD TCOORD;
alias COORD* PCOORD;

struct SMALL_RECT
{
	SHORT Left;
	SHORT Top;
	SHORT Right;
	SHORT Bottom;
}

alias SMALL_RECT _SMALL_RECT;
alias SMALL_RECT TSMALL_RECT;
alias SMALL_RECT* PSMALL_RECT;

align(1) struct CONSOLE_SCREEN_BUFFER_INFO
{
	COORD dwSize;
	COORD dwCursorPosition;
	ushort wAttributes;
	SMALL_RECT srWindow;
	COORD dwMaximumWindowSize;
}

alias CONSOLE_SCREEN_BUFFER_INFO* PCONSOLE_SCREEN_BUFFER_INFO;
alias CONSOLE_SCREEN_BUFFER_INFO _CONSOLE_SCREEN_BUFFER_INFO;
alias CONSOLE_SCREEN_BUFFER_INFO TCONSOLESCREENBUFFERINFO;
alias CONSOLE_SCREEN_BUFFER_INFO* PCONSOLESCREENBUFFERINFO;

struct FLOATING_SAVE_AREA
{
	DWORD ControlWord;
	DWORD StatusWord;
	DWORD TagWord;
	DWORD ErrorOffset;
	DWORD ErrorSelector;
	DWORD DataOffset;
	DWORD DataSelector;
	ubyte[1 + 79] RegisterArea;
	DWORD Cr0NpxState;
}

alias FLOATING_SAVE_AREA _FLOATING_SAVE_AREA;
alias FLOATING_SAVE_AREA TFLOATINGSAVEAREA;
alias FLOATING_SAVE_AREA* PFLOATINGSAVEAREA;

enum
{
//
// The following flags control the contents of the CONTEXT structure.
//
	CONTEXT_i386 = 0x00010000,    // this assumes that i386 and
	CONTEXT_i486 = 0x00010000,    // i486 have identical context records

	CONTEXT_CONTROL =         (CONTEXT_i386 | 0x00000001), // SS:SP, CS:IP, FLAGS, BP
	CONTEXT_INTEGER =         (CONTEXT_i386 | 0x00000002), // AX, BX, CX, DX, SI, DI
	CONTEXT_SEGMENTS =        (CONTEXT_i386 | 0x00000004), // DS, ES, FS, GS
	CONTEXT_FLOATING_POINT =  (CONTEXT_i386 | 0x00000008), // 387 state
	CONTEXT_DEBUG_REGISTERS = (CONTEXT_i386 | 0x00000010), // DB 0-3,6,7

	CONTEXT_FULL = (CONTEXT_CONTROL | CONTEXT_INTEGER | CONTEXT_SEGMENTS),
}

struct CONTEXT
{
	DWORD ContextFlags;
	DWORD Dr0;
	DWORD Dr1;
	DWORD Dr2;
	DWORD Dr3;
	DWORD Dr6;
	DWORD Dr7;
	FLOATING_SAVE_AREA FloatSave;
	DWORD SegGs;
	DWORD SegFs;
	DWORD SegEs;
	DWORD SegDs;
	DWORD Edi;
	DWORD Esi;
	DWORD Ebx;
	DWORD Edx;
	DWORD Ecx;
	DWORD Eax;
	DWORD Ebp;
	DWORD Eip;
	DWORD SegCs;
	DWORD EFlags;
	DWORD Esp;
	DWORD SegSs;
}

alias CONTEXT* LPCONTEXT;
alias CONTEXT _CONTEXT;
alias CONTEXT TCONTEXT;
alias CONTEXT* PCONTEXT;

struct LIST_ENTRY
{
	_LIST_ENTRY* Flink;
	_LIST_ENTRY* Blink;
}

alias LIST_ENTRY _LIST_ENTRY;
alias LIST_ENTRY TLISTENTRY;
alias LIST_ENTRY* PLISTENTRY;

struct CRITICAL_SECTION_DEBUG
{
	ushort _Type;
	ushort CreatorBackTraceIndex;
	_CRITICAL_SECTION* CriticalSection;
	LIST_ENTRY ProcessLocksList;
	DWORD EntryCount;
	DWORD ContentionCount;
	DWORD Depth;
	PVOID[1 + 4] OwnerBackTrace;
}

alias CRITICAL_SECTION_DEBUG* LPCRITICAL_SECTION_DEBUG;
alias CRITICAL_SECTION_DEBUG PCRITICAL_SECTION_DEBUG;
alias CRITICAL_SECTION_DEBUG _CRITICAL_SECTION_DEBUG;
alias CRITICAL_SECTION_DEBUG TCRITICALSECTIONDEBUG;
alias CRITICAL_SECTION_DEBUG* PCRITICALSECTIONDEBUG;

struct CRITICAL_SECTION
{
	PCRITICAL_SECTION_DEBUG DebugInfo;
	LONG LockCount;
	LONG RecursionCount;
	HANDLE OwningThread;
	HANDLE LockSemaphore;
	DWORD Reserved;
}

alias CRITICAL_SECTION* LPCRITICAL_SECTION;
alias CRITICAL_SECTION* PCRITICAL_SECTION;
alias CRITICAL_SECTION _CRITICAL_SECTION;
alias CRITICAL_SECTION TCRITICALSECTION;
alias CRITICAL_SECTION* PCRITICALSECTION;

struct SECURITY_QUALITY_OF_SERVICE
{
	DWORD Length;
	SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
	WINBOOL ContextTrackingMode;
	ubyte EffectiveOnly;
}

alias SECURITY_QUALITY_OF_SERVICE* PSECURITY_QUALITY_OF_SERVICE;
alias SECURITY_QUALITY_OF_SERVICE _SECURITY_QUALITY_OF_SERVICE;
alias SECURITY_QUALITY_OF_SERVICE TSECURITYQUALITYOFSERVICE;
alias SECURITY_QUALITY_OF_SERVICE* PSECURITYQUALITYOFSERVICE;

struct CONVCONTEXT
{
	UINT cb;
	UINT wFlags;
	UINT wCountryID;
	int iCodePage;
	DWORD dwLangID;
	DWORD dwSecurity;
	SECURITY_QUALITY_OF_SERVICE qos;
}

alias CONVCONTEXT TAGCONVCONTEXT;
alias CONVCONTEXT TCONVCONTEXT;
alias CONVCONTEXT* PCONVCONTEXT;

struct CONVINFO
{
	DWORD cb;
	DWORD hUser;
	HCONV hConvPartner;
	HSZ hszSvcPartner;
	HSZ hszServiceReq;
	HSZ hszTopic;
	HSZ hszItem;
	UINT wFmt;
	UINT wType;
	UINT wStatus;
	UINT wConvst;
	UINT wLastError;
	HCONVLIST hConvList;
	CONVCONTEXT ConvCtxt;
	HWND _hwnd;
	HWND hwndPartner;
}

alias CONVINFO TAGCONVINFO;
alias CONVINFO TCONVINFO;
alias CONVINFO* PCONVINFO;

struct COPYDATASTRUCT
{
	DWORD dwData;
	DWORD cbData;
	PVOID lpData;
}

alias COPYDATASTRUCT TAGCOPYDATASTRUCT;
alias COPYDATASTRUCT TCOPYDATASTRUCT;
alias COPYDATASTRUCT* PCOPYDATASTRUCT;

struct CPINFO
{
	UINT MaxCharSize;
	ubyte[1 + MAX_DEFAULTCHAR-1] DefaultChar;
	ubyte[1 + MAX_LEADBYTES-1] LeadByte;
}

alias CPINFO* LPCPINFO;
alias CPINFO _CPINFO;
alias CPINFO TCPINFO;
alias CPINFO* PCPINFO;

struct CPLINFO
{
	int idIcon;
	int idName;
	int idInfo;
	LONG lData;
}

alias CPLINFO TAGCPLINFO;
alias CPLINFO TCPLINFO;
alias CPLINFO* PCPLINFO;

struct CREATE_PROCESS_DEBUG_INFO
{
	HANDLE hFile;
	HANDLE hProcess;
	HANDLE hThread;
	LPVOID lpBaseOfImage;
	DWORD dwDebugInfoFileOffset;
	DWORD nDebugInfoSize;
	LPVOID lpThreadLocalBase;
	LPTHREAD_START_ROUTINE lpStartAddress;
	LPVOID lpImageName;
	ushort fUnicode;
}

alias CREATE_PROCESS_DEBUG_INFO _CREATE_PROCESS_DEBUG_INFO;
alias CREATE_PROCESS_DEBUG_INFO TCREATEPROCESSDEBUGINFO;
alias CREATE_PROCESS_DEBUG_INFO* PCREATEPROCESSDEBUGINFO;

struct CREATE_THREAD_DEBUG_INFO
{
	HANDLE hThread;
	LPVOID lpThreadLocalBase;
	LPTHREAD_START_ROUTINE lpStartAddress;
}

alias CREATE_THREAD_DEBUG_INFO _CREATE_THREAD_DEBUG_INFO;
alias CREATE_THREAD_DEBUG_INFO TCREATETHREADDEBUGINFO;
alias CREATE_THREAD_DEBUG_INFO* PCREATETHREADDEBUGINFO;

struct CURRENCYFMT
{
	UINT NumDigits;
	UINT LeadingZero;
	UINT Grouping;
	LPTSTR lpDecimalSep;
	LPTSTR lpThousandSep;
	UINT NegativeOrder;
	UINT PositiveOrder;
	LPTSTR lpCurrencySymbol;
}

alias CURRENCYFMT _CURRENCYFMT;
alias CURRENCYFMT TCURRENCYFMT;
alias CURRENCYFMT* PCURRENCYFMT;

struct CURSORSHAPE
{
	int xHotSpot;
	int yHotSpot;
	int cx;
	int cy;
	int cbWidth;
	ubyte Planes;
	ubyte BitsPixel;
}

alias CURSORSHAPE* LPCURSORSHAPE;
alias CURSORSHAPE TAGCURSORSHAPE;
alias CURSORSHAPE TCURSORSHAPE;
alias CURSORSHAPE* PCURSORSHAPE;

struct CWPRETSTRUCT
{
	LRESULT lResult;
	LPARAM lParam;
	WPARAM wParam;
	DWORD message;
	HWND hwnd;
}

alias CWPRETSTRUCT TAGCWPRETSTRUCT;
alias CWPRETSTRUCT TCWPRETSTRUCT;
alias CWPRETSTRUCT* PCWPRETSTRUCT;

struct CWPSTRUCT
{
	LPARAM lParam;
	WPARAM wParam;
	UINT message;
	HWND hwnd;
}

alias CWPSTRUCT TAGCWPSTRUCT;
alias CWPSTRUCT TCWPSTRUCT;
alias CWPSTRUCT* PCWPSTRUCT;

struct DATATYPES_INFO_1
{
	LPTSTR pName;
}

alias DATATYPES_INFO_1 _DATATYPES_INFO_1;
alias DATATYPES_INFO_1 TDATATYPESINFO1;
alias DATATYPES_INFO_1* PDATATYPESINFO1;

struct DDEACK
{
	ushort flag0;
}

alias DDEACK TDDEACK;
alias DDEACK* PDDEACK;
const{
int bm_DDEACK_bAppReturnCode = (0xFF);
int bp_DDEACK_bAppReturnCode = (0);
int bm_DDEACK_reserved = (0x3F00);
int bp_DDEACK_reserved = (8);
int bm_DDEACK_fBusy = (0x4000);
int bp_DDEACK_fBusy = (14);
int bm_DDEACK_fAck = (0x8000);
int bp_DDEACK_fAck = (15);
}

struct DDEADVISE
{
	ushort flag0;
	int cfFormat;
}

alias DDEADVISE TDDEADVISE;
alias DDEADVISE* PDDEADVISE;
const{
int bm_DDEADVISE_reserved = (0x3FFF);
int bp_DDEADVISE_reserved = (0);
int bm_DDEADVISE_fDeferUpd = (0x4000);
int bp_DDEADVISE_fDeferUpd = (14);
int bm_DDEADVISE_fAckReq = (0x8000);
int bp_DDEADVISE_fAckReq = (15);
}

struct DDEDATA
{
	ushort flag0;
	int cfFormat;
	ubyte[1 + 0] Value;
}

alias DDEDATA* PDDEDATA;
const{
int bm_DDEDATA_unused = (0xFFF);
int bp_DDEDATA_unused = (0);
int bm_DDEDATA_fResponse = (0x1000);
int bp_DDEDATA_fResponse = (12);
int bm_DDEDATA_fRelease = (0x2000);
int bp_DDEDATA_fRelease = (13);
int bm_DDEDATA_reserved = (0x4000);
int bp_DDEDATA_reserved = (14);
int bm_DDEDATA_fAckReq = (0x8000);
int bp_DDEDATA_fAckReq = (15);
}

struct DDELN
{
	ushort flag0;
	int cfFormat;
}

alias DDELN TDDELN;
alias DDELN* PDDELN;
const{
int bm_DDELN_unused = (0x1FFF);
int bp_DDELN_unused = (0);
int bm_DDELN_fRelease = (0x2000);
int bp_DDELN_fRelease = (13);
int bm_DDELN_fDeferUpd = (0x4000);
int bp_DDELN_fDeferUpd = (14);
int bm_DDELN_fAckReq = (0x8000);
int bp_DDELN_fAckReq = (15);
}

struct DDEML_MSG_HOOK_DATA
{
	UINT uiLo;
	UINT uiHi;
	DWORD cbData;
	DWORD[1 + 7] Data;
}

alias DDEML_MSG_HOOK_DATA TAGDDEML_MSG_HOOK_DATA;
alias DDEML_MSG_HOOK_DATA TDDEMLMSGHOOKDATA;
alias DDEML_MSG_HOOK_DATA* PDDEMLMSGHOOKDATA;

struct DDEPOKE
{
	ushort flag0;
	int cfFormat;
	ubyte[1 + 0] Value;
}

alias DDEPOKE TDDEPOKE;
alias DDEPOKE* PDDEPOKE;
const{
int bm_DDEPOKE_unused = (0x1FFF);
int bp_DDEPOKE_unused = (0);
int bm_DDEPOKE_fRelease = (0x2000);
int bp_DDEPOKE_fRelease = (13);
int bm_DDEPOKE_fReserved = (0xC000);
int bp_DDEPOKE_fReserved = (14);
}
struct DDEUP
{
	ushort flag0;
	int cfFormat;
	ubyte[1 + 0] rgb;
}

alias DDEUP TDDEUP;
alias DDEUP* PDDEUP;

const{
int bm_DDEUP_unused = (0xFFF);
int bp_DDEUP_unused = (0);
int bm_DDEUP_fAck = (0x1000);
int bp_DDEUP_fAck = (12);
int bm_DDEUP_fRelease = (0x2000);
int bp_DDEUP_fRelease = (13);
int bm_DDEUP_fReserved = (0x4000);
int bp_DDEUP_fReserved = (14);
int bm_DDEUP_fAckReq = (0x8000);
int bp_DDEUP_fAckReq = (15);
}

struct EXCEPTION_RECORD
{
	DWORD ExceptionCode;
	DWORD ExceptionFlags;
	_EXCEPTION_RECORD* ExceptionRecord;
	PVOID ExceptionAddress;
	DWORD NumberParameters;
	DWORD[1 + EXCEPTION_MAXIMUM_PARAMETERS-1] ExceptionInformation;
}

alias EXCEPTION_RECORD* PEXCEPTION_RECORD;
alias EXCEPTION_RECORD _EXCEPTION_RECORD;
alias EXCEPTION_RECORD TEXCEPTIONRECORD;
alias EXCEPTION_RECORD* PEXCEPTIONRECORD;

struct EXCEPTION_DEBUG_INFO
{
	EXCEPTION_RECORD ExceptionRecord;
	DWORD dwFirstChance;
}

alias EXCEPTION_DEBUG_INFO* PEXCEPTION_DEBUG_INFO;
alias EXCEPTION_DEBUG_INFO _EXCEPTION_DEBUG_INFO;
alias EXCEPTION_DEBUG_INFO TEXCEPTIONDEBUGINFO;
alias EXCEPTION_DEBUG_INFO* PEXCEPTIONDEBUGINFO;

struct EXIT_PROCESS_DEBUG_INFO
{
	DWORD dwExitCode;
}

alias EXIT_PROCESS_DEBUG_INFO _EXIT_PROCESS_DEBUG_INFO;
alias EXIT_PROCESS_DEBUG_INFO TEXITPROCESSDEBUGINFO;
alias EXIT_PROCESS_DEBUG_INFO* PEXITPROCESSDEBUGINFO;

struct EXIT_THREAD_DEBUG_INFO
{
	DWORD dwExitCode;
}

alias EXIT_THREAD_DEBUG_INFO _EXIT_THREAD_DEBUG_INFO;
alias EXIT_THREAD_DEBUG_INFO TEXITTHREADDEBUGINFO;
alias EXIT_THREAD_DEBUG_INFO* PEXITTHREADDEBUGINFO;

struct LOAD_DLL_DEBUG_INFO
{
	HANDLE hFile;
	LPVOID lpBaseOfDll;
	DWORD dwDebugInfoFileOffset;
	DWORD nDebugInfoSize;
	LPVOID lpImageName;
	ushort fUnicode;
}

alias LOAD_DLL_DEBUG_INFO _LOAD_DLL_DEBUG_INFO;
alias LOAD_DLL_DEBUG_INFO TLOADDLLDEBUGINFO;
alias LOAD_DLL_DEBUG_INFO* PLOADDLLDEBUGINFO;

struct UNLOAD_DLL_DEBUG_INFO
{
	LPVOID lpBaseOfDll;
}

alias UNLOAD_DLL_DEBUG_INFO _UNLOAD_DLL_DEBUG_INFO;
alias UNLOAD_DLL_DEBUG_INFO TUNLOADDLLDEBUGINFO;
alias UNLOAD_DLL_DEBUG_INFO* PUNLOADDLLDEBUGINFO;

struct OUTPUT_DEBUG_STRING_INFO
{
	LPSTR lpDebugStringData;
	ushort fUnicode;
	ushort nDebugStringLength;
}

alias OUTPUT_DEBUG_STRING_INFO _OUTPUT_DEBUG_STRING_INFO;
alias OUTPUT_DEBUG_STRING_INFO TOUTPUTDEBUGSTRINGINFO;
alias OUTPUT_DEBUG_STRING_INFO* POUTPUTDEBUGSTRINGINFO;

struct RIP_INFO
{
	DWORD dwError;
	DWORD dwType;
}

alias RIP_INFO _RIP_INFO;
alias RIP_INFO TRIPINFO;
alias RIP_INFO* PRIPINFO;

struct DEBUG_EVENT
{
	DWORD dwDebugEventCode;
	DWORD dwProcessId;
	DWORD dwThreadId;

	union
	{
		struct
		{
			EXCEPTION_DEBUG_INFO Exception;
		}
		struct
		{
			CREATE_THREAD_DEBUG_INFO CreateThread;
		}
		struct
		{
			CREATE_PROCESS_DEBUG_INFO CreateProcessInfo;
		}
		struct
		{
			EXIT_THREAD_DEBUG_INFO ExitThread;
		}
		struct
		{
			EXIT_PROCESS_DEBUG_INFO ExitProcess;
		}
		struct
		{
			LOAD_DLL_DEBUG_INFO LoadDll;
		}
		struct
		{
			UNLOAD_DLL_DEBUG_INFO UnloadDll;
		}
		struct
		{
			OUTPUT_DEBUG_STRING_INFO DebugString;
		}
		struct
		{
			RIP_INFO RipInfo;
		}
	}
}

alias DEBUG_EVENT* LPDEBUG_EVENT;
alias DEBUG_EVENT _DEBUG_EVENT;
alias DEBUG_EVENT TDEBUGEVENT;
alias DEBUG_EVENT* PDEBUGEVENT;

struct DEBUGHOOKINFO
{
	DWORD idThread;
	DWORD idThreadInstaller;
	LPARAM lParam;
	WPARAM wParam;
	int code;
}

alias DEBUGHOOKINFO TAGDEBUGHOOKINFO;
alias DEBUGHOOKINFO TDEBUGHOOKINFO;
alias DEBUGHOOKINFO* PDEBUGHOOKINFO;

struct DELETEITEMSTRUCT
{
	UINT CtlType;
	UINT CtlID;
	UINT itemID;
	HWND hwndItem;
	UINT itemData;
}

alias DELETEITEMSTRUCT TAGDELETEITEMSTRUCT;
alias DELETEITEMSTRUCT TDELETEITEMSTRUCT;
alias DELETEITEMSTRUCT* PDELETEITEMSTRUCT;

struct DEV_BROADCAST_HDR
{
	ULONG dbch_size;
	ULONG dbch_devicetype;
	ULONG dbch_reserved;
}

alias DEV_BROADCAST_HDR* PDEV_BROADCAST_HDR;
alias DEV_BROADCAST_HDR _DEV_BROADCAST_HDR;
alias DEV_BROADCAST_HDR TDEVBROADCASTHDR;
alias DEV_BROADCAST_HDR* PDEVBROADCASTHDR;

struct DEV_BROADCAST_OEM
{
	ULONG dbco_size;
	ULONG dbco_devicetype;
	ULONG dbco_reserved;
	ULONG dbco_identifier;
	ULONG dbco_suppfunc;
}

alias DEV_BROADCAST_OEM* PDEV_BROADCAST_OEM;
alias DEV_BROADCAST_OEM _DEV_BROADCAST_OEM;
alias DEV_BROADCAST_OEM TDEVBROADCASTOEM;
alias DEV_BROADCAST_OEM* PDEVBROADCASTOEM;

struct DEV_BROADCAST_PORT
{
	ULONG dbcp_size;
	ULONG dbcp_devicetype;
	ULONG dbcp_reserved;
	char[1 + 0] dbcp_name;
}

alias DEV_BROADCAST_PORT* PDEV_BROADCAST_PORT;
alias DEV_BROADCAST_PORT _DEV_BROADCAST_PORT;
alias DEV_BROADCAST_PORT TDEVBROADCASTPORT;
alias DEV_BROADCAST_PORT* PDEVBROADCASTPORT;

struct _DEV_BROADCAST_USERDEFINED
{
	_DEV_BROADCAST_HDR dbud_dbh;
	char[1 + 0] dbud_szName;
	ubyte[1 + 0] dbud_rgbUserDefined;
}

alias _DEV_BROADCAST_USERDEFINED TDEVBROADCASTUSERDEFINED;
alias _DEV_BROADCAST_USERDEFINED* PDEVBROADCASTUSERDEFINED;

struct DEV_BROADCAST_VOLUME
{
	ULONG dbcv_size;
	ULONG dbcv_devicetype;
	ULONG dbcv_reserved;
	ULONG dbcv_unitmask;
	USHORT dbcv_flags;
}

alias DEV_BROADCAST_VOLUME* PDEV_BROADCAST_VOLUME;
alias DEV_BROADCAST_VOLUME _DEV_BROADCAST_VOLUME;
alias DEV_BROADCAST_VOLUME TDEVBROADCASTVOLUME;
alias DEV_BROADCAST_VOLUME* PDEVBROADCASTVOLUME;

struct DEVMODE
{
	BCHAR[1 + CCHDEVICENAME-1] dmDeviceName;
	ushort dmSpecVersion;
	ushort dmDriverVersion;
	ushort dmSize;
	ushort dmDriverExtra;
	DWORD dmFields;
	int dmOrientation;
	int dmPaperSize;
	int dmPaperLength;
	int dmPaperWidth;
	int dmScale;
	int dmCopies;
	int dmDefaultSource;
	int dmPrintQuality;
	int dmColor;
	int dmDuplex;
	int dmYResolution;
	int dmTTOption;
	int dmCollate;
	BCHAR[1 + CCHFORMNAME-1] dmFormName;
	ushort dmLogPixels;
	DWORD dmBitsPerPel;
	DWORD dmPelsWidth;
	DWORD dmPelsHeight;
	DWORD dmDisplayFlags;
	DWORD dmDisplayFrequency;
	DWORD dmICMMethod;
	DWORD dmICMIntent;
	DWORD dmMediaType;
	DWORD dmDitherType;
	DWORD dmICCManufacturer;
	DWORD dmICCModel;
}

alias DEVMODE* LPDEVMODE;
alias DEVMODE _DEVICEMODE;
alias DEVMODE DEVICEMODE;
alias DEVMODE TDEVICEMODE;
alias DEVMODE TDEVICEMODEA;
alias DEVMODE TDEVMODE;
alias DEVMODE* PDEVMODE;

struct DEVNAMES
{
	ushort wDriverOffset;
	ushort wDeviceOffset;
	ushort wOutputOffset;
	ushort wDefault;
}

alias DEVNAMES* LPDEVNAMES;
alias DEVNAMES TAGDEVNAMES;
alias DEVNAMES TDEVNAMES;
alias DEVNAMES* PDEVNAMES;

struct DIBSECTION
{
	BITMAP dsBm;
	BITMAPINFOHEADER dsBmih;
	DWORD[1 + 2] dsBitfields;
	HANDLE dshSection;
	DWORD dsOffset;
}

alias DIBSECTION TAGDIBSECTION;
alias DIBSECTION TDIBSECTION;
alias DIBSECTION* PDIBSECTION;

union LARGE_INTEGER
{
	struct
	{
		DWORD LowPart;
    	LONG HighPart;
	};
	struct u
	{
		DWORD LowPart;
		LONG HighPart;
	};
	LONGLONG QuadPart;
};

alias LARGE_INTEGER* PLARGE_INTEGER;
alias LARGE_INTEGER _LARGE_INTEGER;
alias LARGE_INTEGER TLARGEINTEGER;
alias LARGE_INTEGER* PLARGEINTEGER;

struct DISK_GEOMETRY
{
	LARGE_INTEGER Cylinders;
	MEDIA_TYPE MediaType;
	DWORD TracksPerCylinder;
	DWORD SectorsPerTrack;
	DWORD BytesPerSector;
}

alias DISK_GEOMETRY _DISK_GEOMETRY;
alias DISK_GEOMETRY TDISKGEOMETRY;
alias DISK_GEOMETRY* PDISKGEOMETRY;

struct DISK_PERFORMANCE
{
	LARGE_INTEGER BytesRead;
	LARGE_INTEGER BytesWritten;
	LARGE_INTEGER ReadTime;
	LARGE_INTEGER WriteTime;
	DWORD ReadCount;
	DWORD WriteCount;
	DWORD QueueDepth;
}

alias DISK_PERFORMANCE _DISK_PERFORMANCE;
alias DISK_PERFORMANCE TDISKPERFORMANCE;
alias DISK_PERFORMANCE* PDISKPERFORMANCE;

align(1) struct DLGITEMTEMPLATE
{
	DWORD style;
	DWORD dwExtendedStyle;
	int x;
	int y;
	int cx;
	int cy;
	ushort id;
}

alias DLGITEMTEMPLATE* LPDLGITEMTEMPLATE;
alias DLGITEMTEMPLATE TDLGITEMTEMPLATE;
alias DLGITEMTEMPLATE* PDLGITEMTEMPLATE;

align(1) struct DLGTEMPLATE
{
	DWORD style;
	DWORD dwExtendedStyle;
	ushort cdit;
	int x;
	int y;
	int cx;
	int cy;
}

alias DLGTEMPLATE* LPDLGTEMPLATE;
alias DLGTEMPLATE* LPCDLGTEMPLATE;
alias DLGTEMPLATE TDLGTEMPLATE;
alias DLGTEMPLATE* PDLGTEMPLATE;

struct DOC_INFO_1
{
	LPTSTR pDocName;
	LPTSTR pOutputFile;
	LPTSTR pDatatype;
}

alias DOC_INFO_1 _DOC_INFO_1;
alias DOC_INFO_1 TDOCINFO1;
alias DOC_INFO_1* PDOCINFO1;

struct DOC_INFO_2
{
	LPTSTR pDocName;
	LPTSTR pOutputFile;
	LPTSTR pDatatype;
	DWORD dwMode;
	DWORD JobId;
}

alias DOC_INFO_2 _DOC_INFO_2;
alias DOC_INFO_2 TDOCINFO2;
alias DOC_INFO_2* PDOCINFO2;

struct DOCINFO
{
	int cbSize;
	LPCTSTR lpszDocName;
	LPCTSTR lpszOutput;
	LPCTSTR lpszDatatype;
	DWORD fwType;
}

alias DOCINFO TDOCINFO;
alias DOCINFO TDOCINFOA;
alias DOCINFO* PDOCINFO;

struct DRAGLISTINFO
{
	UINT uNotification;
	HWND hWnd;
	POINT ptCursor;
}

alias DRAGLISTINFO* LPDRAGLISTINFO;
alias DRAGLISTINFO TDRAGLISTINFO;
alias DRAGLISTINFO* PDRAGLISTINFO;

struct DRAWITEMSTRUCT
{
	UINT CtlType;
	UINT CtlID;
	UINT itemID;
	UINT itemAction;
	UINT itemState;
	HWND hwndItem;
	HDC hDC;
	RECT rcItem;
	DWORD itemData;
}

alias DRAWITEMSTRUCT* LPDRAWITEMSTRUCT;
alias DRAWITEMSTRUCT TAGDRAWITEMSTRUCT;
alias DRAWITEMSTRUCT TDRAWITEMSTRUCT;
alias DRAWITEMSTRUCT* PDRAWITEMSTRUCT;

struct DRAWTEXTPARAMS
{
	UINT cbSize;
	int iTabLength;
	int iLeftMargin;
	int iRightMargin;
	UINT uiLengthDrawn;
}

alias DRAWTEXTPARAMS* LPDRAWTEXTPARAMS;
alias DRAWTEXTPARAMS TDRAWTEXTPARAMS;
alias DRAWTEXTPARAMS* PDRAWTEXTPARAMS;

struct PARTITION_INFORMATION
{
	ubyte PartitionType;
	ubyte BootIndicator;
	ubyte RecognizedPartition;
	ubyte RewritePartition;
	LARGE_INTEGER StartingOffset;
	LARGE_INTEGER PartitionLength;
	LARGE_INTEGER HiddenSectors;
}

alias PARTITION_INFORMATION _PARTITION_INFORMATION;
alias PARTITION_INFORMATION TPARTITIONINFORMATION;
alias PARTITION_INFORMATION* PPARTITIONINFORMATION;

struct DRIVE_LAYOUT_INFORMATION
{
	DWORD PartitionCount;
	DWORD Signature;
	PARTITION_INFORMATION[1 + 0] PartitionEntry;
}

alias DRIVE_LAYOUT_INFORMATION _DRIVE_LAYOUT_INFORMATION;
alias DRIVE_LAYOUT_INFORMATION TDRIVELAYOUTINFORMATION;
alias DRIVE_LAYOUT_INFORMATION* PDRIVELAYOUTINFORMATION;

struct DRIVER_INFO_1
{
	LPTSTR pName;
}

alias DRIVER_INFO_1 _DRIVER_INFO_1;
alias DRIVER_INFO_1 TDRIVERINFO1;
alias DRIVER_INFO_1* PDRIVERINFO1;

struct DRIVER_INFO_2
{
	DWORD cVersion;
	LPTSTR pName;
	LPTSTR pEnvironment;
	LPTSTR pDriverPath;
	LPTSTR pDataFile;
	LPTSTR pConfigFile;
}

alias DRIVER_INFO_2 _DRIVER_INFO_2;
alias DRIVER_INFO_2 TDRIVERINFO2;
alias DRIVER_INFO_2* PDRIVERINFO2;

struct DRIVER_INFO_3
{
	DWORD cVersion;
	LPTSTR pName;
	LPTSTR pEnvironment;
	LPTSTR pDriverPath;
	LPTSTR pDataFile;
	LPTSTR pConfigFile;
	LPTSTR pHelpFile;
	LPTSTR pDependentFiles;
	LPTSTR pMonitorName;
	LPTSTR pDefaultDataType;
}

alias DRIVER_INFO_3 _DRIVER_INFO_3;
alias DRIVER_INFO_3 TDRIVERINFO3;
alias DRIVER_INFO_3* PDRIVERINFO3;

struct EDITSTREAM
{
	DWORD dwCookie;
	DWORD dwError;
	EDITSTREAMCALLBACK pfnCallback;
}

alias EDITSTREAM _EDITSTREAM;
alias EDITSTREAM TEDITSTREAM;
alias EDITSTREAM* PEDITSTREAM;

struct EMR
{
	DWORD iType;
	DWORD nSize;
}

alias EMR TAGEMR;
alias EMR TEMR;
alias EMR* PEMR;

struct EMRANGLEARC
{
	EMR emr;
	POINTL ptlCenter;
	DWORD nRadius;
	FLOAT eStartAngle;
	FLOAT eSweepAngle;
}

alias EMRANGLEARC TAGEMRANGLEARC;
alias EMRANGLEARC TEMRANGLEARC;
alias EMRANGLEARC* PEMRANGLEARC;

struct EMRARC
{
	EMR emr;
	RECTL rclBox;
	POINTL ptlStart;
	POINTL ptlEnd;
}

alias EMRARC TAGEMRARC;
alias EMRARC TEMRARC;
alias EMRARC* PEMRARC;
alias EMRARC EMRARCTO;
alias EMRARC TEMRARCTO;
alias EMRARC* PEMRARCTO;
alias EMRARC EMRCHORD;
alias EMRARC TEMRCHORD;
alias EMRARC* PEMRCHORD;
alias EMRARC EMRPIE;
alias EMRARC TEMRPIE;
alias EMRARC* PEMRPIE;

struct XFORM
{
	FLOAT eM11;
	FLOAT eM12;
	FLOAT eM21;
	FLOAT eM22;
	FLOAT eDx;
	FLOAT eDy;
}

alias XFORM* LPXFORM;
alias XFORM _XFORM;
alias XFORM TXFORM;
alias XFORM* PXFORM;

struct EMRBITBLT
{
	EMR emr;
	RECTL rclBounds;
	LONG xDest;
	LONG yDest;
	LONG cxDest;
	LONG cyDest;
	DWORD dwRop;
	LONG xSrc;
	LONG ySrc;
	XFORM xformSrc;
	COLORREF crBkColorSrc;
	DWORD iUsageSrc;
	DWORD offBmiSrc;
	DWORD offBitsSrc;
	DWORD cbBitsSrc;
}

alias EMRBITBLT TAGEMRBITBLT;
alias EMRBITBLT TEMRBITBLT;
alias EMRBITBLT* PEMRBITBLT;

struct LOGBRUSH
{
	UINT lbStyle;
	COLORREF lbColor;
	LONG lbHatch;
}

alias LOGBRUSH TAGLOGBRUSH;
alias LOGBRUSH TLOGBRUSH;
alias LOGBRUSH* PLOGBRUSH;

struct EMRCREATEBRUSHINDIRECT
{
	EMR emr;
	DWORD ihBrush;
	LOGBRUSH lb;
}

alias EMRCREATEBRUSHINDIRECT TAGEMRCREATEBRUSHINDIRECT;
alias EMRCREATEBRUSHINDIRECT TEMRCREATEBRUSHINDIRECT;
alias EMRCREATEBRUSHINDIRECT* PEMRCREATEBRUSHINDIRECT;
alias LONG LCSCSTYPE;
alias LONG LCSGAMUTMATCH;

struct LOGCOLORSPACE
{
	DWORD lcsSignature;
	DWORD lcsVersion;
	DWORD lcsSize;
	LCSCSTYPE lcsCSType;
	LCSGAMUTMATCH lcsIntent;
	CIEXYZTRIPLE lcsEndpoints;
	DWORD lcsGammaRed;
	DWORD lcsGammaGreen;
	DWORD lcsGammaBlue;
	TCHAR[1 + MAX_PATH-1] lcsFilename;
}

alias LOGCOLORSPACE* LPLOGCOLORSPACE;
alias LOGCOLORSPACE TAGLOGCOLORSPACE;
alias LOGCOLORSPACE TLOGCOLORSPACE;
alias LOGCOLORSPACE TLOGCOLORSPACEA;
alias LOGCOLORSPACE* PLOGCOLORSPACE;

struct EMRCREATECOLORSPACE
{
	EMR emr;
	DWORD ihCS;
	LOGCOLORSPACE lcs;
}

alias EMRCREATECOLORSPACE TAGEMRCREATECOLORSPACE;
alias EMRCREATECOLORSPACE TEMRCREATECOLORSPACE;
alias EMRCREATECOLORSPACE* PEMRCREATECOLORSPACE;

struct EMRCREATEDIBPATTERNBRUSHPT
{
	EMR emr;
	DWORD ihBrush;
	DWORD iUsage;
	DWORD offBmi;
	DWORD cbBmi;
	DWORD offBits;
	DWORD cbBits;
}

alias EMRCREATEDIBPATTERNBRUSHPT TAGEMRCREATEDIBPATTERNBRUSHPT;
alias EMRCREATEDIBPATTERNBRUSHPT TEMRCREATEDIBPATTERNBRUSHPT;
alias EMRCREATEDIBPATTERNBRUSHPT PEMRCREATEDIBPATTERNBRUSHPT;

struct EMRCREATEMONOBRUSH
{
	EMR emr;
	DWORD ihBrush;
	DWORD iUsage;
	DWORD offBmi;
	DWORD cbBmi;
	DWORD offBits;
	DWORD cbBits;
}

alias EMRCREATEMONOBRUSH TAGEMRCREATEMONOBRUSH;
alias EMRCREATEMONOBRUSH TEMRCREATEMONOBRUSH;
alias EMRCREATEMONOBRUSH* PEMRCREATEMONOBRUSH;

struct PALETTEENTRY
{
	ubyte peRed;
	ubyte peGreen;
	ubyte peBlue;
	ubyte peFlags;
}

alias PALETTEENTRY* LPPALETTEENTRY;
alias PALETTEENTRY TAGPALETTEENTRY;
alias PALETTEENTRY TPALETTEENTRY;
alias PALETTEENTRY* PPALETTEENTRY;

struct LOGPALETTE
{
	ushort palVersion;
	ushort palNumEntries;
	PALETTEENTRY[1 + 0] palPalEntry;
}

alias LOGPALETTE* LPLOGPALETTE;
alias LOGPALETTE TAGLOGPALETTE;
alias LOGPALETTE TLOGPALETTE;
alias LOGPALETTE* PLOGPALETTE;

struct EMRCREATEPALETTE
{
	EMR emr;
	DWORD ihPal;
	LOGPALETTE lgpl;
}

alias EMRCREATEPALETTE TAGEMRCREATEPALETTE;
alias EMRCREATEPALETTE TEMRCREATEPALETTE;
alias EMRCREATEPALETTE* PEMRCREATEPALETTE;

struct LOGPEN
{
	UINT lopnStyle;
	POINT lopnWidth;
	COLORREF lopnColor;
}

alias LOGPEN TAGLOGPEN;
alias LOGPEN TLOGPEN;
alias LOGPEN* PLOGPEN;

struct EMRCREATEPEN
{
	EMR emr;
	DWORD ihPen;
	LOGPEN lopn;
}

alias EMRCREATEPEN TAGEMRCREATEPEN;
alias EMRCREATEPEN TEMRCREATEPEN;
alias EMRCREATEPEN* PEMRCREATEPEN;

struct EMRELLIPSE
{
	EMR emr;
	RECTL rclBox;
}

alias EMRELLIPSE TAGEMRELLIPSE;
alias EMRELLIPSE TEMRELLIPSE;
alias EMRELLIPSE* PEMRELLIPSE;
alias EMRELLIPSE EMRRECTANGLE;
alias EMRELLIPSE TEMRRECTANGLE;
alias EMRELLIPSE* PEMRRECTANGLE;

struct EMREOF
{
	EMR emr;
	DWORD nPalEntries;
	DWORD offPalEntries;
	DWORD nSizeLast;
}

alias EMREOF TAGEMREOF;
alias EMREOF TEMREOF;
alias EMREOF* PEMREOF;

struct EMREXCLUDECLIPRECT
{
	EMR emr;
	RECTL rclClip;
}

alias EMREXCLUDECLIPRECT TAGEMREXCLUDECLIPRECT;
alias EMREXCLUDECLIPRECT TEMREXCLUDECLIPRECT;
alias EMREXCLUDECLIPRECT* PEMREXCLUDECLIPRECT;
alias EMREXCLUDECLIPRECT EMRINTERSECTCLIPRECT;
alias EMREXCLUDECLIPRECT TEMRINTERSECTCLIPRECT;
alias EMREXCLUDECLIPRECT* PEMRINTERSECTCLIPRECT;

struct PANOSE
{
	ubyte bFamilyType;
	ubyte bSerifStyle;
	ubyte bWeight;
	ubyte bProportion;
	ubyte bContrast;
	ubyte bStrokeVariation;
	ubyte bArmStyle;
	ubyte bLetterform;
	ubyte bMidline;
	ubyte bXHeight;
}

alias PANOSE TAGPANOSE;
alias PANOSE TPANOSE;
alias PANOSE* PPANOSE;

struct EXTLOGFONT
{
	LOGFONT elfLogFont;
	BCHAR[1 + LF_FULLFACESIZE-1] elfFullName;
	BCHAR[1 + LF_FACESIZE-1] elfStyle;
	DWORD elfVersion;
	DWORD elfStyleSize;
	DWORD elfMatch;
	DWORD elfReserved;
	ubyte[1 + ELF_VENDOR_SIZE-1] elfVendorId;
	DWORD elfCulture;
	PANOSE elfPanose;
}

alias EXTLOGFONT TAGEXTLOGFONT;
alias EXTLOGFONT TEXTLOGFONT;
alias EXTLOGFONT* PEXTLOGFONT;

struct EMREXTCREATEFONTINDIRECTW
{
	EMR emr;
	DWORD ihFont;
	EXTLOGFONT elfw;
}

alias EMREXTCREATEFONTINDIRECTW TAGEMREXTCREATEFONTINDIRECTW;
alias EMREXTCREATEFONTINDIRECTW TEMREXTCREATEFONTINDIRECTW;
alias EMREXTCREATEFONTINDIRECTW* PEMREXTCREATEFONTINDIRECTW;

struct EXTLOGPEN
{
	UINT elpPenStyle;
	UINT elpWidth;
	UINT elpBrushStyle;
	COLORREF elpColor;
	LONG elpHatch;
	DWORD elpNumEntries;
	DWORD[1 + 0] elpStyleEntry;
}

alias EXTLOGPEN TAGEXTLOGPEN;
alias EXTLOGPEN TEXTLOGPEN;
alias EXTLOGPEN* PEXTLOGPEN;

struct EMREXTCREATEPEN
{
	EMR emr;
	DWORD ihPen;
	DWORD offBmi;
	DWORD cbBmi;
	DWORD offBits;
	DWORD cbBits;
	EXTLOGPEN elp;
}

alias EMREXTCREATEPEN TAGEMREXTCREATEPEN;
alias EMREXTCREATEPEN TEMREXTCREATEPEN;
alias EMREXTCREATEPEN* PEMREXTCREATEPEN;

struct EMREXTFLOODFILL
{
	EMR emr;
	POINTL ptlStart;
	COLORREF crColor;
	DWORD iMode;
}

alias EMREXTFLOODFILL TAGEMREXTFLOODFILL;
alias EMREXTFLOODFILL TEMREXTFLOODFILL;
alias EMREXTFLOODFILL* PEMREXTFLOODFILL;

struct EMREXTSELECTCLIPRGN
{
	EMR emr;
	DWORD cbRgnData;
	DWORD iMode;
	ubyte[1 + 0] RgnData;
}

alias EMREXTSELECTCLIPRGN TAGEMREXTSELECTCLIPRGN;
alias EMREXTSELECTCLIPRGN TEMREXTSELECTCLIPRGN;
alias EMREXTSELECTCLIPRGN* PEMREXTSELECTCLIPRGN;

struct EMRTEXT
{
	POINTL ptlReference;
	DWORD nChars;
	DWORD offString;
	DWORD fOptions;
	RECTL rcl;
	DWORD offDx;
}

alias EMRTEXT TAGEMRTEXT;
alias EMRTEXT TEMRTEXT;
alias EMRTEXT* PEMRTEXT;

struct EMREXTTEXTOUTA
{
	EMR emr;
	RECTL rclBounds;
	DWORD iGraphicsMode;
	FLOAT exScale;
	FLOAT eyScale;
	EMRTEXT emrtext;
}

alias EMREXTTEXTOUTA TAGEMREXTTEXTOUTA;
alias EMREXTTEXTOUTA TEMREXTTEXTOUTA;
alias EMREXTTEXTOUTA* PEMREXTTEXTOUTA;
alias EMREXTTEXTOUTA EMREXTTEXTOUTW;
alias EMREXTTEXTOUTA TEMREXTTEXTOUTW;
alias EMREXTTEXTOUTA* PEMREXTTEXTOUTW;

struct EMRFILLPATH
{
	EMR emr;
	RECTL rclBounds;
}

alias EMRFILLPATH TAGEMRFILLPATH;
alias EMRFILLPATH TEMRFILLPATH;
alias EMRFILLPATH* PEMRFILLPATH;
alias EMRFILLPATH EMRSTROKEANDFILLPATH;
alias EMRFILLPATH TEMRSTROKEANDFILLPATH;
alias EMRFILLPATH* PEMRSTROKEANDFILLPATH;
alias EMRFILLPATH EMRSTROKEPATH;
alias EMRFILLPATH TEMRSTROKEPATH;
alias EMRFILLPATH* PEMRSTROKEPATH;

struct EMRFILLRGN
{
	EMR emr;
	RECTL rclBounds;
	DWORD cbRgnData;
	DWORD ihBrush;
	ubyte[1 + 0] RgnData;
}

alias EMRFILLRGN TAGEMRFILLRGN;
alias EMRFILLRGN TEMRFILLRGN;
alias EMRFILLRGN* PEMRFILLRGN;

struct EMRFORMAT
{
	DWORD dSignature;
	DWORD nVersion;
	DWORD cbData;
	DWORD offData;
}

alias EMRFORMAT TAGEMRFORMAT;
alias EMRFORMAT TEMRFORMAT;
alias EMRFORMAT* PEMRFORMAT;

struct SIZE
{
	LONG cx;
	LONG cy;
}

alias SIZE* LPSIZE;
alias SIZE TAGSIZE;
alias SIZE TSIZE;
alias SIZE* PSIZE;
alias SIZE SIZEL;
alias SIZE TSIZEL;
alias SIZE* PSIZEL;
alias SIZE* LPSIZEL;

struct EMRFRAMERGN
{
	EMR emr;
	RECTL rclBounds;
	DWORD cbRgnData;
	DWORD ihBrush;
	SIZEL szlStroke;
	ubyte[1 + 0] RgnData;
}

alias EMRFRAMERGN TAGEMRFRAMERGN;
alias EMRFRAMERGN TEMRFRAMERGN;
alias EMRFRAMERGN* PEMRFRAMERGN;

struct EMRGDICOMMENT
{
	EMR emr;
	DWORD cbData;
	ubyte[1 + 0] Data;
}

alias EMRGDICOMMENT TAGEMRGDICOMMENT;
alias EMRGDICOMMENT TEMRGDICOMMENT;
alias EMRGDICOMMENT* PEMRGDICOMMENT;

struct EMRINVERTRGN
{
	EMR emr;
	RECTL rclBounds;
	DWORD cbRgnData;
	ubyte[1 + 0] RgnData;
}

alias EMRINVERTRGN TAGEMRINVERTRGN;
alias EMRINVERTRGN TEMRINVERTRGN;
alias EMRINVERTRGN* PEMRINVERTRGN;
alias EMRINVERTRGN EMRPAINTRGN;
alias EMRINVERTRGN TEMRPAINTRGN;
alias EMRINVERTRGN* PEMRPAINTRGN;

struct EMRLINETO
{
	EMR emr;
	POINTL ptl;
}

alias EMRLINETO TAGEMRLINETO;
alias EMRLINETO TEMRLINETO;
alias EMRLINETO* PEMRLINETO;
alias EMRLINETO EMRMOVETOEX;
alias EMRLINETO TEMRMOVETOEX;
alias EMRLINETO* PEMRMOVETOEX;

struct EMRMASKBLT
{
	EMR emr;
	RECTL rclBounds;
	LONG xDest;
	LONG yDest;
	LONG cxDest;
	LONG cyDest;
	DWORD dwRop;
	LONG xSrc;
	LONG ySrc;
	XFORM xformSrc;
	COLORREF crBkColorSrc;
	DWORD iUsageSrc;
	DWORD offBmiSrc;
	DWORD cbBmiSrc;
	DWORD offBitsSrc;
	DWORD cbBitsSrc;
	LONG xMask;
	LONG yMask;
	DWORD iUsageMask;
	DWORD offBmiMask;
	DWORD cbBmiMask;
	DWORD offBitsMask;
	DWORD cbBitsMask;
}

alias EMRMASKBLT TAGEMRMASKBLT;
alias EMRMASKBLT TEMRMASKBLT;
alias EMRMASKBLT* PEMRMASKBLT;

struct EMRMODIFYWORLDTRANSFORM
{
	EMR emr;
	XFORM xform;
	DWORD iMode;
}

alias EMRMODIFYWORLDTRANSFORM TAGEMRMODIFYWORLDTRANSFORM;
alias EMRMODIFYWORLDTRANSFORM TEMRMODIFYWORLDTRANSFORM;
alias EMRMODIFYWORLDTRANSFORM PEMRMODIFYWORLDTRANSFORM;

struct EMROFFSETCLIPRGN
{
	EMR emr;
	POINTL ptlOffset;
}

alias EMROFFSETCLIPRGN TAGEMROFFSETCLIPRGN;
alias EMROFFSETCLIPRGN TEMROFFSETCLIPRGN;
alias EMROFFSETCLIPRGN* PEMROFFSETCLIPRGN;

struct EMRPLGBLT
{
	EMR emr;
	RECTL rclBounds;
	POINTL[1 + 2] aptlDest;
	LONG xSrc;
	LONG ySrc;
	LONG cxSrc;
	LONG cySrc;
	XFORM xformSrc;
	COLORREF crBkColorSrc;
	DWORD iUsageSrc;
	DWORD offBmiSrc;
	DWORD cbBmiSrc;
	DWORD offBitsSrc;
	DWORD cbBitsSrc;
	LONG xMask;
	LONG yMask;
	DWORD iUsageMask;
	DWORD offBmiMask;
	DWORD cbBmiMask;
	DWORD offBitsMask;
	DWORD cbBitsMask;
}

alias EMRPLGBLT TAGEMRPLGBLT;
alias EMRPLGBLT TEMRPLGBLT;
alias EMRPLGBLT* PEMRPLGBLT;

struct EMRPOLYDRAW
{
	EMR emr;
	RECTL rclBounds;
	DWORD cptl;
	POINTL[1 + 0] aptl;
	ubyte[1 + 0] abTypes;
}

alias EMRPOLYDRAW TAGEMRPOLYDRAW;
alias EMRPOLYDRAW TEMRPOLYDRAW;
alias EMRPOLYDRAW* PEMRPOLYDRAW;

struct EMRPOLYDRAW16
{
	EMR emr;
	RECTL rclBounds;
	DWORD cpts;
	POINTS[1 + 0] apts;
	ubyte[1 + 0] abTypes;
}

alias EMRPOLYDRAW16 TAGEMRPOLYDRAW16;
alias EMRPOLYDRAW16 TEMRPOLYDRAW16;
alias EMRPOLYDRAW16* PEMRPOLYDRAW16;

struct EMRPOLYLINE
{
	EMR emr;
	RECTL rclBounds;
	DWORD cptl;
	POINTL[1 + 0] aptl;
}

alias EMRPOLYLINE TAGEMRPOLYLINE;
alias EMRPOLYLINE TEMRPOLYLINE;
alias EMRPOLYLINE* PEMRPOLYLINE;
alias EMRPOLYLINE EMRPOLYBEZIER;
alias EMRPOLYLINE TEMRPOLYBEZIER;
alias EMRPOLYLINE* PEMRPOLYBEZIER;
alias EMRPOLYLINE EMRPOLYGON;
alias EMRPOLYLINE TEMRPOLYGON;
alias EMRPOLYLINE* PEMRPOLYGON;
alias EMRPOLYLINE EMRPOLYBEZIERTO;
alias EMRPOLYLINE TEMRPOLYBEZIERTO;
alias EMRPOLYLINE* PEMRPOLYBEZIERTO;
alias EMRPOLYLINE EMRPOLYLINETO;
alias EMRPOLYLINE TEMRPOLYLINETO;
alias EMRPOLYLINE* PEMRPOLYLINETO;

struct EMRPOLYLINE16
{
	EMR emr;
	RECTL rclBounds;
	DWORD cpts;
	POINTL[1 + 0] apts;
}

alias EMRPOLYLINE16 TAGEMRPOLYLINE16;
alias EMRPOLYLINE16 TEMRPOLYLINE16;
alias EMRPOLYLINE16* PEMRPOLYLINE16;
alias EMRPOLYLINE16 EMRPOLYBEZIER16;
alias EMRPOLYLINE16 TEMRPOLYBEZIER16;
alias EMRPOLYLINE16* PEMRPOLYBEZIER16;
alias EMRPOLYLINE16 EMRPOLYGON16;
alias EMRPOLYLINE16 TEMRPOLYGON16;
alias EMRPOLYLINE16* PEMRPOLYGON16;
alias EMRPOLYLINE16 EMRPOLYBEZIERTO16;
alias EMRPOLYLINE16 TEMRPOLYBEZIERTO16;
alias EMRPOLYLINE16* PEMRPOLYBEZIERTO16;
alias EMRPOLYLINE16 EMRPOLYLINETO16;
alias EMRPOLYLINE16 TEMRPOLYLINETO16;
alias EMRPOLYLINE16* PEMRPOLYLINETO16;

struct EMRPOLYPOLYLINE
{
	EMR emr;
	RECTL rclBounds;
	DWORD nPolys;
	DWORD cptl;
	DWORD[1 + 0] aPolyCounts;
	POINTL[1 + 0] aptl;
}

alias EMRPOLYPOLYLINE TAGEMRPOLYPOLYLINE;
alias EMRPOLYPOLYLINE TEMRPOLYPOLYLINE;
alias EMRPOLYPOLYLINE* PEMRPOLYPOLYLINE;
alias EMRPOLYPOLYLINE EMRPOLYPOLYGON;
alias EMRPOLYPOLYLINE TEMRPOLYPOLYGON;
alias EMRPOLYPOLYLINE* PEMRPOLYPOLYGON;

struct EMRPOLYPOLYLINE16
{
	EMR emr;
	RECTL rclBounds;
	DWORD nPolys;
	DWORD cpts;
	DWORD[1 + 0] aPolyCounts;
	POINTS[1 + 0] apts;
}

alias EMRPOLYPOLYLINE16 TAGEMRPOLYPOLYLINE16;
alias EMRPOLYPOLYLINE16 TEMRPOLYPOLYLINE16;
alias EMRPOLYPOLYLINE16* PEMRPOLYPOLYLINE16;
alias EMRPOLYPOLYLINE16 EMRPOLYPOLYGON16;
alias EMRPOLYPOLYLINE16 TEMRPOLYPOLYGON16;
alias EMRPOLYPOLYLINE16* PEMRPOLYPOLYGON16;

struct EMRPOLYTEXTOUTA
{
	EMR emr;
	RECTL rclBounds;
	DWORD iGraphicsMode;
	FLOAT exScale;
	FLOAT eyScale;
	LONG cStrings;
	EMRTEXT[1 + 0] aemrtext;
}

alias EMRPOLYTEXTOUTA TAGEMRPOLYTEXTOUTA;
alias EMRPOLYTEXTOUTA TEMRPOLYTEXTOUTA;
alias EMRPOLYTEXTOUTA* PEMRPOLYTEXTOUTA;
alias EMRPOLYTEXTOUTA EMRPOLYTEXTOUTW;
alias EMRPOLYTEXTOUTA TEMRPOLYTEXTOUTW;
alias EMRPOLYTEXTOUTA* PEMRPOLYTEXTOUTW;

struct EMRRESIZEPALETTE
{
	EMR emr;
	DWORD ihPal;
	DWORD cEntries;
}

alias EMRRESIZEPALETTE TAGEMRRESIZEPALETTE;
alias EMRRESIZEPALETTE TEMRRESIZEPALETTE;
alias EMRRESIZEPALETTE* PEMRRESIZEPALETTE;

struct EMRRESTOREDC
{
	EMR emr;
	LONG iRelative;
}

alias EMRRESTOREDC TAGEMRRESTOREDC;
alias EMRRESTOREDC TEMRRESTOREDC;
alias EMRRESTOREDC* PEMRRESTOREDC;

struct EMRROUNDRECT
{
	EMR emr;
	RECTL rclBox;
	SIZEL szlCorner;
}

alias EMRROUNDRECT TAGEMRROUNDRECT;
alias EMRROUNDRECT TEMRROUNDRECT;
alias EMRROUNDRECT* PEMRROUNDRECT;

struct EMRSCALEVIEWPORTEXTEX
{
	EMR emr;
	LONG xNum;
	LONG xDenom;
	LONG yNum;
	LONG yDenom;
}

alias EMRSCALEVIEWPORTEXTEX TAGEMRSCALEVIEWPORTEXTEX;
alias EMRSCALEVIEWPORTEXTEX TEMRSCALEVIEWPORTEXTEX;
alias EMRSCALEVIEWPORTEXTEX* PEMRSCALEVIEWPORTEXTEX;
alias EMRSCALEVIEWPORTEXTEX EMRSCALEWINDOWEXTEX;
alias EMRSCALEVIEWPORTEXTEX TEMRSCALEWINDOWEXTEX;
alias EMRSCALEVIEWPORTEXTEX* PEMRSCALEWINDOWEXTEX;

struct EMRSELECTCOLORSPACE
{
	EMR emr;
	DWORD ihCS;
}

alias EMRSELECTCOLORSPACE TAGEMRSELECTCOLORSPACE;
alias EMRSELECTCOLORSPACE TEMRSELECTCOLORSPACE;
alias EMRSELECTCOLORSPACE* PEMRSELECTCOLORSPACE;
alias EMRSELECTCOLORSPACE EMRDELETECOLORSPACE;
alias EMRSELECTCOLORSPACE TEMRDELETECOLORSPACE;
alias EMRSELECTCOLORSPACE* PEMRDELETECOLORSPACE;

struct EMRSELECTOBJECT
{
	EMR emr;
	DWORD ihObject;
}

alias EMRSELECTOBJECT TAGEMRSELECTOBJECT;
alias EMRSELECTOBJECT TEMRSELECTOBJECT;
alias EMRSELECTOBJECT* PEMRSELECTOBJECT;
alias EMRSELECTOBJECT EMRDELETEOBJECT;
alias EMRSELECTOBJECT TEMRDELETEOBJECT;
alias EMRSELECTOBJECT* PEMRDELETEOBJECT;

struct EMRSELECTPALETTE
{
	EMR emr;
	DWORD ihPal;
}

alias EMRSELECTPALETTE TAGEMRSELECTPALETTE;
alias EMRSELECTPALETTE TEMRSELECTPALETTE;
alias EMRSELECTPALETTE* PEMRSELECTPALETTE;

struct EMRSETARCDIRECTION
{
	EMR emr;
	DWORD iArcDirection;
}

alias EMRSETARCDIRECTION TAGEMRSETARCDIRECTION;
alias EMRSETARCDIRECTION TEMRSETARCDIRECTION;
alias EMRSETARCDIRECTION* PEMRSETARCDIRECTION;

struct EMRSETBKCOLOR
{
	EMR emr;
	COLORREF crColor;
}

alias EMRSETBKCOLOR TAGEMRSETTEXTCOLOR;
alias EMRSETBKCOLOR TEMRSETBKCOLOR;
alias EMRSETBKCOLOR* PEMRSETBKCOLOR;
alias EMRSETBKCOLOR EMRSETTEXTCOLOR;
alias EMRSETBKCOLOR TEMRSETTEXTCOLOR;
alias EMRSETBKCOLOR* PEMRSETTEXTCOLOR;

struct EMRSETCOLORADJUSTMENT
{
	EMR emr;
	COLORADJUSTMENT ColorAdjustment;
}

alias EMRSETCOLORADJUSTMENT TAGEMRSETCOLORADJUSTMENT;
alias EMRSETCOLORADJUSTMENT TEMRSETCOLORADJUSTMENT;
alias EMRSETCOLORADJUSTMENT* PEMRSETCOLORADJUSTMENT;

struct EMRSETDIBITSTODEVICE
{
	EMR emr;
	RECTL rclBounds;
	LONG xDest;
	LONG yDest;
	LONG xSrc;
	LONG ySrc;
	LONG cxSrc;
	LONG cySrc;
	DWORD offBmiSrc;
	DWORD cbBmiSrc;
	DWORD offBitsSrc;
	DWORD cbBitsSrc;
	DWORD iUsageSrc;
	DWORD iStartScan;
	DWORD cScans;
}

alias EMRSETDIBITSTODEVICE TAGEMRSETDIBITSTODEVICE;
alias EMRSETDIBITSTODEVICE TEMRSETDIBITSTODEVICE;
alias EMRSETDIBITSTODEVICE* PEMRSETDIBITSTODEVICE;

struct EMRSETMAPPERFLAGS
{
	EMR emr;
	DWORD dwFlags;
}

alias EMRSETMAPPERFLAGS TAGEMRSETMAPPERFLAGS;
alias EMRSETMAPPERFLAGS TEMRSETMAPPERFLAGS;
alias EMRSETMAPPERFLAGS* PEMRSETMAPPERFLAGS;

struct EMRSETMITERLIMIT
{
	EMR emr;
	FLOAT eMiterLimit;
}

alias EMRSETMITERLIMIT TAGEMRSETMITERLIMIT;
alias EMRSETMITERLIMIT TEMRSETMITERLIMIT;
alias EMRSETMITERLIMIT* PEMRSETMITERLIMIT;

struct EMRSETPALETTEENTRIES
{
	EMR emr;
	DWORD ihPal;
	DWORD iStart;
	DWORD cEntries;
	PALETTEENTRY[1 + 0] aPalEntries;
}

alias EMRSETPALETTEENTRIES TAGEMRSETPALETTEENTRIES;
alias EMRSETPALETTEENTRIES TEMRSETPALETTEENTRIES;
alias EMRSETPALETTEENTRIES* PEMRSETPALETTEENTRIES;

struct EMRSETPIXELV
{
	EMR emr;
	POINTL ptlPixel;
	COLORREF crColor;
}

alias EMRSETPIXELV TAGEMRSETPIXELV;
alias EMRSETPIXELV TEMRSETPIXELV;
alias EMRSETPIXELV* PEMRSETPIXELV;

struct EMRSETVIEWPORTEXTEX
{
	EMR emr;
	SIZEL szlExtent;
}

alias EMRSETVIEWPORTEXTEX TAGEMRSETVIEWPORTEXTEX;
alias EMRSETVIEWPORTEXTEX TEMRSETVIEWPORTEXTEX;
alias EMRSETVIEWPORTEXTEX* PEMRSETVIEWPORTEXTEX;
alias EMRSETVIEWPORTEXTEX EMRSETWINDOWEXTEX;
alias EMRSETVIEWPORTEXTEX TEMRSETWINDOWEXTEX;
alias EMRSETVIEWPORTEXTEX* PEMRSETWINDOWEXTEX;

struct EMRSETVIEWPORTORGEX
{
	EMR emr;
	POINTL ptlOrigin;
}

alias EMRSETVIEWPORTORGEX TAGEMRSETVIEWPORTORGEX;
alias EMRSETVIEWPORTORGEX TEMRSETVIEWPORTORGEX;
alias EMRSETVIEWPORTORGEX* PEMRSETVIEWPORTORGEX;
alias EMRSETVIEWPORTORGEX EMRSETWINDOWORGEX;
alias EMRSETVIEWPORTORGEX TEMRSETWINDOWORGEX;
alias EMRSETVIEWPORTORGEX* PEMRSETWINDOWORGEX;
alias EMRSETVIEWPORTORGEX EMRSETBRUSHORGEX;
alias EMRSETVIEWPORTORGEX TEMRSETBRUSHORGEX;
alias EMRSETVIEWPORTORGEX* PEMRSETBRUSHORGEX;

struct EMRSETWORLDTRANSFORM
{
	EMR emr;
	XFORM xform;
}

alias EMRSETWORLDTRANSFORM TAGEMRSETWORLDTRANSFORM;
alias EMRSETWORLDTRANSFORM TEMRSETWORLDTRANSFORM;
alias EMRSETWORLDTRANSFORM* PEMRSETWORLDTRANSFORM;

struct EMRSTRETCHBLT
{
	EMR emr;
	RECTL rclBounds;
	LONG xDest;
	LONG yDest;
	LONG cxDest;
	LONG cyDest;
	DWORD dwRop;
	LONG xSrc;
	LONG ySrc;
	XFORM xformSrc;
	COLORREF crBkColorSrc;
	DWORD iUsageSrc;
	DWORD offBmiSrc;
	DWORD cbBmiSrc;
	DWORD offBitsSrc;
	DWORD cbBitsSrc;
	LONG cxSrc;
	LONG cySrc;
}

alias EMRSTRETCHBLT TAGEMRSTRETCHBLT;
alias EMRSTRETCHBLT TEMRSTRETCHBLT;
alias EMRSTRETCHBLT* PEMRSTRETCHBLT;

struct EMRSTRETCHDIBITS
{
	EMR emr;
	RECTL rclBounds;
	LONG xDest;
	LONG yDest;
	LONG xSrc;
	LONG ySrc;
	LONG cxSrc;
	LONG cySrc;
	DWORD offBmiSrc;
	DWORD cbBmiSrc;
	DWORD offBitsSrc;
	DWORD cbBitsSrc;
	DWORD iUsageSrc;
	DWORD dwRop;
	LONG cxDest;
	LONG cyDest;
}

alias EMRSTRETCHDIBITS TAGEMRSTRETCHDIBITS;
alias EMRSTRETCHDIBITS TEMRSTRETCHDIBITS;
alias EMRSTRETCHDIBITS* PEMRSTRETCHDIBITS;

struct EMRABORTPATH
{
	EMR emr;
}

alias EMRABORTPATH TEMRABORTPATH;
alias EMRABORTPATH* PEMRABORTPATH;
alias EMRABORTPATH TAGABORTPATH;
alias EMRABORTPATH TABORTPATH;
alias EMRABORTPATH EMRBEGINPATH;
alias EMRABORTPATH TEMRBEGINPATH;
alias EMRABORTPATH* PEMRBEGINPATH;
alias EMRABORTPATH EMRENDPATH;
alias EMRABORTPATH TEMRENDPATH;
alias EMRABORTPATH* PEMRENDPATH;
alias EMRABORTPATH EMRCLOSEFIGURE;
alias EMRABORTPATH TEMRCLOSEFIGURE;
alias EMRABORTPATH* PEMRCLOSEFIGURE;
alias EMRABORTPATH EMRFLATTENPATH;
alias EMRABORTPATH TEMRFLATTENPATH;
alias EMRABORTPATH* PEMRFLATTENPATH;
alias EMRABORTPATH EMRWIDENPATH;
alias EMRABORTPATH TEMRWIDENPATH;
alias EMRABORTPATH* PEMRWIDENPATH;
alias EMRABORTPATH EMRSETMETARGN;
alias EMRABORTPATH TEMRSETMETARGN;
alias EMRABORTPATH* PEMRSETMETARGN;
alias EMRABORTPATH EMRSAVEDC;
alias EMRABORTPATH TEMRSAVEDC;
alias EMRABORTPATH* PEMRSAVEDC;
alias EMRABORTPATH EMRREALIZEPALETTE;
alias EMRABORTPATH TEMRREALIZEPALETTE;
alias EMRABORTPATH* PEMRREALIZEPALETTE;

struct EMRSELECTCLIPPATH
{
	EMR emr;
	DWORD iMode;
}

alias EMRSELECTCLIPPATH TAGEMRSELECTCLIPPATH;
alias EMRSELECTCLIPPATH TEMRSELECTCLIPPATH;
alias EMRSELECTCLIPPATH* PEMRSELECTCLIPPATH;
alias EMRSELECTCLIPPATH EMRSETBKMODE;
alias EMRSELECTCLIPPATH TEMRSETBKMODE;
alias EMRSELECTCLIPPATH* PEMRSETBKMODE;
alias EMRSELECTCLIPPATH EMRSETMAPMODE;
alias EMRSELECTCLIPPATH TEMRSETMAPMODE;
alias EMRSELECTCLIPPATH* PEMRSETMAPMODE;
alias EMRSELECTCLIPPATH EMRSETPOLYFILLMODE;
alias EMRSELECTCLIPPATH TEMRSETPOLYFILLMODE;
alias EMRSELECTCLIPPATH* PEMRSETPOLYFILLMODE;
alias EMRSELECTCLIPPATH EMRSETROP2;
alias EMRSELECTCLIPPATH TEMRSETROP2;
alias EMRSELECTCLIPPATH* PEMRSETROP2;
alias EMRSELECTCLIPPATH EMRSETSTRETCHBLTMODE;
alias EMRSELECTCLIPPATH TEMRSETSTRETCHBLTMODE;
alias EMRSELECTCLIPPATH* PEMRSETSTRETCHBLTMODE;
alias EMRSELECTCLIPPATH EMRSETTEXTALIGN;
alias EMRSELECTCLIPPATH TEMRSETTEXTALIGN;
alias EMRSELECTCLIPPATH* PEMRSETTEXTALIGN;
alias EMRSELECTCLIPPATH EMRENABLEICM;
alias EMRSELECTCLIPPATH TEMRENABLEICM;
alias EMRSELECTCLIPPATH* PEMRENABLEICM;

struct NMHDR
{
	HWND hwndFrom;
	UINT idFrom;
	UINT code;
}

alias NMHDR TAGNMHDR;
alias NMHDR TNMHDR;
alias NMHDR* PNMHDR;

struct ENCORRECTTEXT
{
	NMHDR nmhdr;
	CHARRANGE chrg;
	ushort seltyp;
}

alias ENCORRECTTEXT _ENCORRECTTEXT;
alias ENCORRECTTEXT TENCORRECTTEXT;
alias ENCORRECTTEXT* PENCORRECTTEXT;

struct ENDROPFILES
{
	NMHDR nmhdr;
	HANDLE hDrop;
	LONG cp;
	WINBOOL fProtected;
}

alias ENDROPFILES _ENDROPFILES;
alias ENDROPFILES TENDROPFILES;
alias ENDROPFILES* PENDROPFILES;

struct ENSAVECLIPBOARD
{
	NMHDR nmhdr;
	LONG cObjectCount;
	LONG cch;
}

alias ENSAVECLIPBOARD TENSAVECLIPBOARD;
alias ENSAVECLIPBOARD* PENSAVECLIPBOARD;

struct ENOLEOPFAILED
{
	NMHDR nmhdr;
	LONG iob;
	LONG lOper;
	HRESULT hr;
}

alias ENOLEOPFAILED TENOLEOPFAILED;
alias ENOLEOPFAILED* PENOLEOPFAILED;

struct ENHMETAHEADER
{
	DWORD iType;
	DWORD nSize;
	RECTL rclBounds;
	RECTL rclFrame;
	DWORD dSignature;
	DWORD nVersion;
	DWORD nBytes;
	DWORD nRecords;
	ushort nHandles;
	ushort sReserved;
	DWORD nDescription;
	DWORD offDescription;
	DWORD nPalEntries;
	SIZEL szlDevice;
	SIZEL szlMillimeters;
}

alias ENHMETAHEADER* LPENHMETAHEADER;
alias ENHMETAHEADER TAGENHMETAHEADER;
alias ENHMETAHEADER TENHMETAHEADER;
alias ENHMETAHEADER* PENHMETAHEADER;

struct ENHMETARECORD
{
	DWORD iType;
	DWORD nSize;
	DWORD[1 + 0] dParm;
}

alias ENHMETARECORD* LPENHMETARECORD;
alias ENHMETARECORD TAGENHMETARECORD;
alias ENHMETARECORD TENHMETARECORD;
alias ENHMETARECORD* PENHMETARECORD;

struct ENPROTECTED
{
	NMHDR nmhdr;
	UINT msg;
	WPARAM wParam;
	LPARAM lParam;
	CHARRANGE chrg;
}

alias ENPROTECTED _ENPROTECTED;
alias ENPROTECTED TENPROTECTED;
alias ENPROTECTED* PENPROTECTED;

struct SERVICE_STATUS
{
	DWORD dwServiceType;
	DWORD dwCurrentState;
	DWORD dwControlsAccepted;
	DWORD dwWin32ExitCode;
	DWORD dwServiceSpecificExitCode;
	DWORD dwCheckPoint;
	DWORD dwWaitHint;
}

alias SERVICE_STATUS* LPSERVICE_STATUS;
alias SERVICE_STATUS _SERVICE_STATUS;
alias SERVICE_STATUS TSERVICESTATUS;
alias SERVICE_STATUS* PSERVICESTATUS;

struct ENUM_SERVICE_STATUS
{
	LPTSTR lpServiceName;
	LPTSTR lpDisplayName;
	SERVICE_STATUS ServiceStatus;
}

alias ENUM_SERVICE_STATUS* LPENUM_SERVICE_STATUS;
alias ENUM_SERVICE_STATUS _ENUM_SERVICE_STATUS;
alias ENUM_SERVICE_STATUS TENUMSERVICESTATUS;
alias ENUM_SERVICE_STATUS* PENUMSERVICESTATUS;

struct ENUMLOGFONT
{
	LOGFONT elfLogFont;
	BCHAR[1 + LF_FULLFACESIZE-1] elfFullName;
	BCHAR[1 + LF_FACESIZE-1] elfStyle;
}

alias ENUMLOGFONT TAGENUMLOGFONT;
alias ENUMLOGFONT TENUMLOGFONT;
alias ENUMLOGFONT* PENUMLOGFONT;

struct ENUMLOGFONTEX
{
	LOGFONT elfLogFont;
	BCHAR[1 + LF_FULLFACESIZE-1] elfFullName;
	BCHAR[1 + LF_FACESIZE-1] elfStyle;
	BCHAR[1 + LF_FACESIZE-1] elfScript;
}

alias ENUMLOGFONTEX TAGENUMLOGFONTEX;
alias ENUMLOGFONTEX TENUMLOGFONTEX;
alias ENUMLOGFONTEX* PENUMLOGFONTEX;

struct EVENTLOGRECORD
{
	DWORD Length;
	DWORD Reserved;
	DWORD RecordNumber;
	DWORD TimeGenerated;
	DWORD TimeWritten;
	DWORD EventID;
	ushort EventType;
	ushort NumStrings;
	ushort EventCategory;
	ushort ReservedFlags;
	DWORD ClosingRecordNumber;
	DWORD StringOffset;
	DWORD UserSidLength;
	DWORD UserSidOffset;
	DWORD DataLength;
	DWORD DataOffset;
}

alias EVENTLOGRECORD _EVENTLOGRECORD;
alias EVENTLOGRECORD TEVENTLOGRECORD;
alias EVENTLOGRECORD* PEVENTLOGRECORD;

struct EVENTMSG
{
	UINT message;
	UINT paramL;
	UINT paramH;
	DWORD time;
	HWND hwnd;
}

alias EVENTMSG TAGEVENTMSG;
alias EVENTMSG TEVENTMSG;
alias EVENTMSG* PEVENTMSG;

struct EXCEPTION_POINTERS
{
	PEXCEPTION_RECORD ExceptionRecord;
	PCONTEXT ContextRecord;
}

alias EXCEPTION_POINTERS* LPEXCEPTION_POINTERS;
alias EXCEPTION_POINTERS* PEXCEPTION_POINTERS;
alias EXCEPTION_POINTERS _EXCEPTION_POINTERS;
alias EXCEPTION_POINTERS TEXCEPTIONPOINTERS;
alias EXCEPTION_POINTERS* PEXCEPTIONPOINTERS;

struct EXT_BUTTON
{
	ushort idCommand;
	ushort idsHelp;
	ushort fsStyle;
}

alias EXT_BUTTON* LPEXT_BUTTON;
alias EXT_BUTTON _EXT_BUTTON;
alias EXT_BUTTON TEXTBUTTON;
alias EXT_BUTTON* PEXTBUTTON;

struct FILTERKEYS
{
	UINT cbSize;
	DWORD dwFlags;
	DWORD iWaitMSec;
	DWORD iDelayMSec;
	DWORD iRepeatMSec;
	DWORD iBounceMSec;
}

alias FILTERKEYS TAGFILTERKEYS;
alias FILTERKEYS TFILTERKEYS;
alias FILTERKEYS* PFILTERKEYS;

struct FIND_NAME_BUFFER
{
	UCHAR length;
	UCHAR access_control;
	UCHAR frame_control;
	UCHAR[1 + 5] destination_addr;
	UCHAR[1 + 5] source_addr;
	UCHAR[1 + 17] routing_info;
}

alias FIND_NAME_BUFFER _FIND_NAME_BUFFER;
alias FIND_NAME_BUFFER TFINDNAMEBUFFER;
alias FIND_NAME_BUFFER* PFINDNAMEBUFFER;

struct FIND_NAME_HEADER
{
	ushort node_count;
	UCHAR reserved;
	UCHAR unique_group;
}

alias FIND_NAME_HEADER _FIND_NAME_HEADER;
alias FIND_NAME_HEADER TFINDNAMEHEADER;
alias FIND_NAME_HEADER* PFINDNAMEHEADER;

struct FINDREPLACE
{
	DWORD lStructSize;
	HWND hwndOwner;
	HINST hInstance;
	DWORD Flags;
	LPTSTR lpstrFindWhat;
	LPTSTR lpstrReplaceWith;
	ushort wFindWhatLen;
	ushort wReplaceWithLen;
	LPARAM lCustData;
	LPFRHOOKPROC lpfnHook;
	LPCTSTR lpTemplateName;
}

alias FINDREPLACE* LPFINDREPLACE;
alias FINDREPLACE TFINDREPLACE;
alias FINDREPLACE* PFINDREPLACE;

struct TFINDTEXT
{
	CHARRANGE chrg;
	LPSTR lpstrText;
}

alias TFINDTEXT _FINDTEXT;
alias TFINDTEXT* PFINDTEXT;

struct FINDTEXTEX
{
	CHARRANGE chrg;
	LPSTR lpstrText;
	CHARRANGE chrgText;
}

alias FINDTEXTEX _FINDTEXTEX;
alias FINDTEXTEX TFINDTEXTEX;
alias FINDTEXTEX* PFINDTEXTEX;

struct FMS_GETDRIVEINFO
{
	DWORD dwTotalSpace;
	DWORD dwFreeSpace;
	TCHAR[1 + 259] szPath;
	TCHAR[1 + 13] szVolume;
	TCHAR[1 + 127] szShare;
}

alias FMS_GETDRIVEINFO _FMS_GETDRIVEINFO;
alias FMS_GETDRIVEINFO TFMSGETDRIVEINFO;
alias FMS_GETDRIVEINFO* PFMSGETDRIVEINFO;

struct FMS_GETFILESEL
{
	FILETIME ftTime;
	DWORD dwSize;
	ubyte bAttr;
	TCHAR[1 + 259] szName;
}

alias FMS_GETFILESEL _FMS_GETFILESEL;
alias FMS_GETFILESEL TFMSGETFILESEL;
alias FMS_GETFILESEL* PFMSGETFILESEL;

struct FMS_LOAD
{
	DWORD dwSize;
	TCHAR[1 + MENU_TEXT_LEN-1] szMenuName;
	HMENU hMenu;
	UINT wMenuDelta;
}

alias FMS_LOAD _FMS_LOAD;
alias FMS_LOAD TFMSLOAD;
alias FMS_LOAD* PFMSLOAD;

struct FMS_TOOLBARLOAD
{
	DWORD dwSize;
	LPEXT_BUTTON lpButtons;
	ushort cButtons;
	ushort cBitmaps;
	ushort idBitmap;
	HBITMAP hBitmap;
}

alias FMS_TOOLBARLOAD _FMS_TOOLBARLOAD;
alias FMS_TOOLBARLOAD TFMSTOOLBARLOAD;
alias FMS_TOOLBARLOAD* PFMSTOOLBARLOAD;

struct FOCUS_EVENT_RECORD
{
	WINBOOL bSetFocus;
}

alias FOCUS_EVENT_RECORD _FOCUS_EVENT_RECORD;
alias FOCUS_EVENT_RECORD TFOCUSEVENTRECORD;
alias FOCUS_EVENT_RECORD* PFOCUSEVENTRECORD;

struct FORM_INFO_1
{
	DWORD Flags;
	LPTSTR pName;
	SIZEL Size;
	RECTL ImageableArea;
}

alias FORM_INFO_1 _FORM_INFO_1;
alias FORM_INFO_1 TFORMINFO1;
alias FORM_INFO_1* PFORMINFO1;

struct FORMAT_PARAMETERS
{
	MEDIA_TYPE MediaType;
	DWORD StartCylinderNumber;
	DWORD EndCylinderNumber;
	DWORD StartHeadNumber;
	DWORD EndHeadNumber;
}

alias FORMAT_PARAMETERS _FORMAT_PARAMETERS;
alias FORMAT_PARAMETERS TFORMATPARAMETERS;
alias FORMAT_PARAMETERS* PFORMATPARAMETERS;

struct FORMATRANGE
{
	HDC _hdc;
	HDC hdcTarget;
	RECT rc;
	RECT rcPage;
	CHARRANGE chrg;
}

alias FORMATRANGE _FORMATRANGE;
alias FORMATRANGE TFORMATRANGE;
alias FORMATRANGE* PFORMATRANGE;

struct GCP_RESULTS
{
	DWORD lStructSize;
	LPTSTR lpOutString;
	UINT* lpOrder;
	INT* lpDx;
	INT* lpCaretPos;
	LPTSTR lpClass;
	UINT* lpGlyphs;
	UINT nGlyphs;
	UINT nMaxFit;
}

alias GCP_RESULTS* LPGCP_RESULTS;
alias GCP_RESULTS TAGGCP_RESULTS;
alias GCP_RESULTS TGCPRESULTS;
alias GCP_RESULTS* PGCPRESULTS;

struct GENERIC_MAPPING
{
	ACCESS_MASK GenericRead;
	ACCESS_MASK GenericWrite;
	ACCESS_MASK GenericExecute;
	ACCESS_MASK GenericAll;
}

alias GENERIC_MAPPING* PGENERIC_MAPPING;
alias GENERIC_MAPPING _GENERIC_MAPPING;
alias GENERIC_MAPPING TGENERICMAPPING;
alias GENERIC_MAPPING* PGENERICMAPPING;

struct GLYPHMETRICS
{
	UINT gmBlackBoxX;
	UINT gmBlackBoxY;
	POINT gmptGlyphOrigin;
	int gmCellIncX;
	int gmCellIncY;
}

alias GLYPHMETRICS* LPGLYPHMETRICS;
alias GLYPHMETRICS _GLYPHMETRICS;
alias GLYPHMETRICS TGLYPHMETRICS;
alias GLYPHMETRICS* PGLYPHMETRICS;

struct HANDLETABLE
{
	HGDIOBJ[1 + 0] objectHandle;
}

alias HANDLETABLE TAGHANDLETABLE;
alias HANDLETABLE THANDLETABLE;
alias HANDLETABLE* LPHANDLETABLE;

struct HD_HITTESTINFO
{
	POINT pt;
	UINT flags;
	int iItem;
}

alias HD_HITTESTINFO _HD_HITTESTINFO;
alias HD_HITTESTINFO THDHITTESTINFO;
alias HD_HITTESTINFO* PHDHITTESTINFO;

struct HD_ITEM
{
	UINT mask;
	int cxy;
	LPTSTR pszText;
	HBITMAP hbm;
	int cchTextMax;
	int fmt;
	LPARAM lParam;
}

alias HD_ITEM _HD_ITEM;
alias HD_ITEM THDITEM;
alias HD_ITEM* PHDITEM;

struct WINDOWPOS
{
	HWND _hwnd;
	HWND hwndInsertAfter;
	int x;
	int y;
	int cx;
	int cy;
	UINT flags;
}

alias WINDOWPOS* LPWINDOWPOS;
alias WINDOWPOS _WINDOWPOS;
alias WINDOWPOS TWINDOWPOS;
alias WINDOWPOS* PWINDOWPOS;

struct HD_LAYOUT
{
	RECT* prc;
	WINDOWPOS* pwpos;
}

alias HD_LAYOUT _HD_LAYOUT;
alias HD_LAYOUT THDLAYOUT;
alias HD_LAYOUT* PHDLAYOUT;

struct HD_NOTIFY
{
	NMHDR hdr;
	int iItem;
	int iButton;
	HD_ITEM* pitem;
}

alias HD_NOTIFY _HD_NOTIFY;
alias HD_NOTIFY THDNOTIFY;
alias HD_NOTIFY* PHDNOTIFY;

struct HELPINFO
{
	UINT cbSize;
	int iContextType;
	int iCtrlId;
	HANDLE hItemHandle;
	DWORD dwContextId;
	POINT MousePos;
}

alias HELPINFO* LPHELPINFO;
alias HELPINFO TAGHELPINFO;
alias HELPINFO THELPINFO;
alias HELPINFO* PHELPINFO;

struct HELPWININFO
{
	int wStructSize;
	int x;
	int y;
	int dx;
	int dy;
	int wMax;
	TCHAR[1 + 1] rgchMember;
}

alias HELPWININFO THELPWININFO;
alias HELPWININFO* PHELPWININFO;

struct HIGHCONTRAST
{
	UINT cbSize;
	DWORD dwFlags;
	LPTSTR lpszDefaultScheme;
}

alias HIGHCONTRAST* LPHIGHCONTRAST;
alias HIGHCONTRAST TAGHIGHCONTRAST;
alias HIGHCONTRAST THIGHCONTRAST;
alias HIGHCONTRAST* PHIGHCONTRAST;

struct HSZPAIR
{
	HSZ hszSvc;
	HSZ hszTopic;
}

alias HSZPAIR TAGHSZPAIR;
alias HSZPAIR THSZPAIR;
alias HSZPAIR* PHSZPAIR;

struct ICONINFO
{
	WINBOOL fIcon;
	DWORD xHotspot;
	DWORD yHotspot;
	HBITMAP hbmMask;
	HBITMAP hbmColor;
}

alias ICONINFO _ICONINFO;
alias ICONINFO TICONINFO;
alias ICONINFO* PICONINFO;

struct ICONMETRICS
{
	UINT cbSize;
	int iHorzSpacing;
	int iVertSpacing;
	int iTitleWrap;
	LOGFONT lfFont;
}

alias ICONMETRICS* LPICONMETRICS;
alias ICONMETRICS TAGICONMETRICS;
alias ICONMETRICS TICONMETRICS;
alias ICONMETRICS* PICONMETRICS;

struct IMAGEINFO
{
	HBITMAP hbmImage;
	HBITMAP hbmMask;
	int Unused1;
	int Unused2;
	RECT rcImage;
}

alias IMAGEINFO _IMAGEINFO;
alias IMAGEINFO TIMAGEINFO;
alias IMAGEINFO* PIMAGEINFO;

align(1) struct KEY_EVENT_RECORD
{
	WINBOOL bKeyDown;
	ushort wRepeatCount;
	ushort wVirtualKeyCode;
	ushort wVirtualScanCode;

	union
	{
		struct
		{
			WCHAR UnicodeChar;
			DWORD dwControlKeyState;
		}
		struct
		{
			char AsciiChar;
		}
	}
}

alias KEY_EVENT_RECORD _KEY_EVENT_RECORD;
alias KEY_EVENT_RECORD TKEYEVENTRECORD;
alias KEY_EVENT_RECORD* PKEYEVENTRECORD;

struct MOUSE_EVENT_RECORD
{
	COORD dwMousePosition;
	DWORD dwButtonState;
	DWORD dwControlKeyState;
	DWORD dwEventFlags;
}

alias MOUSE_EVENT_RECORD _MOUSE_EVENT_RECORD;
alias MOUSE_EVENT_RECORD TMOUSEEVENTRECORD;
alias MOUSE_EVENT_RECORD* PMOUSEEVENTRECORD;

struct WINDOW_BUFFER_SIZE_RECORD
{
	COORD dwSize;
}

alias WINDOW_BUFFER_SIZE_RECORD _WINDOW_BUFFER_SIZE_RECORD;
alias WINDOW_BUFFER_SIZE_RECORD TWINDOWBUFFERSIZERECORD;
alias WINDOW_BUFFER_SIZE_RECORD* PWINDOWBUFFERSIZERECORD;

struct MENU_EVENT_RECORD
{
	UINT dwCommandId;
}

alias MENU_EVENT_RECORD* PMENU_EVENT_RECORD;
alias MENU_EVENT_RECORD _MENU_EVENT_RECORD;
alias MENU_EVENT_RECORD TMENUEVENTRECORD;
alias MENU_EVENT_RECORD* PMENUEVENTRECORD;

struct INPUT_RECORD
{
	ushort EventType;

	union
	{
		struct
		{
			KEY_EVENT_RECORD KeyEvent;
		}
		struct
		{
			MOUSE_EVENT_RECORD MouseEvent;
		}
		struct
		{
			WINDOW_BUFFER_SIZE_RECORD WindowBufferSizeEvent;
		}
		struct
		{
			MENU_EVENT_RECORD MenuEvent;
		}
		struct
		{
			FOCUS_EVENT_RECORD FocusEvent;
		}
	}
}

alias INPUT_RECORD* PINPUT_RECORD;
alias INPUT_RECORD _INPUT_RECORD;
alias INPUT_RECORD TINPUTRECORD;
alias INPUT_RECORD* PINPUTRECORD;

struct SYSTEMTIME
{
	ushort wYear;
	ushort wMonth;
	ushort wDayOfWeek;
	ushort wDay;
	ushort wHour;
	ushort wMinute;
	ushort wSecond;
	ushort wMilliseconds;
}

alias SYSTEMTIME* LPSYSTEMTIME;
alias SYSTEMTIME _SYSTEMTIME;
alias SYSTEMTIME TSYSTEMTIME;
alias SYSTEMTIME* PSYSTEMTIME;

struct JOB_INFO_1
{
	DWORD JobId;
	LPTSTR pPrinterName;
	LPTSTR pMachineName;
	LPTSTR pUserName;
	LPTSTR pDocument;
	LPTSTR pDatatype;
	LPTSTR pStatus;
	DWORD Status;
	DWORD Priority;
	DWORD Position;
	DWORD TotalPages;
	DWORD PagesPrinted;
	SYSTEMTIME Submitted;
}

alias JOB_INFO_1 _JOB_INFO_1;
alias JOB_INFO_1 TJOBINFO1;
alias JOB_INFO_1* PJOBINFO1;

struct SID_IDENTIFIER_AUTHORITY
{
	ubyte[1 + 5] Value;
}

alias SID_IDENTIFIER_AUTHORITY* LPSID_IDENTIFIER_AUTHORITY;
alias SID_IDENTIFIER_AUTHORITY* PSID_IDENTIFIER_AUTHORITY;
alias SID_IDENTIFIER_AUTHORITY _SID_IDENTIFIER_AUTHORITY;
alias SID_IDENTIFIER_AUTHORITY TSIDIDENTIFIERAUTHORITY;
alias SID_IDENTIFIER_AUTHORITY* PSIDIDENTIFIERAUTHORITY;

struct SID
{
	ubyte Revision;
	ubyte SubAuthorityCount;
	SID_IDENTIFIER_AUTHORITY IdentifierAuthority;
	DWORD[1 + ANYSIZE_ARRAY-1] SubAuthority;
}

alias SID _SID;
alias SID TSID;
alias SID* PSID;
alias ushort SECURITY_DESCRIPTOR_CONTROL;
alias SECURITY_DESCRIPTOR_CONTROL* PSECURITY_DESCRIPTOR_CONTROL;
alias SECURITY_DESCRIPTOR_CONTROL TSECURITYDESCRIPTORCONTROL;
alias SECURITY_DESCRIPTOR_CONTROL* PSECURITYDESCRIPTORCONTROL;

struct SECURITY_DESCRIPTOR
{
	ubyte Revision;
	ubyte Sbz1;
	SECURITY_DESCRIPTOR_CONTROL Control;
	PSID Owner;
	PSID Group;
	PACL Sacl;
	PACL Dacl;
}

alias SECURITY_DESCRIPTOR* PSECURITY_DESCRIPTOR;
alias SECURITY_DESCRIPTOR _SECURITY_DESCRIPTOR;
alias SECURITY_DESCRIPTOR TSECURITYDESCRIPTOR;
alias SECURITY_DESCRIPTOR* PSECURITYDESCRIPTOR;

struct JOB_INFO_2
{
	DWORD JobId;
	LPTSTR pPrinterName;
	LPTSTR pMachineName;
	LPTSTR pUserName;
	LPTSTR pDocument;
	LPTSTR pNotifyName;
	LPTSTR pDatatype;
	LPTSTR pPrintProcessor;
	LPTSTR pParameters;
	LPTSTR pDriverName;
	LPDEVMODE pDevMode;
	LPTSTR pStatus;
	PSECURITY_DESCRIPTOR pSecurityDescriptor;
	DWORD Status;
	DWORD Priority;
	DWORD Position;
	DWORD StartTime;
	DWORD UntilTime;
	DWORD TotalPages;
	DWORD Size;
	SYSTEMTIME Submitted;
	DWORD Time;
	DWORD PagesPrinted;
}

alias JOB_INFO_2 _JOB_INFO_2;
alias JOB_INFO_2 TJOBINFO2;
alias JOB_INFO_2* PJOBINFO2;

struct KERNINGPAIR
{
	ushort wFirst;
	ushort wSecond;
	int iKernAmount;
}

alias KERNINGPAIR* LPKERNINGPAIR;
alias KERNINGPAIR TAGKERNINGPAIR;
alias KERNINGPAIR TKERNINGPAIR;
alias KERNINGPAIR* PKERNINGPAIR;

struct LANA_ENUM
{
	UCHAR length;
	UCHAR[1 + MAX_LANA-1] lana;
}

alias LANA_ENUM _LANA_ENUM;
alias LANA_ENUM TLANAENUM;
alias LANA_ENUM* PLANAENUM;

struct LDT_ENTRY
{
	ushort LimitLow;
	ushort BaseLow;

	union
	{
		struct
		{
			ubyte BaseMid;
			ubyte Flags1;
			ubyte Flags2;
			ubyte BaseHi;
		}
		struct
		{
			int flag0;
		}
	}
}

alias LDT_ENTRY* LPLDT_ENTRY;
alias LDT_ENTRY* PLDT_ENTRY;
alias LDT_ENTRY _LDT_ENTRY;
alias LDT_ENTRY TLDTENTRY;
alias LDT_ENTRY* PLDTENTRY;
const{
int bm_LDT_ENTRY_BaseMid = (0xFF);
int bp_LDT_ENTRY_BaseMid = (0);
int bm_LDT_ENTRY_Type = (0x1F00);
int bp_LDT_ENTRY_Type = (8);
int bm_LDT_ENTRY_Dpl = (0x6000);
int bp_LDT_ENTRY_Dpl = (13);
int bm_LDT_ENTRY_Pres = (0x8000);
int bp_LDT_ENTRY_Pres = (15);
int bm_LDT_ENTRY_LimitHi = (0xF0000);
int bp_LDT_ENTRY_LimitHi = (16);
int bm_LDT_ENTRY_Sys = (0x100000);
int bp_LDT_ENTRY_Sys = (20);
int bm_LDT_ENTRY_Reserved_0 = (0x200000);
int bp_LDT_ENTRY_Reserved_0 = (21);
int bm_LDT_ENTRY_Default_Big = (0x400000);
int bp_LDT_ENTRY_Default_Big = (22);
int bm_LDT_ENTRY_Granularity = (0x800000);
int bp_LDT_ENTRY_Granularity = (23);
int bm_LDT_ENTRY_BaseHi = (0xFF000000);
int bp_LDT_ENTRY_BaseHi = (24);
}

struct LOCALESIGNATURE
{
	DWORD[1 + 3] lsUsb;
	DWORD[1 + 1] lsCsbDefault;
	DWORD[1 + 1] lsCsbSupported;
}

alias LOCALESIGNATURE TAGLOCALESIGNATURE;
alias LOCALESIGNATURE TLOCALESIGNATURE;
alias LOCALESIGNATURE* PLOCALESIGNATURE;

struct LOCALGROUP_MEMBERS_INFO_0
{
	PSID lgrmi0_sid;
}

alias LOCALGROUP_MEMBERS_INFO_0 _LOCALGROUP_MEMBERS_INFO_0;
alias LOCALGROUP_MEMBERS_INFO_0 TLOCALGROUPMEMBERSINFO0;
alias LOCALGROUP_MEMBERS_INFO_0* PLOCALGROUPMEMBERSINFO0;

struct LOCALGROUP_MEMBERS_INFO_3
{
	LPWSTR lgrmi3_domainandname;
}

alias LOCALGROUP_MEMBERS_INFO_3 _LOCALGROUP_MEMBERS_INFO_3;
alias LOCALGROUP_MEMBERS_INFO_3 TLOCALGROUPMEMBERSINFO3;
alias LOCALGROUP_MEMBERS_INFO_3* PLOCALGROUPMEMBERSINFO3;
alias int FXPT16DOT16;
alias FXPT16DOT16* LPFXPT16DOT16;
alias FXPT16DOT16 TFXPT16DOT16;
alias FXPT16DOT16* PFXPT16DOT16;
alias LARGE_INTEGER LUID;
alias LUID TLUID;
alias LUID* PLUID;

struct LUID_AND_ATTRIBUTES
{
	LUID Luid;
	DWORD Attributes;
}

alias LUID_AND_ATTRIBUTES _LUID_AND_ATTRIBUTES;
alias LUID_AND_ATTRIBUTES TLUIDANDATTRIBUTES;
alias LUID_AND_ATTRIBUTES* PLUIDANDATTRIBUTES;
alias LUID_AND_ATTRIBUTES[1 + ANYSIZE_ARRAY-1] LUID_AND_ATTRIBUTES_ARRAY;
alias LUID_AND_ATTRIBUTES_ARRAY* PLUID_AND_ATTRIBUTES_ARRAY;
alias LUID_AND_ATTRIBUTES_ARRAY TLUIDANDATTRIBUTESARRAY;
alias LUID_AND_ATTRIBUTES_ARRAY* PLUIDANDATTRIBUTESARRAY;

struct LV_COLUMN
{
	UINT mask;
	int fmt;
	int cx;
	LPTSTR pszText;
	int cchTextMax;
	int iSubItem;
}

alias LV_COLUMN _LV_COLUMN;
alias LV_COLUMN TLVCOLUMN;
alias LV_COLUMN* PLVCOLUMN;

struct LV_ITEM
{
	UINT mask;
	int iItem;
	int iSubItem;
	UINT state;
	UINT stateMask;
	LPTSTR pszText;
	int cchTextMax;
	int iImage;
	LPARAM lParam;
}

alias LV_ITEM _LV_ITEM;
alias LV_ITEM TLVITEM;
alias LV_ITEM* PLVITEM;

struct LV_DISPINFO
{
	NMHDR hdr;
	LV_ITEM item;
}

alias LV_DISPINFO TAGLV_DISPINFO;
alias LV_DISPINFO TLVDISPINFO;
alias LV_DISPINFO* PLVDISPINFO;

struct LV_FINDINFO
{
	UINT flags;
	LPCTSTR psz;
	LPARAM lParam;
	POINT pt;
	UINT vkDirection;
}

alias LV_FINDINFO _LV_FINDINFO;
alias LV_FINDINFO TLVFINDINFO;
alias LV_FINDINFO* PLVFINDINFO;

struct LV_HITTESTINFO
{
	POINT pt;
	UINT flags;
	int iItem;
}

alias LV_HITTESTINFO _LV_HITTESTINFO;
alias LV_HITTESTINFO TLVHITTESTINFO;
alias LV_HITTESTINFO* PLVHITTESTINFO;

struct LV_KEYDOWN
{
	NMHDR hdr;
	ushort wVKey;
	UINT flags;
}

alias LV_KEYDOWN TAGLV_KEYDOWN;
alias LV_KEYDOWN TLVKEYDOWN;
alias LV_KEYDOWN* PLVKEYDOWN;

struct MAT2
{
	FIXED eM11;
	FIXED eM12;
	FIXED eM21;
	FIXED eM22;
}

alias MAT2 _MAT2;
alias MAT2 TMAT2;
alias MAT2* PMAT2;

struct MDICREATESTRUCT
{
	LPCTSTR szClass;
	LPCTSTR szTitle;
	HANDLE hOwner;
	int x;
	int y;
	int cx;
	int cy;
	DWORD style;
	LPARAM lParam;
}

alias MDICREATESTRUCT* LPMDICREATESTRUCT;
alias MDICREATESTRUCT TAGMDICREATESTRUCT;
alias MDICREATESTRUCT TMDICREATESTRUCT;
alias MDICREATESTRUCT* PMDICREATESTRUCT;

struct MEASUREITEMSTRUCT
{
	UINT CtlType;
	UINT CtlID;
	UINT itemID;
	UINT itemWidth;
	UINT itemHeight;
	DWORD itemData;
}

alias MEASUREITEMSTRUCT* LPMEASUREITEMSTRUCT;
alias MEASUREITEMSTRUCT TAGMEASUREITEMSTRUCT;
alias MEASUREITEMSTRUCT TMEASUREITEMSTRUCT;
alias MEASUREITEMSTRUCT* PMEASUREITEMSTRUCT;

struct MEMORY_BASIC_INFORMATION
{
	PVOID BaseAddress;
	PVOID AllocationBase;
	DWORD AllocationProtect;
	DWORD RegionSize;
	DWORD State;
	DWORD Protect;
	DWORD _Type;
}

alias MEMORY_BASIC_INFORMATION* PMEMORY_BASIC_INFORMATION;
alias MEMORY_BASIC_INFORMATION _MEMORY_BASIC_INFORMATION;
alias MEMORY_BASIC_INFORMATION TMEMORYBASICINFORMATION;
alias MEMORY_BASIC_INFORMATION* PMEMORYBASICINFORMATION;

struct MEMORYSTATUS
{
	DWORD dwLength;
	DWORD dwMemoryLoad;
	DWORD dwTotalPhys;
	DWORD dwAvailPhys;
	DWORD dwTotalPageFile;
	DWORD dwAvailPageFile;
	DWORD dwTotalVirtual;
	DWORD dwAvailVirtual;
}

alias MEMORYSTATUS* LPMEMORYSTATUS;
alias MEMORYSTATUS _MEMORYSTATUS;
alias MEMORYSTATUS TMEMORYSTATUS;
alias MEMORYSTATUS* PMEMORYSTATUS;

struct MENUEX_TEMPLATE_HEADER
{
	ushort wVersion;
	ushort wOffset;
	DWORD dwHelpId;
}

alias MENUEX_TEMPLATE_HEADER TMENUXTEMPLATEHEADER;
alias MENUEX_TEMPLATE_HEADER* PMENUXTEMPLATEHEADER;

struct MENUEX_TEMPLATE_ITEM
{
	DWORD dwType;
	DWORD dwState;
	UINT uId;
	ubyte bResInfo;
	WCHAR[1 + 0] szText;
	DWORD dwHelpId;
}

alias MENUEX_TEMPLATE_ITEM TMENUEXTEMPLATEITEM;
alias MENUEX_TEMPLATE_ITEM* PMENUEXTEMPLATEITEM;

struct MENUITEMINFO
{
	UINT cbSize;
	UINT fMask;
	UINT fType;
	UINT fState;
	UINT wID;
	HMENU hSubMenu;
	HBITMAP hbmpChecked;
	HBITMAP hbmpUnchecked;
	DWORD dwItemData;
	LPTSTR dwTypeData;
	UINT cch;
}

alias MENUITEMINFO* LPMENUITEMINFO;
alias MENUITEMINFO* LPCMENUITEMINFO;
alias MENUITEMINFO TAGMENUITEMINFO;
alias MENUITEMINFO TMENUITEMINFO;
alias MENUITEMINFO TMENUITEMINFOA;
alias MENUITEMINFO* PMENUITEMINFO;

struct MENUITEMTEMPLATE
{
	ushort mtOption;
	ushort mtID;
	WCHAR[1 + 0] mtString;
}

alias MENUITEMTEMPLATE TMENUITEMTEMPLATE;
alias MENUITEMTEMPLATE* PMENUITEMTEMPLATE;

struct MENUITEMTEMPLATEHEADER
{
	ushort versionNumber;
	ushort offset;
}

alias MENUITEMTEMPLATEHEADER TMENUITEMTEMPLATEHEADER;
alias MENUITEMTEMPLATEHEADER* PMENUITEMTEMPLATEHEADER;

struct MENUTEMPLATE
{
}

alias MENUTEMPLATE* LPMENUTEMPLATE;
alias MENUTEMPLATE TMENUTEMPLATE;
alias MENUTEMPLATE* PMENUTEMPLATE;

struct METAFILEPICT
{
	LONG mm;
	LONG xExt;
	LONG yExt;
	HMETAFILE hMF;
}

alias METAFILEPICT* LPMETAFILEPICT;
alias METAFILEPICT TAGMETAFILEPICT;
alias METAFILEPICT TMETAFILEPICT;
alias METAFILEPICT* PMETAFILEPICT;

align(1) struct METAHEADER
{
	ushort mtType;
	ushort mtHeaderSize;
	ushort mtVersion;
	DWORD mtSize;
	ushort mtNoObjects;
	DWORD mtMaxRecord;
	ushort mtNoParameters;
}

alias METAHEADER TAGMETAHEADER;
alias METAHEADER TMETAHEADER;
alias METAHEADER* PMETAHEADER;

struct METARECORD
{
	DWORD rdSize;
	ushort rdFunction;
	ushort[1 + 0] rdParm;
}

alias METARECORD* LPMETARECORD;
alias METARECORD TAGMETARECORD;
alias METARECORD TMETARECORD;
alias METARECORD* PMETARECORD;

struct MINIMIZEDMETRICS
{
	UINT cbSize;
	int iWidth;
	int iHorzGap;
	int iVertGap;
	int iArrange;
}

alias MINIMIZEDMETRICS* LPMINIMIZEDMETRICS;
alias MINIMIZEDMETRICS TAGMINIMIZEDMETRICS;
alias MINIMIZEDMETRICS TMINIMIZEDMETRICS;
alias MINIMIZEDMETRICS* PMINIMIZEDMETRICS;

struct MINMAXINFO
{
	POINT ptReserved;
	POINT ptMaxSize;
	POINT ptMaxPosition;
	POINT ptMinTrackSize;
	POINT ptMaxTrackSize;
}

alias MINMAXINFO TAGMINMAXINFO;
alias MINMAXINFO TMINMAXINFO;
alias MINMAXINFO* PMINMAXINFO;

struct MODEMDEVCAPS
{
	DWORD dwActualSize;
	DWORD dwRequiredSize;
	DWORD dwDevSpecificOffset;
	DWORD dwDevSpecificSize;
	DWORD dwModemProviderVersion;
	DWORD dwModemManufacturerOffset;
	DWORD dwModemManufacturerSize;
	DWORD dwModemModelOffset;
	DWORD dwModemModelSize;
	DWORD dwModemVersionOffset;
	DWORD dwModemVersionSize;
	DWORD dwDialOptions;
	DWORD dwCallSetupFailTimer;
	DWORD dwInactivityTimeout;
	DWORD dwSpeakerVolume;
	DWORD dwSpeakerMode;
	DWORD dwModemOptions;
	DWORD dwMaxDTERate;
	DWORD dwMaxDCERate;
	ubyte[1 + 0] abVariablePortion;
}

alias MODEMDEVCAPS* LPMODEMDEVCAPS;
alias MODEMDEVCAPS TMODEMDEVCAPS;
alias MODEMDEVCAPS* PMODEMDEVCAPS;
alias MODEMDEVCAPS MODEMDEVCAPS_TAG;

struct MODEMSETTINGS
{
	DWORD dwActualSize;
	DWORD dwRequiredSize;
	DWORD dwDevSpecificOffset;
	DWORD dwDevSpecificSize;
	DWORD dwCallSetupFailTimer;
	DWORD dwInactivityTimeout;
	DWORD dwSpeakerVolume;
	DWORD dwSpeakerMode;
	DWORD dwPreferredModemOptions;
	DWORD dwNegotiatedModemOptions;
	DWORD dwNegotiatedDCERate;
	ubyte[1 + 0] abVariablePortion;
}

alias MODEMSETTINGS* LPMODEMSETTINGS;
alias MODEMSETTINGS TMODEMSETTINGS;
alias MODEMSETTINGS* PMODEMSETTINGS;
alias MODEMSETTINGS MODEMSETTINGS_TAG;

struct MONCBSTRUCT
{
	UINT cb;
	DWORD dwTime;
	HANDLE hTask;
	DWORD dwRet;
	UINT wType;
	UINT wFmt;
	HCONV hConv;
	HSZ hsz1;
	HSZ hsz2;
	HDDEDATA hData;
	DWORD dwData1;
	DWORD dwData2;
	CONVCONTEXT cc;
	DWORD cbData;
	DWORD[1 + 7] Data;
}

alias MONCBSTRUCT TAGMONCBSTRUCT;
alias MONCBSTRUCT TMONCBSTRUCT;
alias MONCBSTRUCT* PMONCBSTRUCT;

struct MONCONVSTRUCT
{
	UINT cb;
	WINBOOL fConnect;
	DWORD dwTime;
	HANDLE hTask;
	HSZ hszSvc;
	HSZ hszTopic;
	HCONV hConvClient;
	HCONV hConvServer;
}

alias MONCONVSTRUCT TAGMONCONVSTRUCT;
alias MONCONVSTRUCT TMONCONVSTRUCT;
alias MONCONVSTRUCT* PMONCONVSTRUCT;

struct MONERRSTRUCT
{
	UINT cb;
	UINT wLastError;
	DWORD dwTime;
	HANDLE hTask;
}

alias MONERRSTRUCT TAGMONERRSTRUCT;
alias MONERRSTRUCT TMONERRSTRUCT;
alias MONERRSTRUCT* PMONERRSTRUCT;

struct MONHSZSTRUCT
{
	UINT cb;
	WINBOOL fsAction;
	DWORD dwTime;
	HSZ hsz;
	HANDLE hTask;
	TCHAR[1 + 0] str;
}

alias MONHSZSTRUCT TAGMONHSZSTRUCT;
alias MONHSZSTRUCT TMONHSZSTRUCT;
alias MONHSZSTRUCT* PMONHSZSTRUCT;

struct MONITOR_INFO_1
{
	LPTSTR pName;
}

alias MONITOR_INFO_1 _MONITOR_INFO_1;
alias MONITOR_INFO_1 TMONITORINFO1;
alias MONITOR_INFO_1* PMONITORINFO1;

struct MONITOR_INFO_2
{
	LPTSTR pName;
	LPTSTR pEnvironment;
	LPTSTR pDLLName;
}

alias MONITOR_INFO_2 _MONITOR_INFO_2;
alias MONITOR_INFO_2 TMONITORINFO2;
alias MONITOR_INFO_2* PMONITORINFO2;

struct MONLINKSTRUCT
{
	UINT cb;
	DWORD dwTime;
	HANDLE hTask;
	WINBOOL fEstablished;
	WINBOOL fNoData;
	HSZ hszSvc;
	HSZ hszTopic;
	HSZ hszItem;
	UINT wFmt;
	WINBOOL fServer;
	HCONV hConvServer;
	HCONV hConvClient;
}

alias MONLINKSTRUCT TAGMONLINKSTRUCT;
alias MONLINKSTRUCT TMONLINKSTRUCT;
alias MONLINKSTRUCT* PMONLINKSTRUCT;

struct MONMSGSTRUCT
{
	UINT cb;
	HWND hwndTo;
	DWORD dwTime;
	HANDLE hTask;
	UINT wMsg;
	WPARAM wParam;
	LPARAM lParam;
	DDEML_MSG_HOOK_DATA dmhd;
}

alias MONMSGSTRUCT TAGMONMSGSTRUCT;
alias MONMSGSTRUCT TMONMSGSTRUCT;
alias MONMSGSTRUCT* PMONMSGSTRUCT;

struct MOUSEHOOKSTRUCT
{
	POINT pt;
	HWND hwnd;
	UINT wHitTestCode;
	DWORD dwExtraInfo;
}

alias MOUSEHOOKSTRUCT* LPMOUSEHOOKSTRUCT;
alias MOUSEHOOKSTRUCT TAGMOUSEHOOKSTRUCT;
alias MOUSEHOOKSTRUCT TMOUSEHOOKSTRUCT;
alias MOUSEHOOKSTRUCT* PMOUSEHOOKSTRUCT;

struct MOUSEKEYS
{
	DWORD cbSize;
	DWORD dwFlags;
	DWORD iMaxSpeed;
	DWORD iTimeToMaxSpeed;
	DWORD iCtrlSpeed;
	DWORD dwReserved1;
	DWORD dwReserved2;
}

alias MOUSEKEYS TMOUSEKEYS;
alias MOUSEKEYS* PMOUSEKEYS;

struct MSG
{
	HWND hwnd;
	UINT message;
	WPARAM wParam;
	LPARAM lParam;
	DWORD time;
	POINT pt;
}

alias MSG* LPMSG;
alias MSG TAGMSG;
alias MSG TMSG;
alias MSG* PMSG;
extern(Windows){
alias void (*MSGBOXCALLBACK)(LPHELPINFO);
}
alias MSGBOXCALLBACK TMSGBOXCALLBACK;

struct MSGBOXPARAMS
{
	UINT cbSize;
	HWND hwndOwner;
	HINST hInstance;
	LPCSTR lpszText;
	LPCSTR lpszCaption;
	DWORD dwStyle;
	LPCSTR lpszIcon;
	DWORD dwContextHelpId;
	MSGBOXCALLBACK lpfnMsgBoxCallback;
	DWORD dwLanguageId;
}

alias MSGBOXPARAMS* LPMSGBOXPARAMS;
alias MSGBOXPARAMS TMSGBOXPARAMS;
alias MSGBOXPARAMS TMSGBOXPARAMSA;
alias MSGBOXPARAMS* PMSGBOXPARAMS;

struct MSGFILTER
{
	NMHDR nmhdr;
	UINT msg;
	WPARAM wParam;
	LPARAM lParam;
}

alias MSGFILTER _MSGFILTER;
alias MSGFILTER TMSGFILTER;
alias MSGFILTER* PMSGFILTER;

struct MULTIKEYHELP
{
	DWORD mkSize;
	TCHAR mkKeylist;
	TCHAR[1 + 0] szKeyphrase;
}

alias MULTIKEYHELP TAGMULTIKEYHELP;
alias MULTIKEYHELP TMULTIKEYHELP;
alias MULTIKEYHELP* PMULTIKEYHELP;

struct NAME_BUFFER
{
	UCHAR[1 + NCBNAMSZ-1] name;
	UCHAR name_num;
	UCHAR name_flags;
}

alias NAME_BUFFER _NAME_BUFFER;
alias NAME_BUFFER TNAMEBUFFER;
alias NAME_BUFFER* PNAMEBUFFER;
alias _NCB* P_NCB;

struct NCB
{
	UCHAR ncb_command;
	UCHAR ncb_retcode;
	UCHAR ncb_lsn;
	UCHAR ncb_num;
	PUCHAR ncb_buffer;
	ushort ncb_length;
	UCHAR[1 + NCBNAMSZ-1] ncb_callname;
	UCHAR[1 + NCBNAMSZ-1] ncb_name;
	UCHAR ncb_rto;
	UCHAR ncb_sto;
	POINTER ncb_post;
	UCHAR ncb_lana_num;
	UCHAR ncb_cmd_cplt;
	UCHAR[1 + 9] ncb_reserve;
	HANDLE ncb_event;
}

alias NCB _NCB;
alias NCB TNCB;
alias NCB* PNCB;

struct NCCALCSIZE_PARAMS
{
	RECT[1 + 2] rgrc;
	PWINDOWPOS lppos;
}

alias NCCALCSIZE_PARAMS _NCCALCSIZE_PARAMS;
alias NCCALCSIZE_PARAMS TNCCALCSIZEPARAMS;
alias NCCALCSIZE_PARAMS* PNCCALCSIZEPARAMS;

struct NDDESHAREINFO
{
	LONG lRevision;
	LPTSTR lpszShareName;
	LONG lShareType;
	LPTSTR lpszAppTopicList;
	LONG fSharedFlag;
	LONG fService;
	LONG fStartAppFlag;
	LONG nCmdShow;
	LONG[1 + 1] qModifyId;
	LONG cNumItems;
	LPTSTR lpszItemList;
}

alias NDDESHAREINFO _NDDESHAREINFO;
alias NDDESHAREINFO TNDDESHAREINFO;
alias NDDESHAREINFO* PNDDESHAREINFO;

struct NETRESOURCE
{
	DWORD dwScope;
	DWORD dwType;
	DWORD dwDisplayType;
	DWORD dwUsage;
	LPTSTR lpLocalName;
	LPTSTR lpRemoteName;
	LPTSTR lpComment;
	LPTSTR lpProvider;
}

alias NETRESOURCE* LPNETRESOURCE;
alias NETRESOURCE _NETRESOURCE;
alias NETRESOURCE TNETRESOURCE;
alias NETRESOURCE TNETRESOURCEA;
alias NETRESOURCE* PNETRESOURCE;
alias NETRESOURCE* PNETRESOURCEA;

struct NEWCPLINFO
{
	DWORD dwSize;
	DWORD dwFlags;
	DWORD dwHelpContext;
	LONG lData;
	HICON hIcon;
	TCHAR[1 + 31] szName;
	TCHAR[1 + 63] szInfo;
	TCHAR[1 + 127] szHelpFile;
}

alias NEWCPLINFO TAGNEWCPLINFO;
alias NEWCPLINFO TNEWCPLINFO;
alias NEWCPLINFO* PNEWCPLINFO;

struct NEWTEXTMETRIC
{
	LONG tmHeight;
	LONG tmAscent;
	LONG tmDescent;
	LONG tmInternalLeading;
	LONG tmExternalLeading;
	LONG tmAveCharWidth;
	LONG tmMaxCharWidth;
	LONG tmWeight;
	LONG tmOverhang;
	LONG tmDigitizedAspectX;
	LONG tmDigitizedAspectY;
	BCHAR tmFirstChar;
	BCHAR tmLastChar;
	BCHAR tmDefaultChar;
	BCHAR tmBreakChar;
	ubyte tmItalic;
	ubyte tmUnderlined;
	ubyte tmStruckOut;
	ubyte tmPitchAndFamily;
	ubyte tmCharSet;
	DWORD ntmFlags;
	UINT ntmSizeEM;
	UINT ntmCellHeight;
	UINT ntmAvgWidth;
}

alias NEWTEXTMETRIC TAGNEWTEXTMETRIC;
alias NEWTEXTMETRIC TNEWTEXTMETRIC;
alias NEWTEXTMETRIC* PNEWTEXTMETRIC;

struct NEWTEXTMETRICEX
{
	NEWTEXTMETRIC ntmentm;
	FONTSIGNATURE ntmeFontSignature;
}

alias NEWTEXTMETRICEX TAGNEWTEXTMETRICEX;
alias NEWTEXTMETRICEX TNEWTEXTMETRICEX;
alias NEWTEXTMETRICEX* PNEWTEXTMETRICEX;

struct NM_LISTVIEW
{
	NMHDR hdr;
	int iItem;
	int iSubItem;
	UINT uNewState;
	UINT uOldState;
	UINT uChanged;
	POINT ptAction;
	LPARAM lParam;
}

alias NM_LISTVIEW TAGNM_LISTVIEW;
alias NM_LISTVIEW TNMLISTVIEW;
alias NM_LISTVIEW* PNMLISTVIEW;

struct TV_ITEM
{
	UINT mask;
	HTREEITEM hItem;
	UINT state;
	UINT stateMask;
	LPTSTR pszText;
	int cchTextMax;
	int iImage;
	int iSelectedImage;
	int cChildren;
	LPARAM lParam;
}

alias TV_ITEM* LPTV_ITEM;
alias TV_ITEM _TV_ITEM;
alias TV_ITEM TTVITEM;
alias TV_ITEM* PTVITEM;

struct NM_TREEVIEW
{
	NMHDR hdr;
	UINT action;
	TV_ITEM itemOld;
	TV_ITEM itemNew;
	POINT ptDrag;
}

alias NM_TREEVIEW* LPNM_TREEVIEW;
alias NM_TREEVIEW _NM_TREEVIEW;
alias NM_TREEVIEW TNMTREEVIEW;
alias NM_TREEVIEW* PNMTREEVIEW;

struct NM_UPDOWNW
{
	NMHDR hdr;
	int iPos;
	int iDelta;
}

alias NM_UPDOWNW _NM_UPDOWN;
alias NM_UPDOWNW TNMUPDOWN;
alias NM_UPDOWNW* PNMUPDOWN;

struct NONCLIENTMETRICS
{
	UINT cbSize;
	int iBorderWidth;
	int iScrollWidth;
	int iScrollHeight;
	int iCaptionWidth;
	int iCaptionHeight;
	LOGFONT lfCaptionFont;
	int iSmCaptionWidth;
	int iSmCaptionHeight;
	LOGFONT lfSmCaptionFont;
	int iMenuWidth;
	int iMenuHeight;
	LOGFONT lfMenuFont;
	LOGFONT lfStatusFont;
	LOGFONT lfMessageFont;
}

alias NONCLIENTMETRICS* LPNONCLIENTMETRICS;
alias NONCLIENTMETRICS TAGNONCLIENTMETRICS;
alias NONCLIENTMETRICS TNONCLIENTMETRICS;
alias NONCLIENTMETRICS* PNONCLIENTMETRICS;

struct SERVICE_ADDRESS
{
	DWORD dwAddressType;
	DWORD dwAddressFlags;
	DWORD dwAddressLength;
	DWORD dwPrincipalLength;
	ubyte* lpAddress;
	ubyte* lpPrincipal;
}

alias SERVICE_ADDRESS _SERVICE_ADDRESS;
alias SERVICE_ADDRESS TSERVICEADDRESS;
alias SERVICE_ADDRESS* PSERVICEADDRESS;

struct SERVICE_ADDRESSES
{
	DWORD dwAddressCount;
	SERVICE_ADDRESS[1 + 0] Addresses;
}

alias SERVICE_ADDRESSES* LPSERVICE_ADDRESSES;
alias SERVICE_ADDRESSES _SERVICE_ADDRESSES;
alias SERVICE_ADDRESSES TSERVICEADDRESSES;
alias SERVICE_ADDRESSES* PSERVICEADDRESSES;

align(1) struct __GUID
{

	union
	{
		struct
		{
			uint Data1;
			ushort Data2;
			ushort Data3;
			ubyte[1 + 7] Data4;
		}
		struct
		{
			uint D1;
			ushort D2;
			ushort D3;
			ubyte[1 + 7] D4;
		}
	}
}

alias __GUID* LPGUID;
alias __GUID _GUID;
alias __GUID TGUID;
alias __GUID* PGUID;
alias __GUID __CLSID;
alias __CLSID* LPCLSID;
alias __CLSID TCLSID;
alias __CLSID* PCLSID;

struct SERVICE_INFO
{
	LPGUID lpServiceType;
	LPTSTR lpServiceName;
	LPTSTR lpComment;
	LPTSTR lpLocale;
	DWORD dwDisplayHint;
	DWORD dwVersion;
	DWORD dwTime;
	LPTSTR lpMachineName;
	LPSERVICE_ADDRESSES lpServiceAddress;
	BLOB ServiceSpecificInfo;
}

alias SERVICE_INFO _SERVICE_INFO;
alias SERVICE_INFO TSERVICEINFO;
alias SERVICE_INFO* PSERVICEINFO;

struct NS_SERVICE_INFO
{
	DWORD dwNameSpace;
	SERVICE_INFO ServiceInfo;
}

alias NS_SERVICE_INFO _NS_SERVICE_INFO;
alias NS_SERVICE_INFO TNSSERVICEINFO;
alias NS_SERVICE_INFO* PNSSERVICEINFO;

struct NUMBERFMT
{
	UINT NumDigits;
	UINT LeadingZero;
	UINT Grouping;
	LPTSTR lpDecimalSep;
	LPTSTR lpThousandSep;
	UINT NegativeOrder;
}

alias NUMBERFMT _NUMBERFMT;
alias NUMBERFMT TNUMBERFMT;
alias NUMBERFMT* PNUMBERFMT;

struct OFSTRUCT
{
	ubyte cBytes;
	ubyte fFixedDisk;
	ushort nErrCode;
	ushort Reserved1;
	ushort Reserved2;
	char[1 + OFS_MAXPATHNAME-1] szPathName;
}

alias OFSTRUCT* LPOFSTRUCT;
alias OFSTRUCT _OFSTRUCT;
alias OFSTRUCT TOFSTRUCT;
alias OFSTRUCT* POFSTRUCT;

struct OPENFILENAME
{
	DWORD lStructSize;
	HWND hwndOwner;
	HINST hInstance;
	LPCTSTR lpstrFilter;
	LPTSTR lpstrCustomFilter;
	DWORD nMaxCustFilter;
	DWORD nFilterIndex;
	LPTSTR lpstrFile;
	DWORD nMaxFile;
	LPTSTR lpstrFileTitle;
	DWORD nMaxFileTitle;
	LPCTSTR lpstrInitialDir;
	LPCTSTR lpstrTitle;
	DWORD Flags;
	ushort nFileOffset;
	ushort nFileExtension;
	LPCTSTR lpstrDefExt;
	DWORD lCustData;
	LPOFNHOOKPROC lpfnHook;
	LPCTSTR lpTemplateName;
}

alias OPENFILENAME* LPOPENFILENAME;
alias OPENFILENAME TOPENFILENAME;
alias OPENFILENAME* POPENFILENAME;
alias OPENFILENAME TAGOFN;
alias OPENFILENAME TOFN;
alias OPENFILENAME* POFN;

struct OFNOTIFY
{
	NMHDR hdr;
	LPOPENFILENAME lpOFN;
	LPTSTR pszFile;
}

alias OFNOTIFY* LPOFNOTIFY;
alias OFNOTIFY _OFNOTIFY;
alias OFNOTIFY TOFNOTIFY;
alias OFNOTIFY* POFNOTIFY;

struct OSVERSIONINFO
{
	DWORD dwOSVersionInfoSize;
	DWORD dwMajorVersion;
	DWORD dwMinorVersion;
	DWORD dwBuildNumber;
	DWORD dwPlatformId;
	TCHAR[1 + 127] szCSDVersion;
}

alias OSVERSIONINFO* LPOSVERSIONINFO;
alias OSVERSIONINFO _OSVERSIONINFO;
alias OSVERSIONINFO TOSVERSIONINFO;
alias OSVERSIONINFO* POSVERSIONINFO;

struct TEXTMETRIC
{
	LONG tmHeight;
	LONG tmAscent;
	LONG tmDescent;
	LONG tmInternalLeading;
	LONG tmExternalLeading;
	LONG tmAveCharWidth;
	LONG tmMaxCharWidth;
	LONG tmWeight;
	LONG tmOverhang;
	LONG tmDigitizedAspectX;
	LONG tmDigitizedAspectY;
	BCHAR tmFirstChar;
	BCHAR tmLastChar;
	BCHAR tmDefaultChar;
	BCHAR tmBreakChar;
	ubyte tmItalic;
	ubyte tmUnderlined;
	ubyte tmStruckOut;
	ubyte tmPitchAndFamily;
	ubyte tmCharSet;
}

alias TEXTMETRIC* LPTEXTMETRIC;
alias TEXTMETRIC TAGTEXTMETRIC;
alias TEXTMETRIC TTEXTMETRIC;
alias TEXTMETRIC* PTEXTMETRIC;

struct OUTLINETEXTMETRIC
{
	UINT otmSize;
	TEXTMETRIC otmTextMetrics;
	ubyte otmFiller;
	PANOSE otmPanoseNumber;
	UINT otmfsSelection;
	UINT otmfsType;
	int otmsCharSlopeRise;
	int otmsCharSlopeRun;
	int otmItalicAngle;
	UINT otmEMSquare;
	int otmAscent;
	int otmDescent;
	UINT otmLineGap;
	UINT otmsCapEmHeight;
	UINT otmsXHeight;
	RECT otmrcFontBox;
	int otmMacAscent;
	int otmMacDescent;
	UINT otmMacLineGap;
	UINT otmusMinimumPPEM;
	POINT otmptSubscriptSize;
	POINT otmptSubscriptOffset;
	POINT otmptSuperscriptSize;
	POINT otmptSuperscriptOffset;
	UINT otmsStrikeoutSize;
	int otmsStrikeoutPosition;
	int otmsUnderscoreSize;
	int otmsUnderscorePosition;
	PSTR otmpFamilyName;
	PSTR otmpFaceName;
	PSTR otmpStyleName;
	PSTR otmpFullName;
}

alias OUTLINETEXTMETRIC* LPOUTLINETEXTMETRIC;
alias OUTLINETEXTMETRIC _OUTLINETEXTMETRIC;
alias OUTLINETEXTMETRIC TOUTLINETEXTMETRIC;
alias OUTLINETEXTMETRIC* POUTLINETEXTMETRIC;

struct OVERLAPPED
{
	DWORD Internal;
	DWORD InternalHigh;
	DWORD Offset;
	DWORD OffsetHigh;
	HANDLE hEvent;
}

alias OVERLAPPED* LPOVERLAPPED;
alias OVERLAPPED _OVERLAPPED;
alias OVERLAPPED TOVERLAPPED;
alias OVERLAPPED* POVERLAPPED;

struct TPAGESETUPDLG
{
	DWORD lStructSize;
	HWND hwndOwner;
	HGLOBAL hDevMode;
	HGLOBAL hDevNames;
	DWORD Flags;
	POINT ptPaperSize;
	RECT rtMinMargin;
	RECT rtMargin;
	HINST hInstance;
	LPARAM lCustData;
	LPPAGESETUPHOOK lpfnPageSetupHook;
	LPPAGEPAINTHOOK lpfnPagePaintHook;
	LPCTSTR lpPageSetupTemplateName;
	HGLOBAL hPageSetupTemplate;
}

alias TPAGESETUPDLG* LPPAGESETUPDLG;
alias TPAGESETUPDLG* PPAGESETUPDLG;
alias TPAGESETUPDLG TAGPSD;
alias TPAGESETUPDLG TPSD;
alias TPAGESETUPDLG* PPSD;

struct PAINTSTRUCT
{
	HDC hdc;
	WINBOOL fErase;
	RECT rcPaint;
	WINBOOL fRestore;
	WINBOOL fIncUpdate;
	ubyte[1 + 31] rgbReserved;
}

alias PAINTSTRUCT* LPPAINTSTRUCT;
alias PAINTSTRUCT TAGPAINTSTRUCT;
alias PAINTSTRUCT TPAINTSTRUCT;
alias PAINTSTRUCT* PPAINTSTRUCT;

struct PARAFORMAT
{
	UINT cbSize;
	DWORD dwMask;
	ushort wNumbering;
	ushort wReserved;
	LONG dxStartIndent;
	LONG dxRightIndent;
	LONG dxOffset;
	ushort wAlignment;
	SHORT cTabCount;
	LONG[1 + MAX_TAB_STOPS-1] rgxTabs;
}

alias PARAFORMAT _PARAFORMAT;
alias PARAFORMAT TPARAFORMAT;
alias PARAFORMAT* PPARAFORMAT;

struct PERF_COUNTER_BLOCK
{
	DWORD ByteLength;
}

alias PERF_COUNTER_BLOCK _PERF_COUNTER_BLOCK;
alias PERF_COUNTER_BLOCK TPERFCOUNTERBLOCK;
alias PERF_COUNTER_BLOCK* PPERFCOUNTERBLOCK;

struct PERF_COUNTER_DEFINITION
{
	DWORD ByteLength;
	DWORD CounterNameTitleIndex;
	LPWSTR CounterNameTitle;
	DWORD CounterHelpTitleIndex;
	LPWSTR CounterHelpTitle;
	DWORD DefaultScale;
	DWORD DetailLevel;
	DWORD CounterType;
	DWORD CounterSize;
	DWORD CounterOffset;
}

alias PERF_COUNTER_DEFINITION _PERF_COUNTER_DEFINITION;
alias PERF_COUNTER_DEFINITION TPERFCOUNTERDEFINITION;
alias PERF_COUNTER_DEFINITION* PPERFCOUNTERDEFINITION;

struct PERF_DATA_BLOCK
{
	WCHAR[1 + 3] Signature;
	DWORD LittleEndian;
	DWORD Version;
	DWORD Revision;
	DWORD TotalByteLength;
	DWORD HeaderLength;
	DWORD NumObjectTypes;
	DWORD DefaultObject;
	SYSTEMTIME SystemTime;
	LARGE_INTEGER PerfTime;
	LARGE_INTEGER PerfFreq;
	LARGE_INTEGER PerfTime100nSec;
	DWORD SystemNameLength;
	DWORD SystemNameOffset;
}

alias PERF_DATA_BLOCK _PERF_DATA_BLOCK;
alias PERF_DATA_BLOCK TPERFDATABLOCK;
alias PERF_DATA_BLOCK* PPERFDATABLOCK;

struct PERF_INSTANCE_DEFINITION
{
	DWORD ByteLength;
	DWORD ParentObjectTitleIndex;
	DWORD ParentObjectInstance;
	DWORD UniqueID;
	DWORD NameOffset;
	DWORD NameLength;
}

alias PERF_INSTANCE_DEFINITION _PERF_INSTANCE_DEFINITION;
alias PERF_INSTANCE_DEFINITION TPERFINSTANCEDEFINITION;
alias PERF_INSTANCE_DEFINITION PPERFINSTANCEDEFINITION;

struct PERF_OBJECT_TYPE
{
	DWORD TotalByteLength;
	DWORD DefinitionLength;
	DWORD HeaderLength;
	DWORD ObjectNameTitleIndex;
	LPWSTR ObjectNameTitle;
	DWORD ObjectHelpTitleIndex;
	LPWSTR ObjectHelpTitle;
	DWORD DetailLevel;
	DWORD NumCounters;
	DWORD DefaultCounter;
	DWORD NumInstances;
	DWORD CodePage;
	LARGE_INTEGER PerfTime;
	LARGE_INTEGER PerfFreq;
}

alias PERF_OBJECT_TYPE _PERF_OBJECT_TYPE;
alias PERF_OBJECT_TYPE TPERFOBJECTTYPE;
alias PERF_OBJECT_TYPE* PPERFOBJECTTYPE;

struct POLYTEXT
{
	int x;
	int y;
	UINT n;
	LPCTSTR lpstr;
	UINT uiFlags;
	RECT rcl;
	int* pdx;
}

alias POLYTEXT _POLYTEXT;
alias POLYTEXT TPOLYTEXT;
alias POLYTEXT* PPOLYTEXT;

struct PORT_INFO_1
{
	LPTSTR pName;
}

alias PORT_INFO_1 _PORT_INFO_1;
alias PORT_INFO_1 TPORTINFO1;
alias PORT_INFO_1* PPORTINFO1;

struct PORT_INFO_2
{
	LPSTR pPortName;
	LPSTR pMonitorName;
	LPSTR pDescription;
	DWORD fPortType;
	DWORD Reserved;
}

alias PORT_INFO_2 _PORT_INFO_2;
alias PORT_INFO_2 TPORTINFO2;
alias PORT_INFO_2* PPORTINFO2;

struct PREVENT_MEDIA_REMOVAL
{
	ubyte PreventMediaRemoval;
}

alias PREVENT_MEDIA_REMOVAL _PREVENT_MEDIA_REMOVAL;
alias PREVENT_MEDIA_REMOVAL TPREVENTMEDIAREMOVAL;
alias PREVENT_MEDIA_REMOVAL* PPREVENTMEDIAREMOVAL;

align(1) struct TPRINTDLG
{
	DWORD lStructSize;
	HWND hwndOwner;
	HANDLE hDevMode;
	HANDLE hDevNames;
	HDC hDC;
	DWORD Flags;
	ushort nFromPage;
	ushort nToPage;
	ushort nMinPage;
	ushort nMaxPage;
	ushort nCopies;
	HINST hInstance;
	DWORD lCustData;
	LPPRINTHOOKPROC lpfnPrintHook;
	LPSETUPHOOKPROC lpfnSetupHook;
	LPCTSTR lpPrintTemplateName;
	LPCTSTR lpSetupTemplateName;
	HANDLE hPrintTemplate;
	HANDLE hSetupTemplate;
}

alias TPRINTDLG* LPPRINTDLG;
alias TPRINTDLG* PPRINTDLG;
alias TPRINTDLG TAGPD;
alias TPRINTDLG TPD;
alias TPRINTDLG* PPD;

struct PRINTER_DEFAULTS
{
	LPTSTR pDatatype;
	LPDEVMODE pDevMode;
	ACCESS_MASK DesiredAccess;
}

alias PRINTER_DEFAULTS _PRINTER_DEFAULTS;
alias PRINTER_DEFAULTS TPRINTERDEFAULTS;
alias PRINTER_DEFAULTS* PPRINTERDEFAULTS;

struct PRINTER_INFO_1
{
	DWORD Flags;
	LPTSTR pDescription;
	LPTSTR pName;
	LPTSTR pComment;
}

alias PRINTER_INFO_1* LPPRINTER_INFO_1;
alias PRINTER_INFO_1* PPRINTER_INFO_1;
alias PRINTER_INFO_1 _PRINTER_INFO_1;
alias PRINTER_INFO_1 TPRINTERINFO1;
alias PRINTER_INFO_1* PPRINTERINFO1;

struct PRINTER_INFO_2
{
	LPTSTR pServerName;
	LPTSTR pPrinterName;
	LPTSTR pShareName;
	LPTSTR pPortName;
	LPTSTR pDriverName;
	LPTSTR pComment;
	LPTSTR pLocation;
	LPDEVMODE pDevMode;
	LPTSTR pSepFile;
	LPTSTR pPrintProcessor;
	LPTSTR pDatatype;
	LPTSTR pParameters;
	PSECURITY_DESCRIPTOR pSecurityDescriptor;
	DWORD Attributes;
	DWORD Priority;
	DWORD DefaultPriority;
	DWORD StartTime;
	DWORD UntilTime;
	DWORD Status;
	DWORD cJobs;
	DWORD AveragePPM;
}

alias PRINTER_INFO_2 _PRINTER_INFO_2;
alias PRINTER_INFO_2 TPRINTERINFO2;
alias PRINTER_INFO_2* PPRINTERINFO2;

struct PRINTER_INFO_3
{
	PSECURITY_DESCRIPTOR pSecurityDescriptor;
}

alias PRINTER_INFO_3 _PRINTER_INFO_3;
alias PRINTER_INFO_3 TPRINTERINFO3;
alias PRINTER_INFO_3* PPRINTERINFO3;

struct PRINTER_INFO_4
{
	LPTSTR pPrinterName;
	LPTSTR pServerName;
	DWORD Attributes;
}

alias PRINTER_INFO_4 _PRINTER_INFO_4;
alias PRINTER_INFO_4 TPRINTERINFO4;
alias PRINTER_INFO_4* PPRINTERINFO4;

struct PRINTER_INFO_5
{
	LPTSTR pPrinterName;
	LPTSTR pPortName;
	DWORD Attributes;
	DWORD DeviceNotSelectedTimeout;
	DWORD TransmissionRetryTimeout;
}

alias PRINTER_INFO_5 _PRINTER_INFO_5;
alias PRINTER_INFO_5 TPRINTERINFO5;
alias PRINTER_INFO_5* PPRINTERINFO5;

struct PRINTER_NOTIFY_INFO_DATA
{
	ushort _Type;
	ushort Field;
	DWORD Reserved;
	DWORD Id;

	union
	{
		struct
		{
			DWORD[1 + 1] adwData;
		}
		struct
		{
			DWORD cbBuf;
			LPVOID pBuf;
		}
	}
}

alias PRINTER_NOTIFY_INFO_DATA _PRINTER_NOTIFY_INFO_DATA;
alias PRINTER_NOTIFY_INFO_DATA TPRINTERNOTIFYINFODATA;
alias PRINTER_NOTIFY_INFO_DATA* PPRINTERNOTIFYINFODATA;

struct PRINTER_NOTIFY_INFO
{
	DWORD Version;
	DWORD Flags;
	DWORD Count;
	PRINTER_NOTIFY_INFO_DATA[1 + 0] aData;
}

alias PRINTER_NOTIFY_INFO _PRINTER_NOTIFY_INFO;
alias PRINTER_NOTIFY_INFO TPRINTERNOTIFYINFO;
alias PRINTER_NOTIFY_INFO* PPRINTERNOTIFYINFO;

struct PRINTER_NOTIFY_OPTIONS_TYPE
{
	ushort _Type;
	ushort Reserved0;
	DWORD Reserved1;
	DWORD Reserved2;
	DWORD Count;
	PWORD pFields;
}

alias PRINTER_NOTIFY_OPTIONS_TYPE* PPRINTER_NOTIFY_OPTIONS_TYPE;
alias PRINTER_NOTIFY_OPTIONS_TYPE _PRINTER_NOTIFY_OPTIONS_TYPE;
alias PRINTER_NOTIFY_OPTIONS_TYPE TPRINTERNOTIFYOPTIONSTYPE;
alias PRINTER_NOTIFY_OPTIONS_TYPE* PPRINTERNOTIFYOPTIONSTYPE;

struct PRINTER_NOTIFY_OPTIONS
{
	DWORD Version;
	DWORD Flags;
	DWORD Count;
	PPRINTER_NOTIFY_OPTIONS_TYPE pTypes;
}

alias PRINTER_NOTIFY_OPTIONS _PRINTER_NOTIFY_OPTIONS;
alias PRINTER_NOTIFY_OPTIONS TPRINTERNOTIFYOPTIONS;
alias PRINTER_NOTIFY_OPTIONS* PPRINTERNOTIFYOPTIONS;

struct PRINTPROCESSOR_INFO_1
{
	LPTSTR pName;
}

alias PRINTPROCESSOR_INFO_1 _PRINTPROCESSOR_INFO_1;
alias PRINTPROCESSOR_INFO_1 TPRINTPROCESSORINFO1;
alias PRINTPROCESSOR_INFO_1* PPRINTPROCESSORINFO1;

struct PRIVILEGE_SET
{
	DWORD PrivilegeCount;
	DWORD Control;
	LUID_AND_ATTRIBUTES[1 + ANYSIZE_ARRAY-1] Privilege;
}

alias PRIVILEGE_SET* LPPRIVILEGE_SET;
alias PRIVILEGE_SET* PPRIVILEGE_SET;
alias PRIVILEGE_SET _PRIVILEGE_SET;
alias PRIVILEGE_SET TPRIVILEGESET;
alias PRIVILEGE_SET* PPRIVILEGESET;

struct PROCESS_HEAPENTRY
{
	PVOID lpData;
	DWORD cbData;
	ubyte cbOverhead;
	ubyte iRegionIndex;
	ushort wFlags;
	DWORD dwCommittedSize;
	DWORD dwUnCommittedSize;
	LPVOID lpFirstBlock;
	LPVOID lpLastBlock;
	HANDLE hMem;
}

alias PROCESS_HEAPENTRY* LPPROCESS_HEAP_ENTRY;
alias PROCESS_HEAPENTRY _PROCESS_HEAP_ENTRY;
alias PROCESS_HEAPENTRY TPROCESSHEAPENTRY;
alias PROCESS_HEAPENTRY* PPROCESSHEAPENTRY;

struct PROCESS_INFORMATION
{
	HANDLE hProcess;
	HANDLE hThread;
	DWORD dwProcessId;
	DWORD dwThreadId;
}

alias PROCESS_INFORMATION* LPPROCESS_INFORMATION;
alias PROCESS_INFORMATION _PROCESS_INFORMATION;
alias PROCESS_INFORMATION TPROCESSINFORMATION;
alias PROCESS_INFORMATION* PPROCESSINFORMATION;
extern(Windows){alias UINT (*LPFNPSPCALLBACK)(HWND, UINT, LPVOID);}
alias LPFNPSPCALLBACK TFNPSPCALLBACK;

struct PROPSHEETPAGE_U1
{

	union
	{
		struct
		{
			LPCTSTR pszTemplate;
		}
		struct
		{
			LPCDLGTEMPLATE pResource;
		}
	}
}


struct PROPSHEETPAGE_U2
{

	union
	{
		struct
		{
			HICON hIcon;
		}
		struct
		{
			LPCTSTR pszIcon;
		}
	}
}


struct PROPSHEETPAGE
{
	DWORD dwSize;
	DWORD dwFlags;
	HINST hInstance;
	PROPSHEETPAGE_U1 u1;
	PROPSHEETPAGE_U2 u2;
	LPCTSTR pszTitle;
	DLGPROC pfnDlgProc;
	LPARAM lParam;
	LPFNPSPCALLBACK pfnCallback;
	UINT* pcRefParent;
}

alias PROPSHEETPAGE* LPPROPSHEETPAGE;
alias PROPSHEETPAGE* LPCPROPSHEETPAGE;
alias PROPSHEETPAGE _PROPSHEETPAGE;
alias PROPSHEETPAGE TPROPSHEETPAGE;
alias PROPSHEETPAGE* PPROPSHEETPAGE;

struct EMPTYRECORD
{
}

alias EMPTYRECORD* HPROPSHEETPAGE;

struct PROPSHEETHEADER_U1
{

	union
	{
		struct
		{
			HICON hIcon;
		}
		struct
		{
			LPCTSTR pszIcon;
		}
	}
}


struct PROPSHEETHEADER_U2
{

	union
	{
		struct
		{
			UINT nStartPage;
		}
		struct
		{
			LPCTSTR pStartPage;
		}
	}
}


struct PROPSHEETHEADER_U3
{

	union
	{
		struct
		{
			LPCPROPSHEETPAGE ppsp;
		}
		struct
		{
			HPROPSHEETPAGE* phpage;
		}
	}
}


struct PROPSHEETHEADER
{
	DWORD dwSize;
	DWORD dwFlags;
	HWND hwndParent;
	HINST hInstance;
	PROPSHEETHEADER_U1 u1;
	LPCTSTR pszCaption;
	UINT nPages;
	PROPSHEETHEADER_U2 u2;
	PROPSHEETHEADER_U3 u3;
	PFNPROPSHEETCALLBACK pfnCallback;
}

alias PROPSHEETHEADER* LPPROPSHEETHEADER;
alias PROPSHEETHEADER* LPCPROPSHEETHEADER;
alias PROPSHEETHEADER _PROPSHEETHEADER;
alias PROPSHEETHEADER TPROPSHEETHEADER;
alias PROPSHEETHEADER* PPROPSHEETHEADER;
extern(Windows){
alias WINBOOL (*LPFNADDPROPSHEETPAGE)(HPROPSHEETPAGE, LPARAM);
alias WINBOOL (*LPFNADDPROPSHEETPAGES)(LPVOID, LPFNADDPROPSHEETPAGE, LPARAM);
}
alias LPFNADDPROPSHEETPAGE TFNADDPROPSHEETPAGE;
alias LPFNADDPROPSHEETPAGES TFNADDPROPSHEETPAGES;

struct PROTOCOL_INFO
{
	DWORD dwServiceFlags;
	INT iAddressFamily;
	INT iMaxSockAddr;
	INT iMinSockAddr;
	INT iSocketType;
	INT iProtocol;
	DWORD dwMessageSize;
	LPTSTR lpProtocol;
}

alias PROTOCOL_INFO _PROTOCOL_INFO;
alias PROTOCOL_INFO TPROTOCOLINFO;
alias PROTOCOL_INFO* PPROTOCOLINFO;

struct PROVIDOR_INFO_1
{
	LPTSTR pName;
	LPTSTR pEnvironment;
	LPTSTR pDLLName;
}

alias PROVIDOR_INFO_1 _PROVIDOR_INFO_1;
alias PROVIDOR_INFO_1 TPROVIDORINFO1;
alias PROVIDOR_INFO_1* PPROVIDORINFO1;

struct PSHNOTIFY
{
	NMHDR hdr;
	LPARAM lParam;
}

alias PSHNOTIFY* LPPSHNOTIFY;
alias PSHNOTIFY _PSHNOTIFY;
alias PSHNOTIFY TPSHNOTIFY;
alias PSHNOTIFY* PPSHNOTIFY;

struct PUNCTUATION
{
	UINT iSize;
	LPSTR szPunctuation;
}

alias PUNCTUATION _PUNCTUATION;
alias PUNCTUATION TPUNCTUATION;
alias PUNCTUATION* PPUNCTUATION;

struct QUERY_SERVICE_CONFIG
{
	DWORD dwServiceType;
	DWORD dwStartType;
	DWORD dwErrorControl;
	LPTSTR lpBinaryPathName;
	LPTSTR lpLoadOrderGroup;
	DWORD dwTagId;
	LPTSTR lpDependencies;
	LPTSTR lpServiceStartName;
	LPTSTR lpDisplayName;
}

alias QUERY_SERVICE_CONFIG* LPQUERY_SERVICE_CONFIG;
alias QUERY_SERVICE_CONFIG _QUERY_SERVICE_CONFIG;
alias QUERY_SERVICE_CONFIG TQUERYSERVICECONFIG;
alias QUERY_SERVICE_CONFIG* PQUERYSERVICECONFIG;

struct QUERY_SERVICE_LOCK_STATUS
{
	DWORD fIsLocked;
	LPTSTR lpLockOwner;
	DWORD dwLockDuration;
}

alias QUERY_SERVICE_LOCK_STATUS* LPQUERY_SERVICE_LOCK_STATUS;
alias QUERY_SERVICE_LOCK_STATUS _QUERY_SERVICE_LOCK_STATUS;
alias QUERY_SERVICE_LOCK_STATUS TQUERYSERVICELOCKSTATUS;
alias QUERY_SERVICE_LOCK_STATUS* PQUERYSERVICELOCKSTATUS;

struct RASAMB
{
	DWORD dwSize;
	DWORD dwError;
	TCHAR[1 + NETBIOS_NAME_LEN+1-1] szNetBiosError;
	ubyte bLana;
}

alias RASAMB _RASAMB;
alias RASAMB TRASAMB;
alias RASAMB* PRASAMB;

struct RASCONN
{
	DWORD dwSize;
	HRASCONN hrasconn;
	TCHAR[1 + RAS_MaxEntryName+1-1] szEntryName;
	char[1 + RAS_MaxDeviceType+1-1] szDeviceType;
	char[1 + RAS_MaxDeviceName+1-1] szDeviceName;
}

alias RASCONN _RASCONN;
alias RASCONN TRASCONN;
alias RASCONN* PRASCONN;

struct RASCONNSTATUS
{
	DWORD dwSize;
	RASCONNSTATE rasconnstate;
	DWORD dwError;
	TCHAR[1 + RAS_MaxDeviceType+1-1] szDeviceType;
	TCHAR[1 + RAS_MaxDeviceName+1-1] szDeviceName;
}

alias RASCONNSTATUS _RASCONNSTATUS;
alias RASCONNSTATUS TRASCONNSTATUS;
alias RASCONNSTATUS* PRASCONNSTATUS;

struct RASDIALEXTENSIONS
{
	DWORD dwSize;
	DWORD dwfOptions;
	HWND hwndParent;
	DWORD reserved;
}

alias RASDIALEXTENSIONS _RASDIALEXTENSIONS;
alias RASDIALEXTENSIONS TRASDIALEXTENSIONS;
alias RASDIALEXTENSIONS* PRASDIALEXTENSIONS;

struct RASDIALPARAMS
{
	DWORD dwSize;
	TCHAR[1 + RAS_MaxEntryName+1-1] szEntryName;
	TCHAR[1 + RAS_MaxPhoneNumber+1-1] szPhoneNumber;
	TCHAR[1 + (RAS_MaxCallbackNumber+1)-1] szCallbackNumber;
	TCHAR[1 + (UNLEN+1)-1] szUserName;
	TCHAR[1 + (PWLEN+1)-1] szPassword;
	TCHAR[1 + (DNLEN+1)-1] szDomain;
}

alias RASDIALPARAMS _RASDIALPARAMS;
alias RASDIALPARAMS TRASDIALPARAMS;
alias RASDIALPARAMS* PRASDIALPARAMS;

struct RASENTRYNAME
{
	DWORD dwSize;
	TCHAR[1 + (RAS_MaxEntryName+1)-1] szEntryName;
}

alias RASENTRYNAME _RASENTRYNAME;
alias RASENTRYNAME TRASENTRYNAME;
alias RASENTRYNAME* PRASENTRYNAME;

struct RASPPPIP
{
	DWORD dwSize;
	DWORD dwError;
	TCHAR[1 + (RAS_MaxIpAddress+1)-1] szIpAddress;
}

alias RASPPPIP _RASPPPIP;
alias RASPPPIP TRASPPPIP;
alias RASPPPIP* PRASPPPIP;

struct RASPPPIPX
{
	DWORD dwSize;
	DWORD dwError;
	TCHAR[1 + (RAS_MaxIpxAddress+1)-1] szIpxAddress;
}

alias RASPPPIPX _RASPPPIPX;
alias RASPPPIPX TRASPPPIPX;
alias RASPPPIPX* PRASPPPIPX;

struct RASPPPNBF
{
	DWORD dwSize;
	DWORD dwError;
	DWORD dwNetBiosError;
	TCHAR[1 + (NETBIOS_NAME_LEN+1)-1] szNetBiosError;
	TCHAR[1 + (NETBIOS_NAME_LEN+1)-1] szWorkstationName;
	ubyte bLana;
}

alias RASPPPNBF _RASPPPNBF;
alias RASPPPNBF TRASPPPNBF;
alias RASPPPNBF* PRASPPPNBF;

struct RASTERIZER_STATUS
{
	int nSize;
	int wFlags;
	int nLanguageID;
}

alias RASTERIZER_STATUS* LPRASTERIZER_STATUS;
alias RASTERIZER_STATUS _RASTERIZER_STATUS;
alias RASTERIZER_STATUS TRASTERIZERSTATUS;
alias RASTERIZER_STATUS* PRASTERIZERSTATUS;

struct REASSIGN_BLOCKS
{
	ushort Reserved;
	ushort Count;
	DWORD[1 + 0] BlockNumber;
}

alias REASSIGN_BLOCKS _REASSIGN_BLOCKS;
alias REASSIGN_BLOCKS TREASSIGNBLOCKS;
alias REASSIGN_BLOCKS* PREASSIGNBLOCKS;

struct REMOTE_NAME_INFO
{
	LPTSTR lpUniversalName;
	LPTSTR lpConnectionName;
	LPTSTR lpRemainingPath;
}

alias REMOTE_NAME_INFO _REMOTE_NAME_INFO;
alias REMOTE_NAME_INFO TREMOTENAMEINFO;
alias REMOTE_NAME_INFO* PREMOTENAMEINFO;

struct REPASTESPECIAL
{
	DWORD dwAspect;
	DWORD dwParam;
}

alias REPASTESPECIAL _REPASTESPECIAL;
alias REPASTESPECIAL TREPASTESPECIAL;
alias REPASTESPECIAL* PREPASTESPECIAL;

struct REQRESIZE
{
	NMHDR nmhdr;
	RECT rc;
}

alias REQRESIZE _REQRESIZE;
alias REQRESIZE TREQRESIZE;
alias REQRESIZE* PREQRESIZE;

struct RGNDATAHEADER
{
	DWORD dwSize;
	DWORD iType;
	DWORD nCount;
	DWORD nRgnSize;
	RECT rcBound;
}

alias RGNDATAHEADER _RGNDATAHEADER;
alias RGNDATAHEADER TRGNDATAHEADER;
alias RGNDATAHEADER* PRGNDATAHEADER;

struct RGNDATA
{
	RGNDATAHEADER rdh;
	char[1 + 0] Buffer;
}

alias RGNDATA* LPRGNDATA;
alias RGNDATA _RGNDATA;
alias RGNDATA TRGNDATA;
alias RGNDATA* PRGNDATA;

struct SCROLLINFO
{
	UINT cbSize;
	UINT fMask;
	int nMin;
	int nMax;
	UINT nPage;
	int nPos;
	int nTrackPos;
}

alias SCROLLINFO* LPSCROLLINFO;
alias SCROLLINFO* LPCSCROLLINFO;
alias SCROLLINFO TAGSCROLLINFO;
alias SCROLLINFO TSCROLLINFO;
alias SCROLLINFO* PSCROLLINFO;

struct SECURITY_ATTRIBUTES
{
	DWORD nLength;
	LPVOID lpSecurityDescriptor;
	WINBOOL bInheritHandle;
}

alias SECURITY_ATTRIBUTES* LPSECURITY_ATTRIBUTES;
alias SECURITY_ATTRIBUTES _SECURITY_ATTRIBUTES;
alias SECURITY_ATTRIBUTES TSECURITYATTRIBUTES;
alias SECURITY_ATTRIBUTES* PSECURITYATTRIBUTES;
alias DWORD SECURITY_INFORMATION;
alias SECURITY_INFORMATION* PSECURITY_INFORMATION;
alias SECURITY_INFORMATION TSECURITYINFORMATION;
alias SECURITY_INFORMATION* PSECURITYINFORMATION;

struct SELCHANGE
{
	NMHDR nmhdr;
	CHARRANGE chrg;
	ushort seltyp;
}

alias SELCHANGE _SELCHANGE;
alias SELCHANGE TSELCHANGE;
alias SELCHANGE* PSELCHANGE;

struct SERIALKEYS
{
	DWORD cbSize;
	DWORD dwFlags;
	LPSTR lpszActivePort;
	LPSTR lpszPort;
	DWORD iBaudRate;
	DWORD iPortState;
}

alias SERIALKEYS* LPSERIALKEYS;
alias SERIALKEYS TAGSERIALKEYS;
alias SERIALKEYS TSERIALKEYS;
alias SERIALKEYS* PSERIALKEYS;

struct SERVICE_TABLE_ENTRY
{
	LPTSTR lpServiceName;
	LPSERVICE_MAIN_FUNCTION lpServiceProc;
}

alias SERVICE_TABLE_ENTRY* LPSERVICE_TABLE_ENTRY;
alias SERVICE_TABLE_ENTRY _SERVICE_TABLE_ENTRY;
alias SERVICE_TABLE_ENTRY TSERVICETABLEENTRY;
alias SERVICE_TABLE_ENTRY* PSERVICETABLEENTRY;

struct SERVICE_TYPE_VALUE_ABS
{
	DWORD dwNameSpace;
	DWORD dwValueType;
	DWORD dwValueSize;
	LPTSTR lpValueName;
	PVOID lpValue;
}

alias SERVICE_TYPE_VALUE_ABS _SERVICE_TYPE_VALUE_ABS;
alias SERVICE_TYPE_VALUE_ABS TSERVICETYPEVALUEABS;
alias SERVICE_TYPE_VALUE_ABS* PSERVICETYPEVALUEABS;

struct SERVICE_TYPE_INFO_ABS
{
	LPTSTR lpTypeName;
	DWORD dwValueCount;
	SERVICE_TYPE_VALUE_ABS[1 + 0] Values;
}

alias SERVICE_TYPE_INFO_ABS _SERVICE_TYPE_INFO_ABS;
alias SERVICE_TYPE_INFO_ABS TSERVICETYPEINFOABS;
alias SERVICE_TYPE_INFO_ABS* PSERVICETYPEINFOABS;

struct SESSION_BUFFER
{
	UCHAR lsn;
	UCHAR state;
	UCHAR[1 + NCBNAMSZ-1] local_name;
	UCHAR[1 + NCBNAMSZ-1] remote_name;
	UCHAR rcvs_outstanding;
	UCHAR sends_outstanding;
}

alias SESSION_BUFFER _SESSION_BUFFER;
alias SESSION_BUFFER TSESSIONBUFFER;
alias SESSION_BUFFER* PSESSIONBUFFER;

struct SESSION_HEADER
{
	UCHAR sess_name;
	UCHAR num_sess;
	UCHAR rcv_dg_outstanding;
	UCHAR rcv_any_outstanding;
}

alias SESSION_HEADER _SESSION_HEADER;
alias SESSION_HEADER TSESSIONHEADER;
alias SESSION_HEADER* PSESSIONHEADER;

struct SET_PARTITION_INFORMATION
{
	ubyte PartitionType;
}

alias SET_PARTITION_INFORMATION _SET_PARTITION_INFORMATION;
alias SET_PARTITION_INFORMATION TSETPARTITIONINFORMATION;
alias SET_PARTITION_INFORMATION* PSETPARTITIONINFORMATION;
alias int SHCONTF;
enum { SHCONTF_FOLDERS = 32, SHCONTF_NONFOLDERS = 64, SHCONTF_INCLUDEHIDDEN = 128,  };
alias SHCONTF TAGSHCONTF;
alias SHCONTF TSHCONTF;

struct SHFILEINFO
{
	HICON hIcon;
	int iIcon;
	DWORD dwAttributes;
	char[1 + MAX_PATH-1] szDisplayName;
	char[1 + 79] szTypeName;
}

alias SHFILEINFO _SHFILEINFO;
alias SHFILEINFO TSHFILEINFO;
alias SHFILEINFO* PSHFILEINFO;
alias ushort FILEOP_FLAGS;
alias FILEOP_FLAGS TFILEOPFLAGS;
alias FILEOP_FLAGS* PFILEOPFLAGS;

struct SHFILEOPSTRUCT
{
	HWND hwnd;
	UINT wFunc;
	LPCSTR pFrom;
	LPCSTR pTo;
	FILEOP_FLAGS fFlags;
	WINBOOL fAnyOperationsAborted;
	LPVOID hNameMappings;
	LPCSTR lpszProgressTitle;
}

alias SHFILEOPSTRUCT* LPSHFILEOPSTRUCT;
alias SHFILEOPSTRUCT _SHFILEOPSTRUCT;
alias SHFILEOPSTRUCT TSHFILEOPSTRUCT;
alias SHFILEOPSTRUCT* PSHFILEOPSTRUCT;
alias int SHGNO;
enum { SHGDN_NORMAL = 0, SHGDN_INFOLDER = 1, SHGDN_FORPARSING = 0x8000,  };
alias SHGNO TAGSHGDN;
alias SHGNO TSHGDN;

struct SHNAMEMAPPING
{
	LPSTR pszOldPath;
	LPSTR pszNewPath;
	int cchOldPath;
	int cchNewPath;
}

alias SHNAMEMAPPING* LPSHNAMEMAPPING;
alias SHNAMEMAPPING _SHNAMEMAPPING;
alias SHNAMEMAPPING TSHNAMEMAPPING;
alias SHNAMEMAPPING* PSHNAMEMAPPING;

struct SID_AND_ATTRIBUTES
{
	PSID Sid;
	DWORD Attributes;
}

alias SID_AND_ATTRIBUTES _SID_AND_ATTRIBUTES;
alias SID_AND_ATTRIBUTES TSIDANDATTRIBUTES;
alias SID_AND_ATTRIBUTES* PSIDANDATTRIBUTES;
alias SID_AND_ATTRIBUTES[1 + ANYSIZE_ARRAY-1] SID_AND_ATTRIBUTES_ARRAY;
alias SID_AND_ATTRIBUTES_ARRAY* PSID_AND_ATTRIBUTES_ARRAY;
alias SID_AND_ATTRIBUTES_ARRAY TSIDANDATTRIBUTESARRAY;
alias SID_AND_ATTRIBUTES_ARRAY* PSIDANDATTRIBUTESARRAY;

struct SINGLE_LIST_ENTRY
{
	_SINGLE_LIST_ENTRY* Next;
}

alias SINGLE_LIST_ENTRY _SINGLE_LIST_ENTRY;
alias SINGLE_LIST_ENTRY TSINGLELISTENTRY;
alias SINGLE_LIST_ENTRY* PSINGLELISTENTRY;

struct SOUNDSENTRY
{
	UINT cbSize;
	DWORD dwFlags;
	DWORD iFSTextEffect;
	DWORD iFSTextEffectMSec;
	DWORD iFSTextEffectColorBits;
	DWORD iFSGrafEffect;
	DWORD iFSGrafEffectMSec;
	DWORD iFSGrafEffectColor;
	DWORD iWindowsEffect;
	DWORD iWindowsEffectMSec;
	LPTSTR lpszWindowsEffectDLL;
	DWORD iWindowsEffectOrdinal;
}

alias SOUNDSENTRY* LPSOUNDSENTRY;
alias SOUNDSENTRY TAGSOUNDSENTRY;
alias SOUNDSENTRY TSOUNDSENTRY;
alias SOUNDSENTRY* PSOUNDSENTRY;

struct STARTUPINFO
{
	DWORD cb;
	LPTSTR lpReserved;
	LPTSTR lpDesktop;
	LPTSTR lpTitle;
	DWORD dwX;
	DWORD dwY;
	DWORD dwXSize;
	DWORD dwYSize;
	DWORD dwXCountChars;
	DWORD dwYCountChars;
	DWORD dwFillAttribute;
	DWORD dwFlags;
	ushort wShowWindow;
	ushort cbReserved2;
	LPBYTE lpReserved2;
	HANDLE hStdInput;
	HANDLE hStdOutput;
	HANDLE hStdError;
}

alias STARTUPINFO* LPSTARTUPINFO;
alias STARTUPINFO _STARTUPINFO;
alias STARTUPINFO TSTARTUPINFO;
alias STARTUPINFO* PSTARTUPINFO;

struct STICKYKEYS
{
	DWORD cbSize;
	DWORD dwFlags;
}

alias STICKYKEYS* LPSTICKYKEYS;
alias STICKYKEYS TAGSTICKYKEYS;
alias STICKYKEYS TSTICKYKEYS;
alias STICKYKEYS* PSTICKYKEYS;

struct STRRET
{
	UINT uType;

	union
	{
		struct
		{
			LPWSTR pOleStr;
		}
		struct
		{
			UINT uOffset;
		}
		struct
		{
			char[1 + MAX_PATH-1] cStr;
		}
	}
}

alias STRRET* LPSTRRET;
alias STRRET _STRRET;
alias STRRET TSTRRET;
alias STRRET* PSTRRET;

struct STYLEBUF
{
	DWORD dwStyle;
	char[1 + 31] szDescription;
}

alias STYLEBUF* LPSTYLEBUF;
alias STYLEBUF _TAGSTYLEBUF;
alias STYLEBUF TSTYLEBUF;
alias STYLEBUF* PSTYLEBUF;

struct STYLESTRUCT
{
	DWORD styleOld;
	DWORD styleNew;
}

alias STYLESTRUCT* LPSTYLESTRUCT;
alias STYLESTRUCT TAGSTYLESTRUCT;
alias STYLESTRUCT TSTYLESTRUCT;
alias STYLESTRUCT* PSTYLESTRUCT;

struct SYSTEM_AUDIT_ACE
{
	ACE_HEADER Header;
	ACCESS_MASK Mask;
	DWORD SidStart;
}

alias SYSTEM_AUDIT_ACE _SYSTEM_AUDIT_ACE;
alias SYSTEM_AUDIT_ACE TSYSTEMAUDITACE;
alias SYSTEM_AUDIT_ACE* PSYSTEMAUDITACE;

struct SYSTEM_INFO_U
{

	union
	{
		struct
		{
			DWORD dwOemId;
		}
		struct
		{
			ushort wProcessorArchitecture;
			ushort wReserved;
		}
	}
}


struct SYSTEM_INFO
{
	SYSTEM_INFO_U u;
	DWORD dwPageSize;
	LPVOID lpMinimumApplicationAddress;
	LPVOID lpMaximumApplicationAddress;
	DWORD dwActiveProcessorMask;
	DWORD dwNumberOfProcessors;
	DWORD dwProcessorType;
	DWORD dwAllocationGranularity;
	ushort wProcessorLevel;
	ushort wProcessorRevision;
}

alias SYSTEM_INFO* LPSYSTEM_INFO;
alias SYSTEM_INFO _SYSTEM_INFO;
alias SYSTEM_INFO TSYSTEMINFO;
alias SYSTEM_INFO* PSYSTEMINFO;

struct SYSTEM_POWER_STATUS
{
	ubyte ACLineStatus;
	ubyte BatteryFlag;
	ubyte BatteryLifePercent;
	ubyte Reserved1;
	DWORD BatteryLifeTime;
	DWORD BatteryFullLifeTime;
}

alias SYSTEM_POWER_STATUS _SYSTEM_POWER_STATUS;
alias SYSTEM_POWER_STATUS TSYSTEMPOWERSTATUS;
alias SYSTEM_POWER_STATUS* PSYSTEMPOWERSTATUS;
alias EMPTYRECORD* LPSYSTEM_POWER_STATUS;

struct TAPE_ERASE
{
	ULONG _Type;
}

alias TAPE_ERASE _TAPE_ERASE;
alias TAPE_ERASE TTAPEERASE;
alias TAPE_ERASE* PTAPEERASE;

struct TAPE_GET_DRIVE_PARAMETERS
{
	ubyte ECC;
	ubyte Compression;
	ubyte DataPadding;
	ubyte ReportSetmarks;
	ULONG DefaultBlockSize;
	ULONG MaximumBlockSize;
	ULONG MinimumBlockSize;
	ULONG MaximumPartitionCount;
	ULONG FeaturesLow;
	ULONG FeaturesHigh;
	ULONG EOTWarningZoneSize;
}

alias TAPE_GET_DRIVE_PARAMETERS _TAPE_GET_DRIVE_PARAMETERS;
alias TAPE_GET_DRIVE_PARAMETERS TTAPEGETDRIVEPARAMETERS;
alias TAPE_GET_DRIVE_PARAMETERS* PTAPEGETDRIVEPARAMETERS;

struct TAPE_GET_MEDIA_PARAMETERS
{
	LARGE_INTEGER Capacity;
	LARGE_INTEGER Remaining;
	DWORD BlockSize;
	DWORD PartitionCount;
	ubyte WriteProtected;
}

alias TAPE_GET_MEDIA_PARAMETERS _TAPE_GET_MEDIA_PARAMETERS;
alias TAPE_GET_MEDIA_PARAMETERS TTAPEGETMEDIAPARAMETERS;
alias TAPE_GET_MEDIA_PARAMETERS* PTAPEGETMEDIAPARAMETERS;

struct TAPE_GET_POSITION
{
	ULONG _Type;
	ULONG Partition;
	ULONG OffsetLow;
	ULONG OffsetHigh;
}

alias TAPE_GET_POSITION _TAPE_GET_POSITION;
alias TAPE_GET_POSITION TTAPEGETPOSITION;
alias TAPE_GET_POSITION* PTAPEGETPOSITION;

struct TAPE_PREPARE
{
	ULONG Operation;
}

alias TAPE_PREPARE _TAPE_PREPARE;
alias TAPE_PREPARE TTAPEPREPARE;
alias TAPE_PREPARE* PTAPEPREPARE;

struct TAPE_SET_DRIVE_PARAMETERS
{
	ubyte ECC;
	ubyte Compression;
	ubyte DataPadding;
	ubyte ReportSetmarks;
	ULONG EOTWarningZoneSize;
}

alias TAPE_SET_DRIVE_PARAMETERS _TAPE_SET_DRIVE_PARAMETERS;
alias TAPE_SET_DRIVE_PARAMETERS TTAPESETDRIVEPARAMETERS;
alias TAPE_SET_DRIVE_PARAMETERS* PTAPESETDRIVEPARAMETERS;

struct TAPE_SET_MEDIA_PARAMETERS
{
	ULONG BlockSize;
}

alias TAPE_SET_MEDIA_PARAMETERS _TAPE_SET_MEDIA_PARAMETERS;
alias TAPE_SET_MEDIA_PARAMETERS TTAPESETMEDIAPARAMETERS;
alias TAPE_SET_MEDIA_PARAMETERS* PTAPESETMEDIAPARAMETERS;

struct TAPE_SET_POSITION
{
	ULONG Method;
	ULONG Partition;
	ULONG OffsetLow;
	ULONG OffsetHigh;
}

alias TAPE_SET_POSITION _TAPE_SET_POSITION;
alias TAPE_SET_POSITION TTAPESETPOSITION;
alias TAPE_SET_POSITION* PTAPESETPOSITION;

struct TAPE_WRITE_MARKS
{
	ULONG _Type;
	ULONG Count;
}

alias TAPE_WRITE_MARKS _TAPE_WRITE_MARKS;
alias TAPE_WRITE_MARKS TTAPEWRITEMARKS;
alias TAPE_WRITE_MARKS* PTAPEWRITEMARKS;

struct TBADDBITMAP
{
	HINST hInst;
	UINT nID;
}

alias TBADDBITMAP* LPTBADDBITMAP;
alias TBADDBITMAP TTBADDBITMAP;
alias TBADDBITMAP* PTBADDBITMAP;

struct TBBUTTON
{
	int iBitmap;
	int idCommand;
	ubyte fsState;
	ubyte fsStyle;
	DWORD dwData;
	int iString;
}

alias TBBUTTON* LPTBBUTTON;
alias TBBUTTON* LPCTBBUTTON;
alias TBBUTTON _TBBUTTON;
alias TBBUTTON TTBBUTTON;
alias TBBUTTON* PTBBUTTON;

struct TBNOTIFY
{
	NMHDR hdr;
	int iItem;
	TBBUTTON tbButton;
	int cchText;
	LPTSTR pszText;
}

alias TBNOTIFY* LPTBNOTIFY;
alias TBNOTIFY TTBNOTIFY;
alias TBNOTIFY* PTBNOTIFY;

struct TBSAVEPARAMS
{
	HKEY hkr;
	LPCTSTR pszSubKey;
	LPCTSTR pszValueName;
}

alias TBSAVEPARAMS TTBSAVEPARAMS;
alias TBSAVEPARAMS* PTBSAVEPARAMS;

struct TC_HITTESTINFO
{
	POINT pt;
	UINT flags;
}

alias TC_HITTESTINFO _TC_HITTESTINFO;
alias TC_HITTESTINFO TTCHITTESTINFO;
alias TC_HITTESTINFO* PTCHITTESTINFO;

struct TC_ITEM
{
	UINT mask;
	UINT lpReserved1;
	UINT lpReserved2;
	LPTSTR pszText;
	int cchTextMax;
	int iImage;
	LPARAM lParam;
}

alias TC_ITEM _TC_ITEM;
alias TC_ITEM TTCITEM;
alias TC_ITEM* PTCITEM;

struct TC_ITEMHEADER
{
	UINT mask;
	UINT lpReserved1;
	UINT lpReserved2;
	LPTSTR pszText;
	int cchTextMax;
	int iImage;
}

alias TC_ITEMHEADER _TC_ITEMHEADER;
alias TC_ITEMHEADER TTCITEMHEADER;
alias TC_ITEMHEADER* PTCITEMHEADER;

struct TC_KEYDOWN
{
	NMHDR hdr;
	ushort wVKey;
	UINT flags;
}

alias TC_KEYDOWN _TC_KEYDOWN;
alias TC_KEYDOWN TTCKEYDOWN;
alias TC_KEYDOWN* PTCKEYDOWN;

struct TEXTRANGE
{
	CHARRANGE chrg;
	LPSTR lpstrText;
}

alias TEXTRANGE _TEXTRANGE;
alias TEXTRANGE TTEXTRANGE;
alias TEXTRANGE* PTEXTRANGE;

struct TIME_ZONE_INFORMATION
{
	LONG Bias;
	WCHAR[1 + 31] StandardName;
	SYSTEMTIME StandardDate;
	LONG StandardBias;
	WCHAR[1 + 31] DaylightName;
	SYSTEMTIME DaylightDate;
	LONG DaylightBias;
}

alias TIME_ZONE_INFORMATION* LPTIME_ZONE_INFORMATION;
alias TIME_ZONE_INFORMATION _TIME_ZONE_INFORMATION;
alias TIME_ZONE_INFORMATION TTIMEZONEINFORMATION;
alias TIME_ZONE_INFORMATION* PTIMEZONEINFORMATION;

struct TOGGLEKEYS
{
	DWORD cbSize;
	DWORD dwFlags;
}

alias TOGGLEKEYS TAGTOGGLEKEYS;
alias TOGGLEKEYS TTOGGLEKEYS;
alias TOGGLEKEYS* PTOGGLEKEYS;

struct TOKEN_SOURCE
{
	char[1 + 7] SourceName;
	LUID SourceIdentifier;
}

alias TOKEN_SOURCE _TOKEN_SOURCE;
alias TOKEN_SOURCE TTOKENSOURCE;
alias TOKEN_SOURCE* PTOKENSOURCE;

struct TOKEN_CONTROL
{
	LUID TokenId;
	LUID AuthenticationId;
	LUID ModifiedId;
	TOKEN_SOURCE TokenSource;
}

alias TOKEN_CONTROL _TOKEN_CONTROL;
alias TOKEN_CONTROL TTOKENCONTROL;
alias TOKEN_CONTROL* PTOKENCONTROL;

struct TOKEN_DEFAULT_DACL
{
	PACL DefaultDacl;
}

alias TOKEN_DEFAULT_DACL _TOKEN_DEFAULT_DACL;
alias TOKEN_DEFAULT_DACL TTOKENDEFAULTDACL;
alias TOKEN_DEFAULT_DACL* PTOKENDEFAULTDACL;

struct TOKEN_GROUPS
{
	DWORD GroupCount;
	SID_AND_ATTRIBUTES[1 + ANYSIZE_ARRAY-1] Groups;
}

alias TOKEN_GROUPS* PTOKEN_GROUPS;
alias TOKEN_GROUPS* LPTOKEN_GROUPS;
alias TOKEN_GROUPS _TOKEN_GROUPS;
alias TOKEN_GROUPS TTOKENGROUPS;
alias TOKEN_GROUPS* PTOKENGROUPS;

struct TOKEN_OWNER
{
	PSID Owner;
}

alias TOKEN_OWNER _TOKEN_OWNER;
alias TOKEN_OWNER TTOKENOWNER;
alias TOKEN_OWNER* PTOKENOWNER;

struct TOKEN_PRIMARY_GROUP
{
	PSID PrimaryGroup;
}

alias TOKEN_PRIMARY_GROUP _TOKEN_PRIMARY_GROUP;
alias TOKEN_PRIMARY_GROUP TTOKENPRIMARYGROUP;
alias TOKEN_PRIMARY_GROUP* PTOKENPRIMARYGROUP;

struct TOKEN_PRIVILEGES
{
	DWORD PrivilegeCount;
	LUID_AND_ATTRIBUTES[1 + ANYSIZE_ARRAY-1] Privileges;
}

alias TOKEN_PRIVILEGES* PTOKEN_PRIVILEGES;
alias TOKEN_PRIVILEGES* LPTOKEN_PRIVILEGES;
alias TOKEN_PRIVILEGES _TOKEN_PRIVILEGES;
alias TOKEN_PRIVILEGES TTOKENPRIVILEGES;
alias TOKEN_PRIVILEGES* PTOKENPRIVILEGES;

struct TOKEN_STATISTICS
{
	LUID TokenId;
	LUID AuthenticationId;
	LARGE_INTEGER ExpirationTime;
	TOKEN_TYPE TokenType;
	SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
	DWORD DynamicCharged;
	DWORD DynamicAvailable;
	DWORD GroupCount;
	DWORD PrivilegeCount;
	LUID ModifiedId;
}

alias TOKEN_STATISTICS _TOKEN_STATISTICS;
alias TOKEN_STATISTICS TTOKENSTATISTICS;
alias TOKEN_STATISTICS* PTOKENSTATISTICS;

struct TOKEN_USER
{
	SID_AND_ATTRIBUTES User;
}

alias TOKEN_USER _TOKEN_USER;
alias TOKEN_USER TTOKENUSER;
alias TOKEN_USER* PTOKENUSER;

struct TOOLINFO
{
	UINT cbSize;
	UINT uFlags;
	HWND hwnd;
	UINT uId;
	RECT rect;
	HINST hinst;
	LPTSTR lpszText;
}

alias TOOLINFO* LPTOOLINFO;
alias TOOLINFO TTOOLINFO;
alias TOOLINFO* PTOOLINFO;

struct TOOLTIPTEXT
{
	NMHDR hdr;
	LPTSTR lpszText;
	char[1 + 79] szText;
	HINST hinst;
	UINT uFlags;
}

alias TOOLTIPTEXT* LPTOOLTIPTEXT;
alias TOOLTIPTEXT TTOOLTIPTEXT;
alias TOOLTIPTEXT* PTOOLTIPTEXT;

struct TPMPARAMS
{
	UINT cbSize;
	RECT rcExclude;
}

alias TPMPARAMS* LPTPMPARAMS;
alias TPMPARAMS TAGTPMPARAMS;
alias TPMPARAMS TTPMPARAMS;
alias TPMPARAMS* PTPMPARAMS;

struct TRANSMIT_FILE_BUFFERS
{
	PVOID Head;
	DWORD HeadLength;
	PVOID Tail;
	DWORD TailLength;
}

alias TRANSMIT_FILE_BUFFERS _TRANSMIT_FILE_BUFFERS;
alias TRANSMIT_FILE_BUFFERS TTRANSMITFILEBUFFERS;
alias TRANSMIT_FILE_BUFFERS* PTRANSMITFILEBUFFERS;

struct TTHITTESTINFO
{
	HWND hwnd;
	POINT pt;
	TOOLINFO ti;
}

alias TTHITTESTINFO* LPHITTESTINFO;
alias TTHITTESTINFO _TT_HITTESTINFO;
alias TTHITTESTINFO TTTHITTESTINFO;
alias TTHITTESTINFO* PTTHITTESTINFO;

struct TTPOLYCURVE
{
	ushort wType;
	ushort cpfx;
	POINTFX[1 + 0] apfx;
}

alias TTPOLYCURVE* LPTTPOLYCURVE;
alias TTPOLYCURVE TAGTTPOLYCURVE;
alias TTPOLYCURVE TTTPOLYCURVE;
alias TTPOLYCURVE* PTTPOLYCURVE;

struct TTPOLYGONHEADER
{
	DWORD cb;
	DWORD dwType;
	POINTFX pfxStart;
}

alias TTPOLYGONHEADER* LPTTPOLYGONHEADER;
alias TTPOLYGONHEADER _TTPOLYGONHEADER;
alias TTPOLYGONHEADER TTTPOLYGONHEADER;
alias TTPOLYGONHEADER* PTTPOLYGONHEADER;

struct TV_DISPINFO
{
	NMHDR hdr;
	TV_ITEM item;
}

alias TV_DISPINFO _TV_DISPINFO;
alias TV_DISPINFO TTVDISPINFO;
alias TV_DISPINFO* PTVDISPINFO;

struct TV_HITTESTINFO
{
	POINT pt;
	UINT flags;
	HTREEITEM hItem;
}

alias TV_HITTESTINFO* LPTV_HITTESTINFO;
alias TV_HITTESTINFO _TVHITTESTINFO;
alias TV_HITTESTINFO TTVHITTESTINFO;
alias TV_HITTESTINFO* PTVHITTESTINFO;

struct TV_INSERTSTRUCT
{
	HTREEITEM hParent;
	HTREEITEM hInsertAfter;
	TV_ITEM item;
}

alias TV_INSERTSTRUCT* LPTV_INSERTSTRUCT;
alias TV_INSERTSTRUCT _TV_INSERTSTRUCT;
alias TV_INSERTSTRUCT TTVINSERTSTRUCT;
alias TV_INSERTSTRUCT* PTVINSERTSTRUCT;

struct TV_KEYDOWN
{
	NMHDR hdr;
	ushort wVKey;
	UINT flags;
}

alias TV_KEYDOWN _TV_KEYDOWN;
alias TV_KEYDOWN TTVKEYDOWN;
alias TV_KEYDOWN* PTVKEYDOWN;

struct TV_SORTCB
{
	HTREEITEM hParent;
	PFNTVCOMPARE lpfnCompare;
	LPARAM lParam;
}

alias TV_SORTCB* LPTV_SORTCB;
alias TV_SORTCB _TV_SORTCB;
alias TV_SORTCB TTVSORTCB;
alias TV_SORTCB* PTVSORTCB;

struct UDACCEL
{
	UINT nSec;
	UINT nInc;
}

alias UDACCEL TUDACCEL;
alias UDACCEL* PUDACCEL;

struct ULARGE_INTEGER
{
	DWORD LowPart;
	DWORD HighPart;
}

alias ULARGE_INTEGER* PULARGE_INTEGER;
alias ULARGE_INTEGER _ULARGE_INTEGER;
alias ULARGE_INTEGER TULARGEINTEGER;
alias ULARGE_INTEGER* PULARGEINTEGER;

struct UNIVERSAL_NAME_INFO
{
	LPTSTR lpUniversalName;
}

alias UNIVERSAL_NAME_INFO _UNIVERSAL_NAME_INFO;
alias UNIVERSAL_NAME_INFO TUNIVERSALNAMEINFO;
alias UNIVERSAL_NAME_INFO* PUNIVERSALNAMEINFO;

struct USEROBJECTFLAGS
{
	WINBOOL fInherit;
	WINBOOL fReserved;
	DWORD dwFlags;
}

alias USEROBJECTFLAGS TAGUSEROBJECTFLAGS;
alias USEROBJECTFLAGS TUSEROBJECTFLAGS;
alias USEROBJECTFLAGS* PUSEROBJECTFLAGS;

struct VALENT
{
	LPTSTR ve_valuename;
	DWORD ve_valuelen;
	DWORD ve_valueptr;
	DWORD ve_type;
}

alias VALENT TVALENT;
alias VALENT* PVALENT;
alias VALENT VALUE_ENT;
alias VALENT TVALUE_ENT;
alias VALENT* PVALUE_ENT;

struct VERIFY_INFORMATION
{
	LARGE_INTEGER StartingOffset;
	DWORD Length;
}

alias VERIFY_INFORMATION _VERIFY_INFORMATION;
alias VERIFY_INFORMATION TVERIFYINFORMATION;
alias VERIFY_INFORMATION* PVERIFYINFORMATION;

struct VS_FIXEDFILEINFO
{
	DWORD dwSignature;
	DWORD dwStrucVersion;
	DWORD dwFileVersionMS;
	DWORD dwFileVersionLS;
	DWORD dwProductVersionMS;
	DWORD dwProductVersionLS;
	DWORD dwFileFlagsMask;
	DWORD dwFileFlags;
	DWORD dwFileOS;
	DWORD dwFileType;
	DWORD dwFileSubtype;
	DWORD dwFileDateMS;
	DWORD dwFileDateLS;
}

alias VS_FIXEDFILEINFO _VS_FIXEDFILEINFO;
alias VS_FIXEDFILEINFO TVSFIXEDFILEINFO;
alias VS_FIXEDFILEINFO* PVSFIXEDFILEINFO;

struct WIN32_FIND_DATA
{
	DWORD dwFileAttributes;
	FILETIME ftCreationTime;
	FILETIME ftLastAccessTime;
	FILETIME ftLastWriteTime;
	DWORD nFileSizeHigh;
	DWORD nFileSizeLow;
	DWORD dwReserved0;
	DWORD dwReserved1;
	TCHAR[1 + MAX_PATH-1] cFileName;
	TCHAR[1 + 13] cAlternateFileName;
}

alias WIN32_FIND_DATA* LPWIN32_FIND_DATA;
alias WIN32_FIND_DATA* PWIN32_FIND_DATA;
alias WIN32_FIND_DATA _WIN32_FIND_DATA;
alias WIN32_FIND_DATA TWIN32FINDDATA;
alias WIN32_FIND_DATA TWIN32FINDDATAA;
alias WIN32_FIND_DATA* PWIN32FINDDATA;

struct WIN32_FIND_DATAW {
    DWORD dwFileAttributes;
    FILETIME ftCreationTime;
    FILETIME ftLastAccessTime;
    FILETIME ftLastWriteTime;
    DWORD nFileSizeHigh;
    DWORD nFileSizeLow;
    DWORD dwReserved0;
    DWORD dwReserved1;
    WCHAR  cFileName[MAX_PATH];
    WCHAR  cAlternateFileName[14];
}

alias WIN32_FIND_DATAW* LPWIN32_FIND_DATAW;
alias WIN32_FIND_DATAW* PWIN32_FIND_DATAW;

struct WIN32_FILE_ATTRIBUTE_DATA {
  DWORD dwFileAttributes;
  FILETIME ftCreationTime;
  FILETIME ftLastAccessTime;
  FILETIME ftLastWriteTime;
  DWORD nFileSizeHigh;
  DWORD nFileSizeLow;
}

enum {
    GetFileInfoLevelStandard,
    GetFileInfoLevelMax
}

struct WIN32_STREAM_ID
{
	DWORD dwStreamId;
	DWORD dwStreamAttributes;
	LARGE_INTEGER Size;
	DWORD dwStreamNameSize;
	WCHAR* cStreamName;
}

alias WIN32_STREAM_ID _WIN32_STREAM_ID;
alias WIN32_STREAM_ID TWIN32STREAMID;
alias WIN32_STREAM_ID* PWIN32STREAMID;

struct WINDOWPLACEMENT
{
	UINT length;
	UINT flags;
	UINT showCmd;
	POINT ptMinPosition;
	POINT ptMaxPosition;
	RECT rcNormalPosition;
}

alias WINDOWPLACEMENT _WINDOWPLACEMENT;
alias WINDOWPLACEMENT TWINDOWPLACEMENT;
alias WINDOWPLACEMENT* PWINDOWPLACEMENT;

struct WNDCLASS
{
	UINT style;
	WNDPROC lpfnWndProc;
	int cbClsExtra;
	int cbWndExtra;
	HANDLE hInstance;
	HICON hIcon;
	HCURSOR hCursor;
	HBRUSH hbrBackground;
	LPCTSTR lpszMenuName;
	LPCTSTR lpszClassName;
}

alias WNDCLASS* LPWNDCLASS;
alias WNDCLASS _WNDCLASS;
alias WNDCLASS TWNDCLASS;
alias WNDCLASS TWNDCLASSA;
alias WNDCLASS* PWNDCLASS;

struct WNDCLASSEX
{
	UINT cbSize;
	UINT style;
	WNDPROC lpfnWndProc;
	int cbClsExtra;
	int cbWndExtra;
	HANDLE hInstance;
	HICON hIcon;
	HCURSOR hCursor;
	HBRUSH hbrBackground;
	LPCTSTR lpszMenuName;
	LPCTSTR lpszClassName;
	HANDLE hIconSm;
}

alias WNDCLASSEX* LPWNDCLASSEX;
alias WNDCLASSEX _WNDCLASSEX;
alias WNDCLASSEX TWNDCLASSEX;
alias WNDCLASSEX TWNDCLASSEXA;
alias WNDCLASSEX* PWNDCLASSEX;

struct CONNECTDLGSTRUCT
{
	DWORD cbStructure;
	HWND hwndOwner;
	LPNETRESOURCE lpConnRes;
	DWORD dwFlags;
	DWORD dwDevNum;
}

alias CONNECTDLGSTRUCT* LPCONNECTDLGSTRUCT;
alias CONNECTDLGSTRUCT _CONNECTDLGSTRUCT;
alias CONNECTDLGSTRUCT TCONNECTDLGSTRUCT;
alias CONNECTDLGSTRUCT* PCONNECTDLGSTRUCT;

struct DISCDLGSTRUCT
{
	DWORD cbStructure;
	HWND hwndOwner;
	LPTSTR lpLocalName;
	LPTSTR lpRemoteName;
	DWORD dwFlags;
}

alias DISCDLGSTRUCT* LPDISCDLGSTRUCT;
alias DISCDLGSTRUCT _DISCDLGSTRUCT;
alias DISCDLGSTRUCT TDISCDLGSTRUCT;
alias DISCDLGSTRUCT TDISCDLGSTRUCTA;
alias DISCDLGSTRUCT* PDISCDLGSTRUCT;

struct NETINFOSTRUCT
{
	DWORD cbStructure;
	DWORD dwProviderVersion;
	DWORD dwStatus;
	DWORD dwCharacteristics;
	DWORD dwHandle;
	ushort wNetType;
	DWORD dwPrinters;
	DWORD dwDrives;
}

alias NETINFOSTRUCT* LPNETINFOSTRUCT;
alias NETINFOSTRUCT _NETINFOSTRUCT;
alias NETINFOSTRUCT TNETINFOSTRUCT;
alias NETINFOSTRUCT* PNETINFOSTRUCT;

struct NETCONNECTINFOSTRUCT
{
	DWORD cbStructure;
	DWORD dwFlags;
	DWORD dwSpeed;
	DWORD dwDelay;
	DWORD dwOptDataSize;
}

alias NETCONNECTINFOSTRUCT* LPNETCONNECTINFOSTRUCT;
alias NETCONNECTINFOSTRUCT _NETCONNECTINFOSTRUCT;
alias NETCONNECTINFOSTRUCT TNETCONNECTINFOSTRUCT;
alias NETCONNECTINFOSTRUCT* PNETCONNECTINFOSTRUCT;
extern(Windows){
alias int (*ENUMMETAFILEPROC)(HDC, HANDLETABLE, METARECORD, int, LPARAM);
alias int (*ENHMETAFILEPROC)(HDC, HANDLETABLE, ENHMETARECORD, int, LPARAM);
alias int (*ENUMFONTSPROC)(LPLOGFONT, LPTEXTMETRIC, DWORD, LPARAM);
alias int (*FONTENUMPROC)(ENUMLOGFONT*, NEWTEXTMETRIC*, int, LPARAM);
alias int (*FONTENUMEXPROC)(ENUMLOGFONTEX*, NEWTEXTMETRICEX*, int, LPARAM);
alias void (*LPOVERLAPPED_COMPLETION_ROUTINE)(DWORD, DWORD);
}

struct POINTFLOAT
{
	FLOAT x;
	FLOAT y;
}

alias POINTFLOAT _POINTFLOAT;
alias POINTFLOAT TPOINTFLOAT;
alias POINTFLOAT* PPOINTFLOAT;

struct GLYPHMETRICSFLOAT
{
	FLOAT gmfBlackBoxX;
	FLOAT gmfBlackBoxY;
	POINTFLOAT gmfptGlyphOrigin;
	FLOAT gmfCellIncX;
	FLOAT gmfCellIncY;
}

alias GLYPHMETRICSFLOAT* LPGLYPHMETRICSFLOAT;
alias GLYPHMETRICSFLOAT _GLYPHMETRICSFLOAT;
alias GLYPHMETRICSFLOAT TGLYPHMETRICSFLOAT;
alias GLYPHMETRICSFLOAT* PGLYPHMETRICSFLOAT;

struct LAYERPLANEDESCRIPTOR
{
	ushort nSize;
	ushort nVersion;
	DWORD dwFlags;
	ubyte iPixelType;
	ubyte cColorBits;
	ubyte cRedBits;
	ubyte cRedShift;
	ubyte cGreenBits;
	ubyte cGreenShift;
	ubyte cBlueBits;
	ubyte cBlueShift;
	ubyte cAlphaBits;
	ubyte cAlphaShift;
	ubyte cAccumBits;
	ubyte cAccumRedBits;
	ubyte cAccumGreenBits;
	ubyte cAccumBlueBits;
	ubyte cAccumAlphaBits;
	ubyte cDepthBits;
	ubyte cStencilBits;
	ubyte cAuxBuffers;
	ubyte iLayerPlane;
	ubyte bReserved;
	COLORREF crTransparent;
}

alias LAYERPLANEDESCRIPTOR* LPLAYERPLANEDESCRIPTOR;
alias LAYERPLANEDESCRIPTOR TAGLAYERPLANEDESCRIPTOR;
alias LAYERPLANEDESCRIPTOR TLAYERPLANEDESCRIPTOR;
alias LAYERPLANEDESCRIPTOR* PLAYERPLANEDESCRIPTOR;

struct PIXELFORMATDESCRIPTOR
{
	ushort nSize;
	ushort nVersion;
	DWORD dwFlags;
	ubyte iPixelType;
	ubyte cColorBits;
	ubyte cRedBits;
	ubyte cRedShift;
	ubyte cGreenBits;
	ubyte cGreenShift;
	ubyte cBlueBits;
	ubyte cBlueShift;
	ubyte cAlphaBits;
	ubyte cAlphaShift;
	ubyte cAccumBits;
	ubyte cAccumRedBits;
	ubyte cAccumGreenBits;
	ubyte cAccumBlueBits;
	ubyte cAccumAlphaBits;
	ubyte cDepthBits;
	ubyte cStencilBits;
	ubyte cAuxBuffers;
	ubyte iLayerType;
	ubyte bReserved;
	DWORD dwLayerMask;
	DWORD dwVisibleMask;
	DWORD dwDamageMask;
}

alias PIXELFORMATDESCRIPTOR* LPPIXELFORMATDESCRIPTOR;
alias PIXELFORMATDESCRIPTOR TAGPIXELFORMATDESCRIPTOR;
alias PIXELFORMATDESCRIPTOR TPIXELFORMATDESCRIPTOR;
alias PIXELFORMATDESCRIPTOR* PPIXELFORMATDESCRIPTOR;

struct USER_INFO_2
{
	LPWSTR usri2_name;
	LPWSTR usri2_password;
	DWORD usri2_password_age;
	DWORD usri2_priv;
	LPWSTR usri2_home_dir;
	LPWSTR usri2_comment;
	DWORD usri2_flags;
	LPWSTR usri2_script_path;
	DWORD usri2_auth_flags;
	LPWSTR usri2_full_name;
	LPWSTR usri2_usr_comment;
	LPWSTR usri2_parms;
	LPWSTR usri2_workstations;
	DWORD usri2_last_logon;
	DWORD usri2_last_logoff;
	DWORD usri2_acct_expires;
	DWORD usri2_max_storage;
	DWORD usri2_units_per_week;
	PBYTE usri2_logon_hours;
	DWORD usri2_bad_pw_count;
	DWORD usri2_num_logons;
	LPWSTR usri2_logon_server;
	DWORD usri2_country_code;
	DWORD usri2_code_page;
}

alias USER_INFO_2* PUSER_INFO_2;
alias USER_INFO_2* LPUSER_INFO_2;
alias USER_INFO_2 TUSERINFO2;
alias USER_INFO_2* PUSERINFO2;

struct USER_INFO_0
{
	LPWSTR usri0_name;
}

alias USER_INFO_0* PUSER_INFO_0;
alias USER_INFO_0* LPUSER_INFO_0;
alias USER_INFO_0 TUSERINFO0;
alias USER_INFO_0* PUSERINFO0;

struct USER_INFO_3
{
	LPWSTR usri3_name;
	LPWSTR usri3_password;
	DWORD usri3_password_age;
	DWORD usri3_priv;
	LPWSTR usri3_home_dir;
	LPWSTR usri3_comment;
	DWORD usri3_flags;
	LPWSTR usri3_script_path;
	DWORD usri3_auth_flags;
	LPWSTR usri3_full_name;
	LPWSTR usri3_usr_comment;
	LPWSTR usri3_parms;
	LPWSTR usri3_workstations;
	DWORD usri3_last_logon;
	DWORD usri3_last_logoff;
	DWORD usri3_acct_expires;
	DWORD usri3_max_storage;
	DWORD usri3_units_per_week;
	PBYTE usri3_logon_hours;
	DWORD usri3_bad_pw_count;
	DWORD usri3_num_logons;
	LPWSTR usri3_logon_server;
	DWORD usri3_country_code;
	DWORD usri3_code_page;
	DWORD usri3_user_id;
	DWORD usri3_primary_group_id;
	LPWSTR usri3_profile;
	LPWSTR usri3_home_dir_drive;
	DWORD usri3_password_expired;
}

alias USER_INFO_3* PUSER_INFO_3;
alias USER_INFO_3* LPUSER_INFO_3;
alias USER_INFO_3 TUSERINFO3;
alias USER_INFO_3* PUSERINFO3;

struct GROUP_INFO_2
{
	LPWSTR grpi2_name;
	LPWSTR grpi2_comment;
	DWORD grpi2_group_id;
	DWORD grpi2_attributes;
}

alias GROUP_INFO_2* PGROUP_INFO_2;
alias GROUP_INFO_2 TGROUPINFO2;
alias GROUP_INFO_2* PGROUPINFO2;

struct LOCALGROUP_INFO_0
{
	LPWSTR lgrpi0_name;
}

alias LOCALGROUP_INFO_0* PLOCALGROUP_INFO_0;
alias LOCALGROUP_INFO_0* LPLOCALGROUP_INFO_0;
alias LOCALGROUP_INFO_0 TLOCALGROUPINFO0;
alias LOCALGROUP_INFO_0* PLOCALGROUPINFO0;

struct IMAGE_DOS_HEADER
{
	ushort e_magic;
	ushort e_cblp;
	ushort e_cp;
	ushort e_crlc;
	ushort e_cparhdr;
	ushort e_minalloc;
	ushort e_maxalloc;
	ushort e_ss;
	ushort e_sp;
	ushort e_csum;
	ushort e_ip;
	ushort e_cs;
	ushort e_lfarlc;
	ushort e_ovno;
	ushort[1 + 3] e_res;
	ushort e_oemid;
	ushort e_oeminfo;
	ushort[1 + 9] e_res2;
	LONG e_lfanew;
}

alias IMAGE_DOS_HEADER* PIMAGE_DOS_HEADER;
alias IMAGE_DOS_HEADER TIMAGEDOSHEADER;
alias IMAGE_DOS_HEADER* PIMAGEDOSHEADER;
alias ushort TVARTYPE;
alias TVARIANT* PVARIANT;

struct TVARIANT
{
	TVARTYPE vt;
	ushort wReserved1;
	ushort wReserved2;
	ushort wReserved3;

	union
	{
		struct
		{
			ubyte bVal;
		}
		struct
		{
			byte iVal;
		}
		struct
		{
			int lVal;
		}
		struct
		{
			float fltVal;
		}
		struct
		{
			double dblVal;
		}
		struct
		{
			ushort vbool;
		}
		struct
		{
			HRESULT scode;
		}
		struct
		{
			ubyte* pbVal;
		}
		struct
		{
			byte* piVal;
		}
		struct
		{
			int* plVal;
		}
		struct
		{
			float* pfltVal;
		}
		struct
		{
			double* pdblVal;
		}
		struct
		{
			ushort* pbool;
		}
		struct
		{
			HRESULT* pscode;
		}
		struct
		{
			POINTER byRef;
		}
	}
}

alias TVARIANT VARIANT;
alias int MMRESULT;
alias TWAVEFORMATEX* PWAVEFORMATEX;

align(1) struct TWAVEFORMATEX
{
	ushort wFormatTag;
	ushort nChannels;
	DWORD nSamplesPerSec;
	DWORD nAvgBytesPerSec;
	ushort nBlockAlign;
	ushort wBitsPerSample;
	ushort cbSize;
}

alias CRITICAL_SECTION TRTLCRITICALSECTION;
alias PCRITICAL_SECTION PRTLCRITICALSECTION;
alias PGUID PIID;
alias TGUID TIID;
alias HANDLE THANDLE;
alias TSMALLRECT* PSMALLRECT;
alias SMALL_RECT TSMALLRECT;
alias TCHARINFO* PCHARINFO;
alias _CHAR_INFO TCHARINFO;
alias POINTER TFARPROC;
alias POINTER TFNDLGPROC;
alias POINTER TFNTHREADSTARTROUTINE;

struct _OBJECT_TYPE_LIST
{
	ushort Level;
	ushort Sbz;
	PGUID ObjectType;
}

alias _OBJECT_TYPE_LIST TOBJECTTYPELIST;
alias TOBJECTTYPELIST* POBJECTTYPELIST;
alias _OBJECT_TYPE_LIST OBJECT_TYPE_LIST;
alias DWORD AUDIT_EVENT_TYPE;

align(1) struct _BLENDFUNCTION
{
	ubyte BlendOp;
	ubyte BlendFlags;
	ubyte SourceConstantAlpha;
	ubyte AlphaFormat;
}

alias _BLENDFUNCTION TBLENDFUNCTION;
alias TBLENDFUNCTION* PBLENDFUNCTION;
alias _BLENDFUNCTION BLENDFUNCTION;

alias HANDLE HMONITOR;

struct tagMONITORINFOEX
{
	DWORD  cbSize;
	RECT   rcMonitor;
	RECT   rcWork;
	DWORD  dwFlags;
	TCHAR  szDevice[CCHDEVICENAME];
}
alias tagMONITORINFOEX MONITORINFOEX;
alias MONITORINFOEX* LPMONITORINFOEX;

struct tagMONITORINFO
{
	DWORD  cbSize;
	RECT   rcMonitor;
	RECT   rcWork;
	DWORD  dwFlags;
}
alias tagMONITORINFO MONITORINFO;
alias MONITORINFO* LPMONITORINFO;

struct WINDOWINFO
{
    DWORD cbSize;
    RECT rcWindow;
    RECT rcClient;
    DWORD dwStyle;
    DWORD dwExStyle;
    DWORD dwWindowStatus;
    UINT cxWindowBorders;
    UINT cyWindowBorders;
    ATOM atomWindowType;
    short wCreatorVersion;
};
alias WINDOWINFO* PWINDOWINFO;
alias WINDOWINFO* LPWINDOWINFO;

/*
int S_OK = (0x00000000);
int S_FALSE = (0x00000001);
int NOERROR = (0);
int E_UNEXPECTED = (DWORD)((0x8000FFFF));
int E_NOTIMPL = (DWORD)((0x80004001));
int E_OUTOFMEMORY = (DWORD)((0x8007000E));
int E_INVALIDARG = (DWORD)((0x80070057));
int E_NOINTERFACE = (DWORD)((0x80004002));
int E_POINTER = (DWORD)((0x80004003));
int E_HANDLE = (DWORD)((0x80070006));
int E_ABORT = (DWORD)((0x80004004));
int E_FAIL = (DWORD)((0x80004005));
int E_ACCESSDENIED = (DWORD)((0x80070005));
int E_PENDING = (DWORD)((0x8000000A));
int CO_E_INIT_TLS = (DWORD)((0x80004006));
int CO_E_INIT_MEMORY_ALLOCATOR = (DWORD)((0x80004008));
int CO_E_INIT_CLASS_CACHE = (DWORD)((0x80004009));
int CO_E_INIT_RPC_CHANNEL = (DWORD)((0x8000400A));
int CO_E_INIT_TLS_SET_CHANNEL_CONTROL = (DWORD)((0x8000400B));
int CO_E_INIT_TLS_CHANNEL_CONTROL = (DWORD)((0x8000400C));
int CO_E_INIT_UNACCEPTED_USER_ALLOCATOR = (DWORD)((0x8000400D));
int CO_E_INIT_SCM_MUTEX_EXISTS = (DWORD)((0x8000400E));
int CO_E_INIT_SCM_FILE_MAPPING_EXISTS = (DWORD)((0x8000400F));
int CO_E_INIT_SCM_MAP_VIEW_OF_FILE = (DWORD)((0x80004010));
int CO_E_INIT_SCM_EXEC_FAILURE = (DWORD)((0x80004011));
int CO_E_INIT_ONLY_SINGLE_THREADED = (DWORD)((0x80004012));
int CO_E_CANT_REMOTE = (DWORD)((0x80004013));
int CO_E_BAD_SERVER_NAME = (DWORD)((0x80004014));
int CO_E_WRONG_SERVER_IDENTITY = (DWORD)((0x80004015));
int CO_E_OLE1DDE_DISABLED = (DWORD)((0x80004016));
int CO_E_RUNAS_SYNTAX = (DWORD)((0x80004017));
int CO_E_CREATEPROCESS_FAILURE = (DWORD)((0x80004018));
int CO_E_RUNAS_CREATEPROCESS_FAILURE = (DWORD)((0x80004019));
int CO_E_RUNAS_LOGON_FAILURE = (DWORD)((0x8000401A));
int CO_E_LAUNCH_PERMSSION_DENIED = (DWORD)((0x8000401B));
int CO_E_START_SERVICE_FAILURE = (DWORD)((0x8000401C));
int CO_E_REMOTE_COMMUNICATION_FAILURE = (DWORD)((0x8000401D));
int CO_E_SERVER_START_TIMEOUT = (DWORD)((0x8000401E));
int CO_E_CLSREG_INCONSISTENT = (DWORD)((0x8000401F));
int CO_E_IIDREG_INCONSISTENT = (DWORD)((0x80004020));
int CO_E_NOT_SUPPORTED = (DWORD)((0x80004021));
int CO_E_FIRST = (DWORD)((0x800401F0));
int CO_E_LAST = (DWORD)((0x800401FF));
int CO_S_FIRST = (0x401F0);
int CO_E_NOTINITIALIZED = (DWORD)((0x800401F0));
int CO_E_ALREADYINITIALIZED = (DWORD)((0x800401F1));
int CO_E_CANTDETERMINECLASS = (DWORD)((0x800401F2));
int CO_E_CLASSSTRING = (DWORD)((0x800401F3));
int CO_E_IIDSTRING = (DWORD)((0x800401F4));
int CO_E_APPNOTFOUND = (DWORD)((0x800401F5));
int CO_E_APPSINGLEUSE = (DWORD)((0x800401F6));
int CO_E_ERRORINAPP = (DWORD)((0x800401F7));
int CO_E_DLLNOTFOUND = (DWORD)((0x800401F8));
int CO_E_ERRORINDLL = (DWORD)((0x800401F9));
int CO_E_WRONGOSFORAPP = (DWORD)((0x800401FA));
int CO_E_OBJNOTREG = (DWORD)((0x800401FB));
int CO_E_OBJISREG = (DWORD)((0x800401FC));
int CO_E_OBJNOTCONNECTED = (DWORD)((0x800401FD));
int CO_E_APPDIDNTREG = (DWORD)((0x800401FE));
int CO_E_RELEASED = (DWORD)((0x800401FF));
*/